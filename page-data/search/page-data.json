{
    "componentChunkName": "component---src-pages-search-jsx",
    "path": "/search/",
    "result": {"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"🕷️ Web-Scraping TWSE｜台灣證券交易所爬蟲 ANUE｜鉅亨網爬蟲 Dcard API 串接 🤖 Artifical Intelligence ⚙️ Machine Learning 🦗 Mini Projects","fields":{"slug":"/projects/"},"frontmatter":{"date":"February 22, 2022","title":"💼 Projects","tags":["projects","Web-Scraping","AI","ML"]},"rawMarkdownBody":"## 🕷️ Web-Scraping\r\n- **TWSE｜台灣證券交易所爬蟲**\r\n- **ANUE｜鉅亨網爬蟲**\r\n- **Dcard API 串接**\r\n---\r\n## 🤖 Artifical Intelligence\r\n\r\n---\r\n\r\n## ⚙️ Machine Learning \r\n\r\n---\r\n## 🦗 Mini Projects"},{"excerpt":"🧋 Taiwan 中華開放平台 Ewant 🪙 Free Coursera Step 1 Financial aid Image Step 2 Image Step 3 Image Step 4 理由: 150個英文字 Image Udemy StudyCamp 台灣線上學習論壇 IBM cognitive class.ai Open P-TECH Coursera MongoDB Univer…","fields":{"slug":"/OCW/"},"frontmatter":{"date":"February 20, 2022","title":"📓 Online Course","tags":["OCW"]},"rawMarkdownBody":"## 🧋 Taiwan\r\n- ### [中華開放平台](https://www.openedu.tw/)\r\n---\r\n- ### [Ewant](https://www.ewant.org/)\r\n---\r\n\r\n## 🪙 Free\r\n- ### [Coursera](https://www.coursera.org/)\r\n  <details>\r\n\r\n    - Step 1 Financial aid\r\n    ![Image](https://i.imgur.com/Nb822V0.png)\r\n    - Step 2\r\n    ![Image](https://i.imgur.com/ZrycTFo.png)\r\n    - Step 3\r\n    ![Image](https://i.imgur.com/nWYZnZo.png)\r\n    - Step 4 理由: **150**個英文字\r\n    ![Image](https://i.imgur.com/p9Uvhag.png)\r\n  </details>\r\n\r\n---\r\n- ### [Udemy](https://www.udemy.com/)\r\n    - [StudyCamp 台灣線上學習論壇](https://vip.studycamp.tw/c/udemy/udemy-free-coupon-code)\r\n---\r\n- ### IBM\r\n    - [cognitive class.ai](https://cognitiveclass.ai/)\r\n    - [Open P-TECH](https://skillsbuild.org/students)\r\n    - Coursera\r\n---\r\n- ### [MongoDB University](https://university.mongodb.com/)\r\n  > 提供中文**字幕**\r\n---\r\n- ### [aws training and certification](https://www.aws.training/Certification)\r\n  > 提供中文**字幕**\r\n---\r\n- ### [NVIDIA 深度學習機構](https://www.nvidia.com/zh-tw/training/)\r\n  > 提供中文**教學**\r\n\r\n> **⚠️ 其他資料**\r\n> \r\n> ---\r\n> 1. [NKUST](https://acad.nkust.edu.tw/p/404-1004-27716-1.php)\r\n> 1. [6000+ OpenCourseWare (OCW) Courses and Where to Find Them](https://www.classcentral.com/report/ocw-courses/)"},{"excerpt":"註冊Imgur API Image VScode 輸入Client_id Client_secret  Image 使用  +  +  Image 參考資料 VS Code – Markdwon 利器 vscode-imgur","fields":{"slug":"/VSCode-imgur/"},"frontmatter":{"date":"February 20, 2022","title":"🖥️ Visual Studio Code + Imgur","tags":["Visual Studio Code","Markdown","Imgur"]},"rawMarkdownBody":"## 註冊[Imgur API](https://api.imgur.com/oauth2/addclient)\r\n![Image](https://i.imgur.com/BZshbmf.png)\r\n## VScode 輸入Client_id Client_secret\r\n> #### ` File/Preference/Setting/收尋 Client `\r\n>   \r\n> ![Image](https://i.imgur.com/rO4Rmb6.png)\r\n\r\n## 使用\r\n### `Ctrl` + `Alt` + `V`\r\n\r\n![Image](https://i.imgur.com/nzgUE82.png)\r\n\r\n> **參考資料**\r\n> - [VS Code – Markdwon 利器 vscode-imgur](https://turn2easy.com/2019/05/18/vs-code-markdwon-%E5%88%A9%E5%99%A8-vscode-imgur/)"},{"excerpt":"安裝 Update pkg Image Open MSYS2 MSY Image Open MSYS2 MinGWx64 Image\r\n4. gcc version Image\r\n5. Install gdb debugger Variable Path Search Edit the system environment variable Click Environments Variable…","fields":{"slug":"/C-1/"},"frontmatter":{"date":"February 19, 2022","title":"🖥️ C-Set up Visual Studio Code","tags":["C","Visual Studio Code"]},"rawMarkdownBody":"## 安裝\r\n1. Update pkg\r\n```shell\r\npacman -Syu\r\n```\r\n![Image](https://i.imgur.com/f1JTNWE.png)\r\n\r\n2. Open MSYS2 MSY\r\n```shell\r\npacman -Su\r\n```\r\n![Image](https://i.imgur.com/MdWcJE9.png)\r\n\r\n3. Open MSYS2 MinGWx64\r\n```shell\r\npacman -S mingw-w64-x86_64-gcc\r\n```\r\n![Image](https://i.imgur.com/No7dPmu.png)\r\n4. gcc version\r\n```shell\r\ngcc --version\r\n```\r\n![Image](https://i.imgur.com/2qsaXMi.png)\r\n5. Install gdb debugger\r\n```shell\r\npacman -S mingw-w64-x86_64-gdb\r\n```\r\n6. Variable Path\r\n```shell\r\nC:\\msys64\\mingw64\\bin\r\n```\r\n  - Search **Edit the system environment variable**\r\n  - Click **Environments Variable**\r\n  - Open **path** at system variable\r\n  - Click new button and paste the path\r\n![Image](https://i.imgur.com/UmYMQLw.png)\r\n\r\n## VSC-extension\r\n1. Search **c c++**\r\n![Image](https://i.imgur.com/fnG61dT.png)\r\n2. Search **code runner**\r\n![Image](https://i.imgur.com/XCd8yQI.png)\r\n3. Run in Terminal\r\n![Image](https://i.imgur.com/KfL4irU.png)\r\n\r\n> **參考資料**\r\n> 1. [How to Download and Install C Cpp Toolset ( gcc g++ gdb ) in Windows 10 using mingw-w64 and msys2](https://www.youtube.com/watch?v=0HD0pqVtsmw)\r\n> 1. [How to Set up Visual Studio Code for C and C++ Programming](https://youtu.be/77v-Poud_io)"},{"excerpt":"李享紝 🎓 國立高雄科技大學 金融系（2022） ✉️ hsiangjenli@gmail.com 🔧 Python, Flask, HTML, CSS, MySQL 🌐 TOEIC 725 證照 Microsoft-Azure AI Fundamentals 金融市場常識與職業道德 信託業業務人員 證券商業務員 金融科技力 經歷 2021.09 ~ 2022.01-國立高雄科技大學-高瞻科技不分…","fields":{"slug":"/About/"},"frontmatter":{"date":"February 07, 2022","title":"😶 About","tags":["about"]},"rawMarkdownBody":"\r\n## **李享紝**\r\n\r\n🎓 **國立高雄科技大學 金融系（2022）**  \r\n✉️ **hsiangjenli@gmail.com**  \r\n🔧 **Python, Flask, HTML, CSS, MySQL**  \r\n🌐 **TOEIC 725**\r\n\r\n## **證照**\r\n\r\n1. ***Microsoft-Azure AI Fundamentals***\r\n2. **金融市場常識與職業道德**\r\n3. **信託業業務人員**\r\n4. **證券商業務員**\r\n5. **金融科技力**\r\n\r\n## **經歷**\r\n\r\n- **2021.09 ~ 2022.01-國立高雄科技大學-高瞻科技不分系-資料科學 助教**\r\n\r\n## **競賽經驗**\r\n\r\n1. **2022-國立高雄科技大學-電機系-人工智慧暨類神經網路聯合專題展 🥇 第一名**\r\n2. **2020-Fintech Space-校園成果展 🏅 優選**\r\n\r\n---\r\n\r\n1. **2021-國立台北商業大學-Fintech金融服務-零股交易📈**\r\n5. **2020-國立台北商業大學-Fintech金融服務-記帳軟體💸**\r\n6. **2020-兆豐銀行-Fintech創意競賽**\r\n7. **2020-⽟⼭銀⾏-商業競賽**\r\n8. **2020-國立高雄科技大學-全國大專院校智慧應用創新創意競賽**\r\n\r\n## **Project**\r\n\r\n1. **2022-比特幣價格/漲跌預測**\r\n1. **TWSE｜台灣證券交易所爬蟲**\r\n1. **ANUE｜鉅亨網爬蟲**\r\n---\r\n1. **📱2020-LINE BOT**\r\n2. **🎲2022-Teachable Machine --Tic-Tac-Toe**\r\n\r\n## 修課經歷\r\n\r\n1. **高科-財管碩-量化投資與程式交易**\r\n2. **高科-電機系-人工智慧**\r\n3. **高科-工管系-資料探勘導論**\r\n4. **高科-博雅教育中心-程式設計教學助教培訓-推動大學{程式設計}教學**\r\n\r\n---\r\n\r\n1. ***Coursera-IBM-Exploratory Data Analysis for Machine Learning***\r\n2. ***Coursera-IBM-Supervised Machine Learning - Regression***\r\n3. ***AWS-Math for Machine Learning***\r\n4. **_NVIDIA_-深度學習基礎理論與實踐**"},{"excerpt":"Selenium + 鉅亨網 + MonogoDB 參考資料 高级爬虫: 让 Selenium 控制你的浏览器帮你爬 在Windows上安裝Python & Selenium + 簡易教學 Selenium Record and Playback tool Selenium IDE Selenium Record and Playback tool for ease of getting acq…","fields":{"slug":"/TWSE-13/"},"frontmatter":{"date":"February 01, 2021","title":"📈 TWSE-13-Selenium + 鉅亨網","tags":["TWSE"]},"rawMarkdownBody":"\n# Selenium + 鉅亨網 + MonogoDB\n\n\n> 參考資料\n> 1. [高级爬虫: 让 Selenium 控制你的浏览器帮你爬](https://mofanpy.com/tutorials/data-manipulation/scraping/selenium/)\n> 1. [在Windows上安裝Python & Selenium + 簡易教學](https://medium.com/@NorthBei/%E5%9C%A8windows%E4%B8%8A%E5%AE%89%E8%A3%9Dpython-selenium-%E7%B0%A1%E6%98%93%E6%95%99%E5%AD%B8-eade1cd2d12d)\n\n\n## Selenium Record and Playback tool\n1. [Selenium IDE](https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd?hl=en)\n> Selenium Record and Playback tool for ease of getting acquainted with Selenium WebDriver.\n1. [ChromeDriver - WebDriver for Chrome](https://sites.google.com/a/chromium.org/chromedriver/)\n\n<img src=\"https://i.imgur.com/tLyq6ao.jpg\" width = \"100%\"/>\n\n```python\nimport selenium\nselenium.__version__\n```\n\n### 開啟Google首頁\n\n```python\nfrom selenium import webdriver\n```\n\n```python\nbrowser = webdriver.Chrome()\nbrowser.get('http://google.com/')\n```\n### 開啟鉅亨網[台股新聞](https://news.cnyes.com/news/cat/tw_stock_news?exp=a#TODO)\n\n```python\nbrowser = webdriver.Chrome()\ndriver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\")\n```\n\n#### document.body.scrollHeight\n\n> 參考資料\n> 1. [How can I scroll a web page using selenium webdriver in python?](https://stackoverflow.com/questions/20986631/how-can-i-scroll-a-web-page-using-selenium-webdriver-in-python)\n> 1. [[爬蟲實戰] 如何透過Selenium 自動將頁面捲動至最下方抓取資料?](https://www.youtube.com/watch?v=49Mwqbu2cMo)\n> 1. [用python實現selenium 自動化測試](https://iter01.com/552647.html)\n\n```python\ndriver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n\nprint(driver.execute_script(\"return document.body.scrollHeight\"))\n```\n\n```python\npause_time = 10\n\nfor i in range(10):\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    time.sleep(pause_time)\n```\n\n\n\n#### ChromeOptions()\n\n> 參考資料\n> 1. [Python selenium.webdriver.ChromeOptions() Examples](https://www.programcreek.com/python/example/100025/selenium.webdriver.ChromeOptions)\n> 1. [Python selenium.webdriver 模块，ChromeOptions() 实例源码](http://codingdict.com/sources/py/selenium.webdriver/6817.html)\n> 1. [Python webdriver.ChromeOptions方法代碼示例](https://vimsky.com/zh-tw/examples/detail/python-method-selenium.webdriver.ChromeOptions.html)\n\n\n```python\nstart = time.time()\ndriver = webdriver.Chrome()\ndriver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\")\n\nfor i in range(2):\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    time.sleep(pause_time)\ndriver.close()\nend = time.time()\n\nprint(end - start)\n```\n\n```python\nstart = time.time()\noptions = webdriver.ChromeOptions()\noptions.add_experimental_option(\"prefs\", {'ignore_image': 2})\noptions.add_argument('--headless')\noptions.add_argument('--disable-gpu')\n\ndriver = webdriver.Chrome(chrome_options=options)\n\ndriver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\")\n\nfor i in range(2):\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    time.sleep(pause_time)\ndriver.close()\nend = time.time()\n\nprint(end - start)\n```\n> 執行時間比較\n> <img src=\"https://i.imgur.com/B0WK34l.jpg\" width = \"100%\"/>\n\n### Bs4\n\n```python\noptions = webdriver.ChromeOptions()\noptions.add_experimental_option(\"prefs\", {'ignore_image': 2})\noptions.add_argument('--headless')\noptions.add_argument('--disable-gpu')\n\ndriver = webdriver.Chrome(chrome_options=options)\n\ndriver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\")\n\nfor i in range(2):\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    time.sleep(pause_time)\nsoup = BeautifulSoup(driver.page_source, 'html.parser')\ndriver.close()\n```\n#### MongoDB\n\n##### 抓出已存檔的past_post_ids\n\n```python\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"article\"]\nmycol = mydb[\"2021_鉅亨網\"]\n\npast_post_ids = []\n\nend = datetime.datetime.now()\nstart = end - datetime.timedelta(days = 3)\n\nfor x in mycol.find({'Date': {\"$gte\": start,\"$lte\": end}}):\n    past_post_ids.append(x[\"post_id\"])\n```\n##### 從網站上抓下來的post_ids\n```python\nhrefs = soup.find_all('a')\npost_ids = []\nimport regex as re\nfor href in hrefs:\n    if re.match('/news/id/', str(href.get('href'))):\n        post_id = str(href.get('href')).split('/')[-1].split('?')[0]\n        post_ids.append(post_id)\n```\n##### past_post_ids&post_ids差集\n\n```python\nA = ['A','B','C','D']\nB = ['B','F']\nC = []\nfor x in B:\n    if x in A:\n        None\n    else:\n        C.append(x)\nC\n```\n\n```python\nnew_post_ids = []\nfor _id in post_ids:\n    if _id in past_post_ids:\n        None\n    else:\n        new_post_ids.append(_id)\n        \nprint(len(past_post_ids))\nprint(len(post_ids))\nprint(len(new_post_ids))\n```\n\n> 圖片解說\n> <img src=\"https://i.imgur.com/KY0ljVm.png\" width = \"100%\"/>\n> [Set (mathematics)](https://en.wikipedia.org/wiki/Set_(mathematics)#Basic_operations)\n\n\n#### 存成urls\n\n```python\nurls = ['https://news.cnyes.com/news/id/{}?exp=a'.format(e) for e in new_post_ids]\n```\n\n```python\ndef get_text(i):\n    post_id = urls[i].split('/')[5].split('?')[0]\n    data = urllib.request.urlopen(urls[i])\n    soup = BeautifulSoup(data, 'html.parser')\n    \n    P = soup.find_all('p')\n    text = ''\n    for i,p in zip(range(0,len(P)),P):\n        if i >=4:\n            text = text + p.getText()\n        i += 1\n\n    tags = soup.find_all('a')\n    n_tags = []\n    for tag in tags:\n        if re.match('/tag/', str(tag.get('href'))):\n            n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))])\n\n    title = soup.find('h1').getText()\n    T = soup.find('time')\n    Date = datetime.datetime.strptime(T['datetime'], \"%Y-%m-%dT%H:%M:%S+08:00\")\n    \n    return(Date,post_id,title,n_tags,text)\n```\n\n```python\nfor i in range(0,len(urls)):\n    print(get_text(i))\n```\n\n### 完整程式碼\n\n```python\nimport pymongo\n\nimport urllib\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nimport regex as re\n\nimport datetime\nimport time\n\npause_time = 10\noptions = webdriver.ChromeOptions()\noptions.add_experimental_option(\"prefs\", {'ignore_image': 2})\noptions.add_argument('--headless')\noptions.add_argument('--disable-gpu')\n\ndriver = webdriver.Chrome(chrome_options=options)\n\ndriver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\")\n\nfor i in range(2):\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    time.sleep(pause_time)\n    \nsoup = BeautifulSoup(driver.page_source, 'html.parser')\n\ndriver.close()\n\nhrefs = soup.find_all('a')\n\npost_ids = []\npast_post_ids = []\nnew_post_ids = []\n\nfor href in hrefs:\n    if re.match('/news/id/', str(href.get('href'))):\n        post_id = str(href.get('href')).split('/')[-1].split('?')[0]\n        post_ids.append(post_id)\n        \nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"article\"]\nmycol = mydb[\"2021_鉅亨網\"]\n\nend = datetime.datetime.now()\nstart = end - datetime.timedelta(days = 3)\n\nfor x in mycol.find({'Date': {\"$gte\": start,\"$lte\": end}}):\n    past_post_ids.append(x[\"post_id\"])\nnew_post_ids = []\nfor _id in post_ids:\n    if _id in past_post_ids:\n        None\n    else:\n        new_post_ids.append(_id)\n        \nurls = ['https://news.cnyes.com/news/id/{}?exp=a'.format(e) for e in new_post_ids]\n\ndef get_text(i):\n    post_id = urls[i].split('/')[5].split('?')[0]\n    data = urllib.request.urlopen(urls[i])\n    soup = BeautifulSoup(data, 'html.parser')\n    \n    P = soup.find_all('p')\n    text = ''\n    for i,p in zip(range(0,len(P)),P):\n        if i >=4:\n            text = text + p.getText()\n        i += 1\n\n    tags = soup.find_all('a')\n    n_tags = []\n    for tag in tags:\n        if re.match('/tag/', str(tag.get('href'))):\n            n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))])\n\n    title = soup.find('h1').getText()\n    T = soup.find('time')\n    Date = datetime.datetime.strptime(T['datetime'], \"%Y-%m-%dT%H:%M:%S+08:00\")\n    \n    return(Date,post_id,title,n_tags,text)\n\nfor i in range(0,len(urls)):\n    data = get_text(i)\n    print(i, end = ' ')\n    mydict = { \"Date\": data[0], \"post_id\":data[1],\"Title\": data[2], \"Tags\":data[3] , \"text\": data[4] }\n    x = mycol.insert_one(mydict)\ncursor = mycol.aggregate(\n    [{\"$group\": {\"_id\": \"$Title\",\n                 \"unique_ids\": {\"$addToSet\": \"$_id\"},\n                 \"count\": {\"$sum\": 1}}},\n     {\"$match\": {\"count\": { \"$gte\": 2 }}}])\n\nresponse = []\n\nfor doc in cursor:\n    del doc[\"unique_ids\"][0]\n    for id in doc[\"unique_ids\"]:\n        response.append(id)\n\nmycol.remove({\"_id\": {\"$in\": response}})\n```\n\n\n\n\n\n\n"},{"excerpt":"Python + 投資學/Efficient Frontier/ SQL 連接/方法一/ 報酬率 參考資料\npandas.DataFrame.pct_change 基本 今日 & 昨日 pct_change() 變異數 var() 標準差 std() 共變異數 cov() 參考公式\n 簡單實證      1 0 2 1 0 0 -1 3 1.5 -1.5 2 1 0 -1.5 -1.5 1 0 …","fields":{"slug":"/TWSE-12/"},"frontmatter":{"date":"January 27, 2021","title":"📈 TWSE-12-Efficient Frontier","tags":["TWSE"]},"rawMarkdownBody":"\n# Python + 投資學/Efficient Frontier/\n## SQL 連接/方法一/\n\n```python\nfrom sqlalchemy import create_engine\n\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np\nfrom functools import reduce\nimport scipy.optimize as solver\n```\n\n\n\n```python\nuser = 'root'\npw = \"YourPassword\"\ndb = \"TWSE\"\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db))\n```\n\n```python\ndf_2330 = pd.read_sql(\"SELECT * FROM `每日收盤行情` WHERE `證券代號` = 2330 AND `日期` BETWEEN '2020/10/20 00:00:00' AND '2021/1/10 23:59:59' ORDER BY `日期`\", engine, coerce_float=True, parse_dates=True)\ndf_tw = pd.read_sql(\"SELECT * FROM `發行量加權股價指數` WHERE `日期` BETWEEN '2020/10/20 00:00:00' AND '2021/1/10 23:59:59'\", engine, coerce_float=True, parse_dates=True)\n```\n### 報酬率\n> **參考資料**\n> [pandas.DataFrame.pct_change](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pct_change.html)\n> $$ \n> Return = \\frac{D_{1} - D_{0}}{D_{0}} \n> $$\n\n#### 基本\n##### 今日 & 昨日\n\n```python\nprint('今日  昨日')\n\nfor i,j in zip(df_2330['收盤價'],df_2330['收盤價'].shift(1)) :\n    print(i, j)\n```\n\n<img src = \"https://i.imgur.com/7lkgNrl.jpg\" width = \"100%\" />\n\n```python\nReturn = pd.DataFrame((df_2330['收盤價']  - df_2330['收盤價'].shift(1))/df_2330['收盤價'].shift(1))\nReturn = Return.rename(columns = {'收盤價':'Return'})\nReturn\n```\n\n#### pct_change()\n\n```python\ndf_2330['收盤價'].pct_change()\ndf_tw['收盤指數'].pct_change()\n```\n```python\ndf = pd.DataFrame(df_2330['收盤價'].pct_change())\ndf['TW']  = df_tw['收盤指數'].pct_change()\ndf = df.rename(columns = {'收盤價':'2330'})\n```\n\n### 變異數$σ^2$\n\n#### [var()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.var.html)\n\n```python\ndf_tw['收盤指數'].pct_change().var()\n```\n\n### 標準差$σ$\n\n#### [std()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.std.html)\n\n```python\ndf_tw['收盤指數'].pct_change().std()\n\nstd = df_tw['收盤指數'].pct_change().var()**(1/2)\n```\n\n\n\n### 共變異數$σ_{a,b}$\n\n#### [cov()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.cov.html)\n\n> **參考公式**\n> $$cov_{x,y} = \\frac{\\sum{}^{} ({x_i} - \\overline{x})({y_i} - \\overline{y})}{N-1}$$\n\n##### 簡單實證\n\n```python\ndf_test = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n                  columns=['dogs', 'cats'])\ndf_test.cov()\n```\n\n\n|        $$dog$$         | $$dog_i - \\overline{dog} $$ |         $$cats$$         | $$cat_i - \\overline{cat} $$ |               $${Dev_{dog}}\\times{Dev_{cat}}$$               |\n| :--------------------: | :-------------------------: | :----------------------: | :-------------------------: | :----------------------------------------------------------: |\n|         **1**          |            **0**            |          **2**           |            **1**            |                            **0**                             |\n|         **0**          |           **-1**            |          **3**           |           **1.5**           |                           **-1.5**                           |\n|         **2**          |            **1**            |          **0**           |          **-1.5**           |                           **-1.5**                           |\n|         **1**          |            **0**            |          **1**           |           **-1**            |                            **0**                             |\n| $$\\overline{dog} = 1$$ |                             | $$\\overline{cat} = 1.5$$ |                             | $${\\frac{\\sum{}^{} ({Dev_{dog}}\\times{Dev_{cat}})}{4-1}} = -1$$ |\n\n##### $ σ_{2330,TW} $\n> **補充資料**\n> $$ σ_{2330,TW} $$\n> <p align = \"right\" ><a href=\"https://drive.google.com/file/d/1w_wYTHxTBQZzPiWNjn-eNIu6UjXAVzyb/view?usp=sharing\" target=\"_blank\" rel=\"noopener noreffer\">Excel計算過程</a></p>\n\n\n```python\ndf.cov()\n\n>>> 0.000097\n```\n\n### 相關係數$ρ_{a,b}$\n\n#### [corr()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html)\n\n```python\ndf.corr()\n```\n\n\n\n|      |   2330   |    TW    |\n| :--: | :------: | :------: |\n| 2330 | 1.000000 | 0.895857 |\n|  TW  | 0.895857 | 1.000000 |\n\n### $\\beta$係數\n> **參考公式**\n> $${\\beta} = \\frac{σ_{i,m}}{σ^2}$$</h2>\n\n```python\nBeta = df.cov()['TW'][0]/df_tw['收盤指數'].pct_change().var()\n```\n\n## SQL 連接/方法二/\n\n```python\nfrom sqlalchemy import create_engine\n\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np\nfrom functools import reduce\nimport scipy.optimize as solver\n```\n\n\n\n```python\nuser = 'root'\npw = \"YourPassword\"\ndb = \"TWSE\"\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db))\n\nStart = '2020/10/20 00:00:00'\nEnd = '2021/1/10 23:59:59'\n\nSQL = '''\nSELECT `收盤價` FROM `{}` WHERE `證券代號` = '{}' AND `日期` BETWEEN '{}' AND '{}' ORDER BY `日期`\n'''\n\nstock_codes = ['2330','2317','1234']\n\ndef getSQL(stock_code):\n    df = pd.read_sql(SQL.format('每日收盤行情',stock_code, Start, End), engine, coerce_float=True, parse_dates=True)\n    return df\n\ndef Tsql(stock_codes):\n    for i in range(0,len(stock_codes)):\n        globals()[i] = getSQL(stock_codes[i])\n        if i == 0:\n            df = pd.DataFrame(globals()[i].pct_change())\n            df = df.rename(columns = {'收盤價':stock_codes[i]})\n        else:\n            df['{}'.format(stock_codes[i])] = globals()[i].pct_change()\n    df = df.replace([np.inf, -np.inf], 0)\n    return df\n\nreturns = Tsql(stock_codes)\n```\n\n\n\n<img src = \"https://i.imgur.com/yUyf3O0.jpg\" width = \"100%\">\n\n### 預期報酬$E(r)$\n\n```python\nExpected_R = returns.mean() * 252\n```\n### 權重$W_{i}$\n```python\nW = np.array([0.5,0.3,0.2])\n```\n### 投資組合報酬率$R_{P}$\n> **參考公式**\n> $$R_{P} = \\sum{W_{i}\\times{R_{i}}}$$\n\n\n```python\nPortfolio_R = sum(W * Expected_R)\n```\n\n\n\n## 量化投資/Efficient Frontier/\n\n### 隨機權重$W_{i}$\n\n```python\nW = np.random.rand(len(stock_codes))\nW = W/sum(W)\nW\n```\n\n### 投資組合風險$σ_{P}^2$\n#### 基本公式\n\n> **參考公式**\n> $$σ_{P}^2 = \\sum{ {W_{i}^2} {σ_{i}^2}} + \\sum\\sum{ W_{i} W_{j} {σ_{i,j}}  } $$\n> $$σ_{P}^2 = \\sum{ {W_{i}^2} {σ_{i}^2}} + \\sum\\sum{ W_{i} W_{j} {ρ_{i,j}} {σ_{i}} {σ_{j}}  } $$\n\n\n#### 矩陣簡單計算\n\n> **參考資料**\n\n[[work] 理解矩陣乘法](https://www.itread01.com/content/1543280103.html)\n\\\\[ \\begin{bmatrix} 1&2\\\\\\3&4 \\end{bmatrix} \\times \\begin{bmatrix} 4&-6\\\\\\ -2&3 \\end{bmatrix} = \\begin{bmatrix} A_1&A_2\\\\\\B_1&B_2  \\end{bmatrix} = \\begin{bmatrix} 0&0\\\\\\4& -6  \\end{bmatrix}\\\\]\n\n\n|                                      |                                         |\n| ------------------------------------ | --------------------------------------- |\n| $A_{1} = 1\\times4 + 2\\times(-2) = 0$ | $A_{2} = 1\\times(-6) + 2\\times(3) = 0$  |\n| $B_{1} = 3\\times4 + 4\\times(-2) = 4$ | $B_{2} = 3\\times(-6) + 4\\times(3) = -6$ |\n\n\n\n\n\n#### 使用矩陣簡化$σ_{P}^2$計算\n\n> **參考資料**\n> <a href=\"https://www.masterlink.com.tw/about/riskmanagment/manage/market.aspx\" target=\"_blank\" rel=\"noopener noreffer\">VaR 風險值衡量(Value at Risk；VaR)</a><br>\n> <a href=\"https://kknews.cc/zh-tw/finance/lp3kr9g.html\" target=\"_blank\" rel=\"noopener noreffer\">如何計算投資組合的風險和回報</a></p>\n> \n$$σ_{P}^2 = \\begin{bmatrix}W_1&W_2&W_3\\end{bmatrix} \\times \\begin{bmatrix}σ_{1}^2&σ_{2,1}&σ_{3,1} \\\\\\ σ_{1,2}&σ_{2}^2&σ_{3,2} \\\\\\ σ_{1,3}&σ_{2,3}&σ_{3}^2\\end{bmatrix} \\times \\begin{bmatrix}W_1\\\\\\ W_2\\\\\\ W_3\\end{bmatrix}$$\n\n\n\n<style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:none;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:none;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-io4b{background-color:#efefef;border-color:inherit;color:#000000;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\">\n<thead>\n  <tr>\n      <th class=\"tg-io4b\" colspan=\"3\"><h2>步驟一</h2></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-c3ow\" colspan=\"3\">\n\n$$\\begin{bmatrix}W_1&W_2&W_3\\end{bmatrix} \\times \\begin{bmatrix}σ_{1}^2&σ_{2,1}&σ_{3,1} \\\\\\ σ_{1,2}&σ_{2}^2&σ_{3,2} \\\\\\ σ_{1,3}&σ_{2,3}&σ_{3}^2\\end{bmatrix}$$</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">\n\n$W_{1}σ_{1}^2 + W_{2}σ_{1,2}+ W_{3}σ_{1,3}$</td>\n    <td class=\"tg-0pky\">\n\n$ W_{1}σ_{2,1}+ W_{2}σ_{2}^2+ W_{3}σ_{2,3}$</td>\n    <td class=\"tg-0pky\">\n\n$ W_{1}σ_{3,1}+ W_{2}σ_{3,2}+ W_{3}σ_{3}^2$</td>\n  </tr>\n  <tr>\n      <td class=\"tg-io4b\" colspan=\"3\"><h2>步驟二</h2></td>\n  </tr>\n  <tr>\n    <td class=\"tg-c3ow\" colspan=\"3\">\n    \n$$\\begin{bmatrix} W_{1}σ_{1}^2 + W_{2}σ_{1,2}+ W_{3}σ_{1,3},& W_{1}σ_{2,1}+ W_{2}σ_{2}^2+ W_{3}σ_{2,3},& W_{1}σ_{3,1}+ W_{2}σ_{3,2}+ W_{3}σ_{3}^2\\end{bmatrix} \\times \\begin{bmatrix}W_1\\\\\\ W_2\\\\\\ W_3\\end{bmatrix}$$</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">\n    \n$W_{1}^2σ_{1}^2$</td>\n    <td class=\"tg-0pky\">\n    \n$ W_{1}W_{2}σ_{2,1}$</td>\n    <td class=\"tg-0pky\">\n    \n$ W_{1}W_{2}σ_{3,1}$</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">\n    \n$ W_{1} W_{2}σ_{1,2}$</td>\n    <td class=\"tg-0pky\">\n    \n$ W_{2}^2σ_{2}^2$</td>\n    <td class=\"tg-0pky\">\n    \n$ W_{2}W_{3}σ_{3,2}$</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">\n    \n$ W_{1} W_{3}σ_{1,3}$</td>\n    <td class=\"tg-0pky\">\n    \n$ W_{2}W_{3}σ_{2,3}$</td>\n    <td class=\"tg-0pky\">\n    \n$ W_{3}^2σ_{3}^2$</td>\n  </tr>\n</tbody>\n</table>\n\n#### 用Python表示\n> **參考資料**\n> 1. [Python-繪製效率前緣(Efficient Frontier)](https://ycy-tw.github.io/2020/03/28/Python-%E7%B9%AA%E8%A3%BD%E6%95%88%E7%8E%87%E5%89%8D%E7%B7%A3(Efficient%20Frontier)/)\n> 1. [Python金融大數據分析——第11章 統計學（2）投資組合優化 筆記](https://www.twblogs.net/a/5b7f57ea2b717767c6af118b)\n\n\n##### 方法一\n> **以下程式碼來源，參考自：**\n> [Python-繪製效率前緣(Efficient Frontier)](https://ycy-tw.github.io/2020/03/28/Python-%E7%B9%AA%E8%A3%BD%E6%95%88%E7%8E%87%E5%89%8D%E7%B7%A3(Efficient%20Frontier)/)\n>\n> ```python\n> Portfolio_risk = np.sqrt(reduce(np.dot, [W, cov_matrix, W.T]))\n> ```\n\n##### 方法二\n\n> **參考資料**\n> [Python Lambda](https://www.w3schools.com/python/python_lambda.asp)\n> ```python\n> Portfolio_risk = lambda a, b,c: np.sqrt(np.dot(np.dot(a,b),c))\n> Portfolio_risk(W, cov_matrix,W.T)\n> ```\n\n\n\n### 隨機生成10000筆權重\n> **以下程式碼來源，參考自：**\n> [Python-繪製效率前緣(Efficient Frontier)](https://ycy-tw.github.io/2020/03/28/Python-%E7%B9%AA%E8%A3%BD%E6%95%88%E7%8E%87%E5%89%8D%E7%B7%A3(Efficient%20Frontier)/)\n> \n> ```python\nExpected_R = returns.mean() * 252\ncov_matrix = returns.cov()*252\nall_Portfolio_risk = []\nall_return = []\nExpected_R = returns.mean() * 252\n\nstop = 0\n\nwhile stop < 10000:\n    try:\n        stop += 1\n        W = np.random.rand(len(stock_codes))\n        W = W/sum(W)\n        all_return.append(sum(Expected_R * W))\n        all_Portfolio_risk.append(np.sqrt(reduce(np.dot, [W, cov_matrix, W.T])))\n    except:\n        pass\n\nSR = np.array(all_return)/np.array(all_Portfolio_risk)\n```\n\n#### 畫圖\n##### Fig 1\n```python\nfig = plt.figure(figsize = (20,10))\nax = fig.add_subplot()\nax.plot(all_Portfolio_risk, all_return, 'o',alpha=1)\nfig.savefig('Efficient_Frontier_1.png',dpi=300, bbox_inches='tight')\n```\n<img src=\"https://i.imgur.com/k9uKXJg.png\" width = \"100%\"/>\n\n##### Fig 2\n###### 方法一\n```python\n#基本設定\nfig = plt.figure(figsize = (20,8))\nrisk_free = 0.01\nSR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk)\n\n#字體大小設定\nlabel_size = 27\ntick_size = 15\nTitle_size = 40\n\n#Title\nTitle = 'Efficient Frontier'\n\n#格線\nplt.grid(True)\n\n#散點圖\nplt.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1)\n\n#X,Y軸標籤\nplt.xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold')\nplt.ylabel('$E(R)$', fontsize=label_size, fontweight='bold')\n\n#X,Y軸字體設定\nplt.xticks(fontsize=tick_size, fontweight='bold')\nplt.yticks(fontsize=tick_size, fontweight='bold')\n\n#color bar設定\ncbar = plt.colorbar(label='$Sharpe$ $Ratio$')\nax = cbar.ax\nax.tick_params(labelsize=tick_size) \ncbar_Title = ax.yaxis.label\nfont = matplotlib.font_manager.FontProperties(size=label_size)\ncbar_Title.set_font_properties(font)\n\nplt.title(Title, fontsize=Title_size,family = 'monospace',ha = 'center')\n\n#圖片儲存\nplt.savefig('Efficient_Frontier_2.png',dpi=300, bbox_inches='tight')\n```\n###### 方法二\n\n```python\nfig = plt.figure(figsize = (20,8))\nlabel_size = 27\ntick_size = 15\nTitle_size = 40\nTitle = 'Efficient Frontier'\nrisk_free = 0.01\nSR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk)\n\n\nax = fig.add_subplot()\nax.grid(True)\nax_main = ax.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1)\n\nax.set_title(Title, fontsize=Title_size,family = 'monospace',ha = 'center')\nax.set_xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold')\nax.set_ylabel('$E(R)$', fontsize=label_size, fontweight='bold')\n\nax.tick_params(labelsize=tick_size) \n\n\ncbar = fig.colorbar(ax_main, ax=ax, label = '$Sharpe$ $Ratio$')\ncbar = cbar.ax\ncbar.tick_params(labelsize=tick_size) \ncbar_Title = cbar.yaxis.label\nfont = matplotlib.font_manager.FontProperties(size=label_size)\ncbar_Title.set_font_properties(font)\nfig.savefig('Efficient_Frontier_3.png',dpi=300, bbox_inches='tight')\n```\n\n\n\n\n\n<img src=\"https://i.imgur.com/Uog91y0.png\" width = '100%'/>\n\n### [scipy.optimize.minimize](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html)\n\n#### min($σ_{P}$)\n\n```python\ndef standard_deviation(W):\n    return Portfolio_risk(W, cov_matrix,W.T)\n```\n\n**以下程式碼來源，參考自：**\n[Python-繪製效率前緣(Efficient Frontier)](https://ycy-tw.github.io/2020/03/28/Python-%E7%B9%AA%E8%A3%BD%E6%95%88%E7%8E%87%E5%89%8D%E7%B7%A3(Efficient%20Frontier)/)\n\n```python\nx0 = [1/len(stock_codes) for e in range(len(stock_codes))]\n\nbounds = tuple((0, 1) for x in range(len(stock_codes)))\n\nconstraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}]\n\nmin_Portfolio_risk = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds)\n\nmvp_risk = min_Portfolio_risk.fun\nmvp_return = sum(min_Portfolio_risk.x * Expected_R)\n\n\nprint('風險最小化投資組合預期報酬率為:' + str(round(mvp_return,2)))\nprint('風險最小化投資組合風險為:' + str(round(mvp_risk,2)))\n```\n\n\n> **補充資料**\n[scipy.optimize.minimize](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html)\n\n<img src=\"https://i.imgur.com/m2P2B2d.jpg\" width = \"100%\"/>\n\n> **以下程式碼來源，參考自：**\n\n[Python-繪製效率前緣(Efficient Frontier)](https://ycy-tw.github.io/2020/03/28/Python-%E7%B9%AA%E8%A3%BD%E6%95%88%E7%8E%87%E5%89%8D%E7%B7%A3(Efficient%20Frontier)/)\n\n```python\nfor i in range(0,len(stock_codes)):\n    print(stock_codes[i]+' 佔投資組合權重 : ' + str(format(min_Portfolio_risk.x[i], '.4f')))\n```\n\n$$SR = \\frac{R_{P} - R_{f}}{σ_{P}}$$\n\n```python\nrisk_free = 0.01\nSR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk)\n```\n\n```python\nx0 = [1/len(stock_codes) for e in range(len(stock_codes))]\nbounds = tuple((0, 1) for x in range(len(stock_codes)))\n\nefficient_fronter_return_range = np.arange(min(all_return), max(all_return),(max(all_return) - min(all_return))/20)\nefficient_fronter_risk_list = []\n\nfor i in efficient_fronter_return_range:\n    constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1},\n                   {'type': 'eq', 'fun': lambda x: sum(x * Expected_R) - i}]\n    efficient_fronter = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds)\n    efficient_fronter_risk_list.append(efficient_fronter.fun)\n```\n\n\n\n```python\nlabel_size = 27\ntick_size = 15\nTitle_size = 40\nTitle = 'Efficient Frontier'\n\nfig = plt.figure(figsize = (20,8))\n\nax = fig.add_subplot()\nax.grid(True)\n\nax_main = ax.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1)\n\nax.set_title(Title, fontsize=Title_size,family = 'monospace',ha = 'center')\nax.set_xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold')\nax.set_ylabel('$E(R)$', fontsize=label_size, fontweight='bold')\n\nax.tick_params(labelsize=tick_size) \n\nax.plot(efficient_fronter_risk_list, efficient_fronter_return_range, linewidth=5, color='#251f6b')\nax.plot(mvp_risk, mvp_return,'o',color='r', markerfacecolor='#ed1313',  markersize=15)\n\ncbar = fig.colorbar(ax_main, ax=ax, label = '$Sharpe$ $Ratio$')\ncbar = cbar.ax\ncbar.tick_params(labelsize=tick_size) \ncbar_Title = cbar.yaxis.label\nfont = matplotlib.font_manager.FontProperties(size=label_size)\ncbar_Title.set_font_properties(font)\nfig.savefig('Efficient_Frontier_4.png',dpi=300, bbox_inches='tight')\n```\n\n<img src=\"https://i.imgur.com/X2kXG6k.png\" width = \"100%\"/>\n\n### 完整程式碼/SQL/\n\n```python\nfrom sqlalchemy import create_engine\n\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np\nfrom functools import reduce\nimport scipy.optimize as solver\n\nuser = 'root'\npw = \"YourPassword\"\ndb = \"TWSE\"\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db))\n\nStart = '2020/10/20 00:00:00'\nEnd = '2021/1/10 23:59:59'\n\nSQL = '''\nSELECT `收盤價` FROM `{}` WHERE `證券代號` = '{}' AND `日期` BETWEEN '{}' AND '{}' ORDER BY `日期`\n'''\n\nstock_codes = ['2330','2317','1234']\n\ndef getSQL(stock_code):\n    df = pd.read_sql(SQL.format('每日收盤行情',stock_code, Start, End), engine, coerce_float=True, parse_dates=True)\n    return df\n\ndef Tsql(stock_codes):\n    for i in range(0,len(stock_codes)):\n        globals()[i] = getSQL(stock_codes[i])\n        if i == 0:\n            df = pd.DataFrame(globals()[i].pct_change())\n            df = df.rename(columns = {'收盤價':stock_codes[i]})\n        else:\n            df['{}'.format(stock_codes[i])] = globals()[i].pct_change()\n    df = df.replace([np.inf, -np.inf,np.nan], 0)\n    return df\n\nreturns = Tsql(stock_codes)\n\nExpected_R = returns.mean() * 252\ncov_matrix = returns.cov()*252\n\nPortfolio_risk = lambda a, b,c: np.sqrt(np.dot(np.dot(a,b),c))\nall_Portfolio_risk = []\nall_return = []\n\nstop = 0\n\nwhile stop < 10000:\n    try:\n        stop += 1\n        W = np.random.rand(len(stock_codes))\n        W = W/sum(W)\n        all_return.append(sum(Expected_R * W))\n        all_Portfolio_risk.append(Portfolio_risk(W, cov_matrix,W.T))\n    except:\n        pass\n\ndef standard_deviation(W):\n    return Portfolio_risk(W, cov_matrix,W.T)\n\nx0 = [1/len(stock_codes) for e in range(len(stock_codes))]\nbounds = tuple((0, 1) for x in range(len(stock_codes)))\nconstraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}]\n\nmin_Portfolio_risk = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds)\nmvp_risk = min_Portfolio_risk.fun\nmvp_return = sum(min_Portfolio_risk.x * Expected_R)\n\n\nprint('風險最小化投資組合預期報酬率為:' + str(round(mvp_return,2)))\nprint('風險最小化投資組合風險為:' + str(round(mvp_risk,2)))\n\nfor i in range(0,len(stock_codes)):\n    print(stock_codes[i]+' 佔投資組合權重 : ' + str(format(min_Portfolio_risk.x[i], '.4f')))\n\nrisk_free = 0.01\nSR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk)\n\nstart = round(min(all_return),6)\nend = round(max(all_return),4)\n\nefficient_fronter_return_range = np.arange(start, end,(max(all_return) - min(all_return))/30)\nefficient_fronter_risk_list = []\n\nfor i in efficient_fronter_return_range:\n    constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1},\n                   {'type': 'eq', 'fun': lambda x: sum(x * Expected_R) - i}]\n    efficient_fronter = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds)\n    efficient_fronter_risk_list.append(efficient_fronter.fun)\n\nlabel_size = 27\ntick_size = 15\nTitle_size = 40\nTitle = 'Efficient Frontier'\n\nfig = plt.figure(figsize = (20,8))\n\nax = fig.add_subplot()\nax.grid(True)\n\nax_main = ax.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1)\n\nax.set_title(Title, fontsize=Title_size,family = 'monospace',ha = 'center')\nax.set_xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold')\nax.set_ylabel('$E(R)$', fontsize=label_size, fontweight='bold')\n\nax.tick_params(labelsize=tick_size) \n\nax.plot(efficient_fronter_risk_list, efficient_fronter_return_range, linewidth=5, color='#251f6b')\nax.plot(mvp_risk, mvp_return,'o',color='r', markerfacecolor='#ed1313',  markersize=15)\n\ncbar = fig.colorbar(ax_main, ax=ax, label = '$Sharpe$ $Ratio$')\ncbar = cbar.ax\ncbar.tick_params(labelsize=tick_size) \ncbar_Title = cbar.yaxis.label\nfont = matplotlib.font_manager.FontProperties(size=label_size)\ncbar_Title.set_font_properties(font)\nfig.savefig('Efficient_Frontier_4.png',dpi=300, bbox_inches='tight')\n```\n\n### 完整程式碼/免SQL/\n\n```python\nimport pandas_datareader.data as web\nimport mplfinance as mpf\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np\nimport scipy.optimize as solver\nstock_code = ['2330','3008','6409','1234','2337','2412']\nstock_codes = ['{}.tw'.format(e) for e in stock_code]\n\ndf = web.DataReader(stock_codes, 'yahoo', '2020-05-01')\n\nreturns = df['Close'].pct_change()\nExpected_R = returns.mean() * 252\ncov_matrix = returns.cov()*252\n\nPortfolio_risk = lambda a, b,c: np.sqrt(np.dot(np.dot(a,b),c))\nall_Portfolio_risk = []\nall_return = []\n\nstop = 0\n\nwhile stop < 50000:\n    try:\n        stop += 1\n        W = np.random.rand(len(stock_codes))\n        W = W/sum(W)\n        all_return.append(sum(Expected_R * W))\n        all_Portfolio_risk.append(Portfolio_risk(W, cov_matrix,W.T))\n    except:\n        pass\n\ndef standard_deviation(W):\n    return Portfolio_risk(W, cov_matrix,W.T)\n\nx0 = [1/len(stock_codes) for e in range(len(stock_codes))]\nbounds = tuple((0, 1) for x in range(len(stock_codes)))\nconstraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}]\n\nmin_Portfolio_risk = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds)\nmvp_risk = min_Portfolio_risk.fun\nmvp_return = sum(min_Portfolio_risk.x * Expected_R)\n\n\nprint('風險最小化投資組合預期報酬率為:' + str(round(mvp_return,2)))\nprint('風險最小化投資組合風險為:' + str(round(mvp_risk,2)))\n\nfor i in range(0,len(stock_codes)):\n    print(stock_codes[i]+' 佔投資組合權重 : ' + str(format(min_Portfolio_risk.x[i], '.4f')))\n\nrisk_free = 0.01\nSR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk)\n\nstart = round(min(all_return),6)\nend = round(max(all_return),4)\n\nefficient_fronter_return_range = np.arange(start, end,(max(all_return) - min(all_return))/30)\nefficient_fronter_risk_list = []\n\nfor i in efficient_fronter_return_range:\n    constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1},\n                   {'type': 'eq', 'fun': lambda x: sum(x * Expected_R) - i}]\n    efficient_fronter = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds)\n    efficient_fronter_risk_list.append(efficient_fronter.fun)\n\nlabel_size = 27\ntick_size = 15\nTitle_size = 40\nTitle = 'Efficient Frontier'\n\nfig = plt.figure(figsize = (20,8))\n\nax = fig.add_subplot()\nax.grid(True)\n\nax_main = ax.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1)\n\nax.set_title(Title, fontsize=Title_size,family = 'monospace',ha = 'center')\nax.set_xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold')\nax.set_ylabel('$E(R)$', fontsize=label_size, fontweight='bold')\n\nax.tick_params(labelsize=tick_size) \n\nax.plot(efficient_fronter_risk_list, efficient_fronter_return_range, linewidth=5, color='#251f6b')\nax.plot(mvp_risk, mvp_return,'o',color='r', markerfacecolor='#ed1313',  markersize=15)\n\ncbar = fig.colorbar(ax_main, ax=ax, label = '$Sharpe$ $Ratio$')\ncbar = cbar.ax\ncbar.tick_params(labelsize=tick_size) \ncbar_Title = cbar.yaxis.label\nfont = matplotlib.font_manager.FontProperties(size=label_size)\ncbar_Title.set_font_properties(font)\nfig.savefig('Efficient_Frontier_4.png',dpi=300, bbox_inches='tight')\n```\n\n"},{"excerpt":"Wordcloud + MongoDB img  MongoDB連線 import 抓出文章內容 Wordcloud圖 fig 1 fig 2 存到了一些無關緊要的資料 重複性高的開頭、形容詞     將符號移除 自建詞 userdict  中文斷詞 jieba 停用詞 stopwords.txt  WordCloud圖 讀取txt檔 import Read .txt  畫圖","fields":{"slug":"/TWSE-11/"},"frontmatter":{"date":"January 26, 2021","title":"📈 TWSE-11-Wordcloud + MongoDB","tags":["TWSE"]},"rawMarkdownBody":"\n# Wordcloud + MongoDB\n\n## img\n## [`wordcloud.jpg`](https://drive.google.com/file/d/1Id-SEIc5kHHZx0Q62JnI6moJH4BWIWPu/view?usp=sharing)\n\n## MongoDB連線\n```python\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"article\"]\nmycol = mydb[\"2021_鉅亨網\"]\n```\n### import\n```python\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom PIL import Image\nimport numpy as np\nimport jieba\nimport nltk\nimport pymongo\n```\n### 抓出文章內容\n```python\nText = \"\"\nfor x in mycol.find({}):\n    Text = Text + x[\"text\"]\n```\n### Wordcloud圖\n```python\nmask = np.array(Image.open('wordcloud.jpg'))\n\nwordcloud = WordCloud(background_color=\"white\",\n                      width=1000, \n                      height=860,\n                      margin=2, \n                      font_path=\"msjhbd.ttc\", \n                      mask=mask).generate(Text)\n\nplt.figure(figsize=(20,20))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()\n```\n#### fig 1\n\n<img src = \"https://i.imgur.com/w7yXGuL.png\" width = \"100%\"/>\n\n#### fig 2\n\n<img src = \"https://i.imgur.com/djIz7rn.jpg\" width = \"100%\"/>\n\n\n\n> 1. 存到了一些無關緊要的資料<br>\n> 1. 重複性高的開頭、形容詞    `ex: 其中、今年、不過、另外......`\n\n### 將符號移除\n\n```python\nText = Text.translate({ord(c):None for c in list(\"(),.“”（）「」，。、：；！|\\n/ 《》〔〕〈〉？\")})\n```\n\n### 自建詞 userdict\n\n## [`userdict.txt`](https://drive.google.com/file/d/1AYA7M_yYBl-a-F5fo7UyDKMfj0Dt-v5L/view?usp=sharing)\n\n```python\njieba.load_userdict(\"userdict.txt\")\n```\n\n### 中文斷詞 jieba\n\n```python\nterms = jieba.cut(Text)\n```\n\n### 停用詞 stopwords.txt\n## [`stopwords.txt`](https://drive.google.com/file/d/1mlYor3CvvUijM3RdKJdav55PQYcfM8vB/view?usp=sharing)\n\n```python\nstopwords = list()\nwith open(\"stopwords.txt\", \"r\", encoding = \"utf-8\") as fp:\n    stopwords = [word.strip() for word in fp.readlines()]\n    keyterms = [keyterm for keyterm in terms if keyterm not in stopwords]\n\nText = \"/\".join(keyterms)\n```\n\n### WordCloud圖\n\n```python\nmask = np.array(Image.open('wordcloud.jpg'))\n\nwordcloud = WordCloud(background_color=\"white\",\n                      width=1000, \n                      height=860, \n                      margin=2, \n                      font_path=\"msjhbd.ttc\", \n                      mask=mask).generate(Text)\n\nplt.figure(figsize=(20,20))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()\n```\n\n\n\n<img src = \"https://i.imgur.com/OYxB22I.png\" width = \"100%\"/>\n\n## 讀取txt檔 \n\n### import\n```python\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom PIL import Image\nimport numpy as np\nimport jieba\nimport nltk\n```\n### Read *.txt*\n\n## [`test_text.txt`](https://drive.google.com/file/d/1jLms-N-OUATzar8btI6OBcc-AM9McL9Y/view?usp=sharing)\n\n```python\nwith open(\"test_text.txt\", \"r\", encoding = \"utf-8\") as fp:\n    Text = fp.read()\n```\n### 畫圖\n```python\nText = Text.translate({ord(c):None for c in list(\"(),.“”（）「」，。、：；！|\\n/ 《》〔〕〈〉？\")})\n\njieba.load_userdict(\"userdict.txt\")\nterms = jieba.cut(Text)\n\nstopwords = list()\nwith open(\"stopwords.txt\", \"r\", encoding = \"utf-8\") as fp:\n    stopwords = [word.strip() for word in fp.readlines()]\n    keyterms = [keyterm for keyterm in terms if keyterm not in stopwords]\n\nText = \"/\".join(keyterms)\n\nmask = np.array(Image.open('wordcloud.jpg'))\n\nwordcloud = WordCloud(background_color=\"white\",\n                      width=1000, \n                      height=860, \n                      margin=2, \n                      font_path=\"msjhbd.ttc\", \n                      mask=mask).generate(Text)\n\nplt.figure(figsize=(20,20))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()\n```\n"},{"excerpt":"找出一段時間的資料 6 刪除重複資料 參考資料\r\nmongo 删除重复数据\r\npymongo去除重复数据\r\npymongo: remove duplicates (map reduce?) MongoDB執行 準備重複資料 執行程式碼/SQL/ Python執行 準備重複資料 執行程式碼/Python/ 7 $orderby 參考資料\r\n$orderby\r\ncursor.sort() 先複製co…","fields":{"slug":"/TWSE-10-4/"},"frontmatter":{"date":"January 20, 2021","title":"📈 TWSE-10-4-MongoDB+Python","tags":["TWSE"]},"rawMarkdownBody":"\r\n##### `find({'Date': {\"$&#0036;gte\": start,\"$&#0036;lte\": end}})`\r\n###### 找出一段時間的資料\r\n```python\r\nstart = datetime.datetime(2021, 1, 21, 0)\r\nend = datetime.datetime(2021, 1, 22, 20)\r\nfor x in mycol.find({'Date': {\"$gte\": start,\"$lte\": end}}).sort(\"Date\"):\r\n    print(x)\r\n```\r\n#### 6 刪除重複資料\r\n\r\n> **參考資料**<br>\r\n> [mongo 删除重复数据](https://segmentfault.com/a/1190000020056997)<br>\r\n> [pymongo去除重复数据](http://ldllidonglin.github.io/blog/2015/12/14/2015-12-14-mongodb%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/)<br>\r\n> [pymongo: remove duplicates (map reduce?)](https://stackoverflow.com/questions/34722866/pymongo-remove-duplicates-map-reduce)\r\n\r\n##### MongoDB執行\r\n###### 準備重複資料\r\n\r\n<img src = \"https://i.imgur.com/T6o6ocf.jpg\" width = \"100%\"/>\r\n\r\n###### 執行程式碼/SQL/\r\n```SQL\r\ndb.getCollection(\"test\").aggregate([\r\n    {\r\n        $group:{_id:{Title:'$Title'},count:{$sum:1},dups:{$addToSet:'$_id'}}\r\n    },\r\n    {\r\n        $match:{count:{$gt:1}}\r\n    }\r\n\r\n    ]).forEach(function(it){\r\n\r\n         it.dups.shift();\r\n            db.getCollection(\"test\").remove({_id: {$in: it.dups}});\r\n\r\n    });db.getCollection(\"test\").aggregate([\r\n    {\r\n        $group:{_id:{Title:'$Title'},count:{$sum:1},dups:{$addToSet:'$_id'}}\r\n    },\r\n    {\r\n        $match:{count:{$gt:1}}\r\n    }\r\n\r\n    ]).forEach(function(it){\r\n\r\n         it.dups.shift();\r\n            db.getCollection(\"test\").remove({_id: {$in: it.dups}});\r\n\r\n    });\r\n\r\n```\r\n<img src = \"https://i.imgur.com/t7p0bjf.png\" width = \"100%\"/>\r\n\r\n##### Python執行\r\n###### 準備重複資料\r\n```python\r\nfor i in range(10):\r\n    mydict = { \"Title\": title, \"text\": text }\r\n    x = mycol.insert_one(mydict)\r\n```\r\n\r\n<img src = \"https://i.imgur.com/elKxfJ9.jpg\" width = \"100%\"/>\r\n\r\n###### 執行程式碼/Python/\r\n```python\r\ncursor = mycol.aggregate(\r\n    [\r\n        {\"$group\": {\"_id\": \"$Title\", \"unique_ids\": {\"$addToSet\": \"$_id\"}, \"count\": {\"$sum\": 1}}},\r\n        {\"$match\": {\"count\": { \"$gte\": 2 }}}\r\n    ]\r\n)\r\n\r\nresponse = []\r\nfor doc in cursor:\r\n    del doc[\"unique_ids\"][0]\r\n    for id in doc[\"unique_ids\"]:\r\n        response.append(id)\r\n\r\nmycol.remove({\"_id\": {\"$in\": response}})\r\n```\r\n<img src = \"https://i.imgur.com/sEj2NQS.jpg\" width = \"100%\"/>\r\n\r\n#### 7 [$orderby](https://docs.mongodb.com/manual/reference/operator/meta/orderby/)\r\n> **參考資料**<br>\r\n> [$orderby](https://docs.mongodb.com/manual/reference/operator/meta/orderby/)<br>\r\n> [cursor.sort()](https://docs.mongodb.com/manual/reference/method/cursor.sort/)\r\n\r\n<img src = \"https://i.imgur.com/2nnO2dz.jpg\" width = \"100%\"/>\r\n\r\n> 先複製collection，避免出錯\r\n\r\n##### 不改變原始資料\r\n###### 執行程式碼/SQL/\r\n```sql\r\ndb.getCollection('2021_鉅亨網_copy').find().sort( { Date: -1 } )\r\n```\r\n<blockquote>\r\n<p>If MongoDB requires using <strong>more than 100 megabytes</strong> of system memory for the <strong>blocking sort operation</strong>, MongoDB returns an error unless the query specifies <a href=\"https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/#cursor.allowDiskUse\" target=\"_blank\" rel=\"noopener noreffer\"><code>cursor.allowDiskUse()</code></a> <strong>(New in MongoDB 4.4). </strong><code>allowDiskUse()</code> allows MongoDB to use temporary files on disk to store data exceeding the 100 megabyte system memory limit while processing a blocking sort operation.</p>\r\n\r\n <p align=\"right\">\r\n 原文參考自：\r\n <a href=\"https://docs.mongodb.com/manual/reference/operator/meta/orderby/\" style=\"text-decoration:none;\">$orderby</a>\r\n </p>\r\n</blockquote>\r\n\r\n###### 執行程式碼/Python/\r\n```python\r\nfor x in mycol.find({}).sort(\"Date\"):\r\n    print(x)\r\n```"},{"excerpt":"5  參考資料\r\nTutorial — PyMongo v2.0.1 documentation\r\nw3schools\r\nCollection Methods\r\nFinding duplicate keys with MongoDB’s aggregation framework  全部   計算全部數量  特定資料   指定日期之前的所有資料.sort(\"Date\")","fields":{"slug":"/TWSE-10-3/"},"frontmatter":{"date":"January 20, 2021","title":"📈 TWSE-10-3-MongoDB+Python","tags":["TWSE"]},"rawMarkdownBody":"\r\n#### 5 `find`\r\n> **參考資料**<br>\r\n> [Tutorial — PyMongo v2.0.1 documentation](https://api.mongodb.com/python/2.0.1/tutorial.html)<br>\r\n> [w3schools](https://www.w3schools.com/python/python_mongodb_getstarted.asp)<br>\r\n> [Collection Methods](https://docs.mongodb.com/manual/reference/method/js-collection/)<br>\r\n> [Finding duplicate keys with MongoDB’s aggregation framework](https://blog.mlab.com/2014/03/finding-duplicate-keys-with-the-mongodb-aggregation-framework/#:~:text=While%20MongoDB%20supports%20an%20option,then%20delete%20all%20subsequent%20values.)\r\n\r\n##### `find({})`\r\n###### 全部\r\n\r\n```python\r\nfor x in mycol.find({}):\r\n    print(x)\r\n```\r\n![](https://i.imgur.com/sNXC0aF.jpg)\r\n##### `find({}).count()`\r\n###### 計算全部數量\r\n```python\r\nmycol.find({}).count()\r\n```\r\n##### `find({\"X\":\"XX\"})`\r\n###### 特定資料\r\n```python\r\nfor x in mycol.find({\"Title\":\"宏泰人壽減資再增資 丟包袱223.9億元補虧損 2月底前現增19.5億元\"}):\r\n    print(x)\r\n```\r\n![](https://i.imgur.com/NeddeDj.jpg)\r\n\r\n##### `find({\"X\": {\"$&#0036;lt\": X}}).sort(\"XX\")`\r\n###### 指定日期之前的所有資料.sort(\"Date\")\r\n```python\r\nd = datetime.datetime(2021, 1, 21, 23)\r\nfor x in mycol.find({\"Date\": {\"$lt\": d}}).sort(\"Date\"):\r\n    print(x)\r\nprint(mycol.find({\"Date\": {\"$lt\": d}}).sort(\"Date\").count())\r\n```"},{"excerpt":"Python + bs4 + 鉅亨網 1 def get_text(i): 2 import套件 3 Create DB,  Collection 4 Insert document","fields":{"slug":"/TWSE-10-2/"},"frontmatter":{"date":"January 20, 2021","title":"📈 TWSE-10-2-MongoDB+Python","tags":["TWSE"]},"rawMarkdownBody":"### Python + bs4 + 鉅亨網\r\n#### 1 def get_text(i):\r\n```python\r\ndef get_text(i):\r\n    post_id = urls[i].split('/')[5].split('?')[0]\r\n    data = urllib.request.urlopen(urls[i])\r\n    soup = BeautifulSoup(da\r\n    P = soup.find_all('p')\r\n    text = ''\r\n    for i,p in zip(range(0,len(P)),P):\r\n        if i >=4:\r\n            text = text + p.getText()\r\n        i += 1\r\n    tags = soup.find_all('a')\r\n    n_tags = []\r\n    for tag in tags:\r\n        if re.match('/tag/', str(tag.get('href'))):\r\n            n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))])\r\n\r\n    title = soup.find('h1').getText()\r\n    T = soup.find('time')\r\n    Date = datetime.datetime.strptime(T['datetime'], \"%Y-%m-%dT%H:%M:%S+08:00\")\r\n    return(Date,post_id,title,n_tags,text)\r\n```\r\n#### 2 import套件\r\n```python\r\nimport pymongo\r\nimport urllib\r\nfrom bs4 import BeautifulSoup\r\nimport regex as re\r\nimport datetime\r\n```\r\n#### 3 Create DB,  Collection\r\n```python\r\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\r\nmydb = myclient[\"article\"]\r\nmycol = mydb[\"2021_鉅亨網\"]\r\n```\r\n#### 4 Insert document\r\n```python\r\nurl = 'https://news.cnyes.com/news/cat/tw_stock_news?exp=a'\r\ndata = urllib.request.urlopen(url)\r\nsoup = BeautifulSoup(data, 'html.parser')\r\nhrefs = soup.find_all('a')\r\nurls = ['https://news.cnyes.com'+ str(href.get('href')) for href in hrefs if re.match('/news/id/', str(href.get('href')))]\r\nfor i in range(0,len(urls)):\r\n    data = get_text(i)\r\n    mydict = { \"Date\": data[0], \"post_id\":data[1],\"Title\": data[2], \"Tags\":data[3] , \"text\": data[4] }\r\n    x = mycol.insert_one(mydict)\r\n```\r\n![](https://i.imgur.com/IpoR1Fq.jpg)\r\n![](https://i.imgur.com/6Mkm8up.jpg)"},{"excerpt":"NoSQL MonogoDB + Python MonogoDB  參考資料\nWindows MongoDB 下載與安裝教學\n關於 MongoDB 的 _id 欄位\nMongoDB的_id和ObjectId怎麼理解？同樣是程式設計師，用心你就超前了\nMongoDB Data Types MongoDB Version MongoDB Data Types Robo 3T Download 參考資…","fields":{"slug":"/TWSE-10-1/"},"frontmatter":{"date":"January 19, 2021","title":"📈 TWSE-10-1-MongoDB+Python","tags":["TWSE"]},"rawMarkdownBody":"\n# NoSQL MonogoDB + Python\n## MonogoDB\n1. [` Download `](https://www.mongodb.com/try/download/community)\n\n> **參考資料**\n> [Windows MongoDB 下載與安裝教學](https://matthung0807.blogspot.com/2019/08/mongodb.html)\n> [關於 MongoDB 的 _id 欄位](https://navicat.com/cht/company/aboutus/blog/1097-all-about-mongodb-s-_id-field.html)\n> [MongoDB的_id和ObjectId怎麼理解？同樣是程式設計師，用心你就超前了](https://kknews.cc/code/66g54mp.html)\n> [MongoDB Data Types](https://www.w3schools.in/mongodb/data-types/#Different_MongoDB_Data_Types)\n\n### MongoDB Version\n```SQL\ndb.version()\n\n>>> 4.4.2\n```\n### [MongoDB Data Types](https://www.w3schools.in/mongodb/data-types/#Different_MongoDB_Data_Types)\n## Robo 3T\n\n[Download](https://robomongo.org/download)\n\n> **參考資料**\n>  [MongoDB 使用Robo 3T建立資料庫](https://matthung0807.blogspot.com/2019/08/mongodb-robo-3t.html)\n\n\n\n## Python\n\n### [w3schools](https://www.w3schools.com/python/python_mongodb_getstarted.asp)\n\n#### 1 pip install\n\n```powershell\npip install pymongo\n```\n\n#### 2 import\n```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n```\n#### 3 測試用文章\n```python\n#測試文章\ntitle = '盤中零股交易台積電最受歡迎 成交金額逼近200億元'\ntext = '''台股攻上波段新高，連帶掀起零股交易熱潮，根據證交所統計，盤中零股交易自去年 10 月 26 日實施以來，截至今年 1 月 15 日止，單日平均成交金額達 8.73 億元，加上盤後交易，單日平均金額超過 10 億元，其中權值股王台積電 (2330-TW) 累計成交值逼近 200 億元，是最熱門的交易標的。根據證交所統計，盤中零股交易前 10 大熱門標首推台積電，交易金額比重高達 34%，其次分別為：大立光 (3008-TW)(12%)、聯發科 (2454-TW)(5%)、國巨 (2327-TW)(3%)、元大台灣 50(2%)、鴻海 (2317-TW)(2%)；另外，聯電 (2303-TW)、台達電 (2308-TW)、玉晶光 (3406-TW)、同欣電 (6271-TW) 交易金額也有 1% 的比重。以成交股數來看，台積電以占整體交易比重 8% 居冠，其他依序分別為：聯電、鴻海、元大高股息、玉山金 (2884-TW)、元大台灣 50、長榮、元晶、敦泰與第一金。以台積電來說，假設投資人在 10 月 26 日當天高點 455 元買進台積電續抱至今，以今天收盤價 627 元計算，期間股價約上漲 37%，其他包括聯電、鴻海股價在期間攻上歷史高點，同樣讓零股投資人賺進一筆收益。'''\n```\n#### 4 Create DB,  Collection and Insert document\n```python\nmydb = myclient[\"article\"]\nmycol = mydb[\"test\"]\nmydict = { \"Title\": title, \"text\": text }\n\nx = mycol.insert_one(mydict)\n```\n\n<img src = \"https://i.imgur.com/3gU1M88.jpg\" width = \"100%\" />\n<img src = \"https://i.imgur.com/NH2PNU2.jpg\" width = \"100%\" />\n\n#### 5 印出所有DB\n```python\nprint(myclient.list_database_names())\n```\n####  6 印出所有collection\n```python\nprint(mydb.list_collection_names())\n```"},{"excerpt":"BeautifulSoup + 鉅亨網 原始碼 文章網址 找到  regex  多個URL存成List 多個URL的文章解析 找出文章的標題 找到 找出文章的tags 找到    tags存成list 文章內文 找到  取的內文  包裝成def","fields":{"slug":"/TWSE-9/"},"frontmatter":{"date":"January 19, 2021","title":"📈 TWSE-9-Bs4 + 鉅亨網","tags":["TWSE"]},"rawMarkdownBody":"\n# BeautifulSoup + 鉅亨網\n\n```python\nimport urllib\nfrom bs4 import BeautifulSoup\n\nurl = 'https://news.cnyes.com/news/cat/tw_stock_news?exp=a'\ndata = urllib.request.urlopen(url)\nsoup = BeautifulSoup(data, 'html.parser')\n```\n## 原始碼\n```python\nprint(soup)\n```\n### 文章網址\n#### 找到 `<a>...</a>`\n\n```python\nhrefs = soup.find_all('a')\n```\n\n#### regex\n```python\nimport regex as re\nfor href in hrefs:\n    if re.match('/news/id/', str(href.get('href'))):\n        print('https://news.cnyes.com'+ str(href.get('href')))\n```\n\n![](https://i.imgur.com/cOqYyCH.jpg)\n\n#### 多個URL存成List\n\n```python\nurls = ['https://news.cnyes.com'+ str(href.get('href')) for href in hrefs if re.match('/news/id/', str(href.get('href')))]\n```\n\n### 多個URL的文章解析\n\n```python\ndata = urllib.request.urlopen(urls[0])\nsoup = BeautifulSoup(data, 'html.parser')\n```\n#### 找出文章的標題\n##### 找到`<h1>...</h1>`\n\n```python\ntitle = soup.find('h1').getText()\n```\n\n#### 找出文章的tags\n\n##### 找到 `<a>...</a>`\n```python\ntags = soup.find_all('a')\nfor tag in tags:\n    print(tag)\n```\n\n```python\ntags = soup.find_all('a')\nfor tag in tags:\n    print(tag.get('href'))\n```\n![](https://i.imgur.com/ITWN9r4.jpg)\n\n```python\nfor tag in tags:\n    if re.match('/tag/', str(tag.get('href'))):\n        print(str(tag.get('href'))[5:len(str(tag.get('href')))])\n```\n![](https://i.imgur.com/yra17Bg.jpg)\n\n##### tags存成list\n```python\nn_tags = []\nfor tag in tags:\n        if re.match('/tag/', str(tag.get('href'))):\n            n_tags = n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))])\n```\n\n\n#### 文章內文\n\n\n##### 找到 `<p>...</p>`\n\n```python\nP = soup.find_all('p')\nprint(P)\n```\n\n##### 取`<p>...</p>`的內文\n\n```python\nfor p in P:\n    print(p.getText())\n```\n\n![](https://i.imgur.com/xdrcWhr.jpg)\n\n```python\nfor i,p in zip(range(0,len(P)),P):\n    if i >=4:\n        print(p.getText())\n    i += 1\n```\n##### 包裝成def\n```python\ndef get_text(i):\n    \n    data = urllib.request.urlopen(urls[i])\n    soup = BeautifulSoup(data, 'html.parser')\n    \n    P = soup.find_all('p')\n    text = ''\n    for i,p in zip(range(0,len(P)),P):\n        if i >=4:\n            text = text + p.getText()\n        i += 1\n\n    tags = soup.find_all('a')\n    n_tags = []\n    for tag in tags:\n        if re.match('/tag/', str(tag.get('href'))):\n            n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))])\n\n    title = soup.find('h1').getText()\n    \n    return(title,n_tags,text)\n```"},{"excerpt":"plotly | Chart Studio 每日收盤行情 1 註冊帳號  2 點選SQL Query  3 下載Falcon SQL Client  4 登入SQL 輸入MySQL的帳號, 密碼  5 點選QUERY 確認有確實讀到資料庫  6 點選SCHEDULE 1 點選 Connect to / Chart Studio Enterprise / \n2 Your Chart Studio …","fields":{"slug":"/TWSE-8/"},"frontmatter":{"date":"January 16, 2021","title":"📈 TWSE-8-plotly | Chart Studio | 1","tags":["TWSE"]},"rawMarkdownBody":"\n# [plotly | Chart Studio](https://chart-studio.plotly.com/feed/#/)\n\n## 每日收盤行情\n\n### 1 註冊帳號\n![](https://i.imgur.com/tUGwuzY.jpg)\n### 2 點選SQL Query\n![](https://i.imgur.com/HtlvMDO.jpg)\n### 3 下載Falcon SQL Client\n![](https://i.imgur.com/11zmQaS.jpg)\n### 4 登入SQL\n> 輸入MySQL的帳號, 密碼\n\n![](https://i.imgur.com/cm55Xpp.jpg)\n### 5 點選QUERY\n> 確認有確實讀到資料庫\n\n![](https://i.imgur.com/kIRXJCA.jpg)\n### 6 點選**SCHEDULE**\n> 1 點選 Connect to / Chart Studio Enterprise / <br>\n> 2 Your Chart Studio Enterprise Domain / **https://api.plot.ly** /\n\n![](https://i.imgur.com/uqwoSYj.jpg)\n### 7 Authorize\n![](https://i.imgur.com/PPzYfbw.jpg)\n### 8 點選QUERY\n```sql\nSELECT `日期`,`成交股數`,`開盤價`,`最高價`,`最低價`,`收盤價`,`color`\nFROM `每日收盤行情` \nWHERE `證券代號` = 2330\n```\n![](https://i.imgur.com/NCPN7pA.jpg)\n### 9 選擇要多久跑一次\n![](https://i.imgur.com/NOi9HkA.jpg)\n### 10 點選Live DataSet\n![](https://i.imgur.com/3tk0jJk.jpg)\n\n\n<iframe width=\"100%\" height=\"600\" frameborder=\"0\" scrolling=\"no\" src=\"//plotly.com/~hsiangjenli/15.embed?share_key=FaqYt8fEA36u4olYzePnwm\"></iframe>"},{"excerpt":"Interactive Candlestick Charts Plotly 個股月成交資訊 SQL連線 Fig1 Basic fig.show() Fig2 xaxis_rangeslider_visible=False fig.show() Fig3 Color & Title fig.show() 每日收盤行情 SQL連線 rename col /可做可不做/ Fig4 subplots f…","fields":{"slug":"/TWSE-7/"},"frontmatter":{"date":"December 05, 2020","title":"📈 TWSE-7-Interactive Candlestick Charts","tags":["TWSE"]},"rawMarkdownBody":"\n# Interactive Candlestick Charts\n\n## Plotly\n\n```shell\npip install plotly\n```\n## 個股月成交資訊\n### SQL連線\n```python\nuser = 'root'\npw = \"YourPassworrd\"\ndb = \"STOCK\"\n\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db))\n\ndf = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 \", engine, coerce_float=True, parse_dates=True)\ndf = df.drop(columns = ['Stock Code','Change','Transaction','Trade Value'])\ndf = df.rename(columns = {'Opening Price': 'Open','Highest Price':'High','Closing Price':'Close',\n                        'Lowest Price':'Low','Closing Price':'Close','Trade Volume':'Volume'})\n```\n### Fig1\n#### Basic\n```python\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'])])\n\nfig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\1.html\")\nfig.show()\n```\n#### fig.show()\n\n<iframe src=\"https://d2xihcnwdmcz6tzstvzuow-on.drv.tw/WEB/Plotly.fig_1.htm\" height=\"500\" width=\"100%\" style=\"border:none;\"></iframe>\n\n### Fig2\n#### xaxis_rangeslider_visible=False\n```python\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'])])\n\nfig.update_layout(xaxis_rangeslider_visible=False)\n\nfig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\2.html\")\nfig.show()\n```\n#### fig.show()\n<iframe src=\"https://d2xihcnwdmcz6tzstvzuow-on.drv.tw/WEB/Plotly.fig_2.htm\" height=\"500\" width=\"100%\" style=\"border:none;\"></iframe>\n\n### Fig3\n#### Color & Title\n```python\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'],\n                increasing_line_color= '#5ac390', decreasing_line_color= '#fd6a6c')])\n\nfig.update_layout(\n    title='TWSE Stock Code:2330',\n    yaxis_title='Price',\n    xaxis_rangeslider_visible=False)\n\nfig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\3.html\")                  \nfig.show()\n```\n\n#### fig.show()\n\n<iframe src=\"https://d2xihcnwdmcz6tzstvzuow-on.drv.tw/WEB/Plotly.fig_3.htm\" height=\"500\" width=\"100%\" style=\"border:none;\"></iframe>\n\n## 每日收盤行情\n```python\nimport plotly.graph_objects as go\nimport pandas as pd\n```\n### SQL連線\n```python\nimport sqlalchemy\nfrom sqlalchemy import create_engine\n\nuser = 'root'\npw = \"YourPassworrd\"\ndb = \"TWSE\"\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db))\n\ndf = pd.read_sql(\"SELECT * FROM `每日收盤行情` WHERE `證券代號` = 2330\", engine, coerce_float=True, parse_dates=True)\n```\n### rename col /可做可不做/\n```python\ndf = df.rename(columns = {'開盤價': 'Open','最高價':'High','收盤價':'Close','最低價':'Low','日期':'Date','成交股數':'Volume'})\n```\n### Fig4\n#### subplots\n```python\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=1)\nfig.add_trace(go.Candlestick(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'],\n                increasing_line_color= '#3D9970', decreasing_line_color= '#FF4136',\n                increasing_fillcolor='#3D9970', decreasing_fillcolor='#FF4136'))\n\nfig.add_trace(go.Bar(y=df['Volume'],x = df['Date'],marker = dict(color=df['color'])), row=2, col=1)\n\nfig.update_layout(\n    paper_bgcolor='#EEEEEE',\n    plot_bgcolor='#EEEEEE',\n    title='TWSE<br>Stock Code:2330',\n    yaxis_title='Price',\n    xaxis_rangeslider_visible=False)\nfig.show()\n```\n#### fig.show()\n<iframe src=\"https://d2xihcnwdmcz6tzstvzuow-on.drv.tw/WEB/Plotly.fig_4.htm\" height=\"500\" width=\"100%\" style=\"border:none;\"></iframe>\n\n### Fig5\n#### Change subplot sizes\n```python\ntrace1 = go.Candlestick(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'],\n                increasing_line_color= '#3D9970', decreasing_line_color= '#FF4136',\n                increasing_fillcolor='#3D9970', decreasing_fillcolor='#FF4136')\n\ntrace2 = go.Bar(y=df['Volume'],x = df['Date'],marker = dict(color=df['color']),yaxis='y2')\n\ndata = [trace1, trace2]\nlayout = go.Layout(yaxis2=dict(domain=[0, 0.3]),\n                   yaxis=dict(domain=[0.35,1]),\n                   \n                   xaxis_rangeslider_visible=False,\n                   title='<b>TWSE</b><br>Stock Code:2330',\n                   title_x = 0.5,\n                   title_font_size = 20,\n                   paper_bgcolor='#EEEEEE',\n                   plot_bgcolor='#EEEEEE',\n                   showlegend = False,\n                   hovermode = 'x unified',\n                   hoverlabel_bgcolor = 'rgba(255,255,255,0.9)',\n                   hoverlabel_namelength = 0)\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()\n```\n#### fig.show()\n<iframe src=\"https://d2xihcnwdmcz6tzstvzuow-on.drv.tw/WEB/Plotly.fig_6.html\" height=\"500\" width=\"100%\" style=\"border:none;\"></iframe>\n\n"},{"excerpt":"SQL連線 讀取資料庫Table至Dataframe 1 取出指定col值 2 取出指定index值 3 取出指定index and col值 4 取出多個col值 5 欄位名稱 6 資料 7 欄位Type 8 index值 9 重新命名 # 實作 讀取指定index值至Dataframe mplfinance [新版] 每日收盤行情 SQL連線 重新調整Dataframe 1 刪掉多餘的Col…","fields":{"slug":"/TWSE-6/"},"frontmatter":{"date":"November 29, 2020","title":"📈 TWSE-6-MySQL to Dataframe & mplfinance K線圖","tags":["TWSE"]},"rawMarkdownBody":"\n<div style=\"text-align: right\" Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n\n<h1 style = \"font-family: Verdana;font-weight: 600;\">MySQL to Dataframe\n</h1>\n\n## SQL連線\n```python\nuser = 'root'\npw = \"YourPassworrd\"\n\nconn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8')\ncursor=conn.cursor() \n\ncursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" )\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\"))\n\ndf = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/11/10 00:00:00' AND '2020/1/10 23:59:59'\", engine, coerce_float=True, parse_dates=True) \n```\n## 讀取資料庫Table至Dataframe\n```python\nimport pandas as pd \n\ndf = pd.read_sql('SELECT* FROM `twse`', engine, index_col= 'Stock Code', coerce_float=True, parse_dates='Date')\ndf \n```\n### 1 取出指定col值\n```python\nprint(df.['Opening Price']) \n```\n### 2 取出指定index值\n```python\nprint(df.loc['2330'])\n```\n### 3 取出指定index and col值\n```python\nprint(df.loc['2330']['Opening Price']) \n```\n### 4 取出多個col值\n```python\ndf[['Opening Price', 'Closing Price']] \n```\n### 5 欄位名稱\n```python\ndf.columns \n```\n### 6 資料\n```python\ndf.values\n```\n### 7 欄位Type\n```python\ndf.dtypes\n```\n### 8 index值\n```python\ndf.index\n```\n### 9 重新命名\n```python\ndf.rename(columns={'Opening Price': 'Open'}) \n```\n### # 實作\n> 讀取指定index值至Dataframe\n```python\ndf = pd.read_sql('SELECT* FROM `twse`, engine, index_col= 'Stock Code', coerce_float=True, parse_dates='Date')  \n```\n## mplfinance [新版]\n```\npip install mplfinance\n```\n```python\nimport mplfinance as mpf \n```\n### 每日收盤行情\n#### SQL連線\n```python\nuser = 'root'\npw = \"YourPassworrd\"\n\nconn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8')\ncursor=conn.cursor() \n\ncursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" )\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\"))\n\ndf = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/11/10 00:00:00' AND '2020/1/10 23:59:59'\", engine, coerce_float=True, parse_dates=True) \n```\n#### 重新調整Dataframe\n##### 1 刪掉多餘的Col\n```python\ndf = df.drop(columns = ['Stock Code','Change','Transaction','Trade Value'])\n```\n##### 2 重新命名Col \n```python\ndf = df.rename(columns = {'Opening Price': 'Open','Highest Price':'High','Closing Price':'Close',\n                       'Lowest Price':'Low','Closing Price':'Close','Trade Volume':'Volume'})\n```\n##### 3 df['Date']型態改變\n```python\ndf['Date'] = pd.to_datetime(df['Date']) \n```\n##### 4 重新排序 \n```python\nneworder = ['Open','High','Low','Close','Volume']\ndf = df.reindex(columns=neworder) \n```\n#### Candlestick chart\n##### 基本\n```python\nmpf.plot(df,type='candle') \n```\n<img src = \"https://i.imgur.com/ZHQOYJH.png\" width = \"100%\"/>\n\n##### 美化\n```python\nmc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',)\n\ns  = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc)\n\nfig = mpf.figure(style=s,figsize=(20,20))\n\nax1 = fig.add_axes([0,0.3,1,0.4])\nax2 = fig.add_axes([0,0.1,1,0.2])\n\nmav=(3,6,9)\n\nmpf.plot(df,\n         type='candle',\n         style=s,\n         volume=ax2,\n         mav=(3,6,9),\n         panel_ratios=(4,1),\n         xrotation=0,\n         ax = ax1,\n         update_width_config = dict(candle_width = 0.95),\n         scale_width_adjustment = dict(lines=2))\n\nax1.legend(['mav '+str(mav[0]),'mav '+str(mav[1]),'mav '+str(mav[2])],\n           loc='best', bbox_to_anchor=(0.2, 1.1),\n           fontsize = 20,\n           frameon = True,\n           edgecolor = 'w',\n           facecolor = 'w'\n           )\nax1.set_title(\n    label = '\\nTWSE\\n\\nStock Code:2330\\n',\n    fontdict={'fontsize':30,\n              'fontweight':'bold',\n              'color':'k'},\n    loc='center'\n             )\n\nax1.set_ylabel('Price',fontdict={'weight': 'bold', 'size': 20})\nax2.set_ylabel('Volume',fontdict={'weight': 'bold', 'size': 20})\n\nax1.yaxis.set_label_position(\"left\")\nax1.yaxis.tick_left()\n\nyticks = np.arange(min(df['Volume']), max(df['Volume']), round( (max(df['Volume']) - min(df['Volume']))/5 ))\nax2.set_yticks(yticks)\n```\n<img src = \"https://i.imgur.com/VvxKi2a.png\" width = \"100%\"/>\n\n### 免連SQL版\n\n```python\nimport pandas_datareader.data as web\nimport mplfinance as mpf\nfrom IPython.display import Image\n\nstock_code = '0050.tw'\n\ndf = web.DataReader(stock_code, 'yahoo', '2020-11-01')\ndf = df[['Open', 'High', 'Low', 'Close', 'Volume']]\n```\n\n#### 基本\n\n```python\nmpf.plot(df, type='candle', mav=(5,20), volume=True, title='\\n{stock_code}'.format(stock_code=stock_code), savefig='test_1.png')\n\nImage('test_1.png')\n```\n\n<img src=\"https://i.imgur.com/ipGw9KV.png\" width = \"100%\"/>\n\n#### 美化\n\n```python\nimport matplotlib.pyplot as plt \nimport numpy as np\n\nmc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',)\ns  = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc)\n\nfig = mpf.figure(style=s,figsize=(20,15))\n\nax1 = fig.add_axes([0.05,0.3,0.95,0.5])\nax2 = fig.add_axes([0.05,0.1,0.95,0.2])\n\nmav = (3,6,9)\nmpf.plot(df,\n         type='candle',\n         style=s,\n         volume=ax2,\n         mav=mav,\n         panel_ratios=(4,1),\n         xrotation=0,\n         ax = ax1,\n         update_width_config = dict(candle_width = 0.95),\n         scale_width_adjustment = dict(lines=2))\n\nax1.legend(['mav '+str(mav[0]),'mav '+str(mav[1]),'mav '+str(mav[2])],\n           loc='best', \n           bbox_to_anchor=(0.2, 1.1),\n           fontsize = 20,\n           frameon = True,\n           edgecolor = 'w',\n           facecolor = 'w')\n\nax1.set_title(\n    label = '\\n\\nStock Code:{}\\n'.format(stock_code),\n    fontdict={'fontsize':30,\n              'fontweight':'bold',\n              'color':'k'},\n    loc='center')\n\nax1.set_xticks([])\nax1.set_ylabel('Price',fontdict={'weight': 'bold', 'size': 20})\nax2.set_ylabel('Volume',fontdict={'weight': 'bold', 'size': 20})\n\nax1.yaxis.set_label_position(\"left\")\nax1.yaxis.tick_left()\n\nyticks = np.arange(min(df['Volume']), max(df['Volume']), round( (max(df['Volume']) - min(df['Volume']))/5 ))\nax2.set_yticks(yticks)\n\nplt.savefig('test_2.png', dpi=300)\n```\n\n<img src=\"https://i.imgur.com/EAGyL8V.png\" width = \"100%\"/>\n\n#### MACD\n\n```python\nimport matplotlib.pyplot as plt \nimport numpy as np\n\nmc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',)\ns  = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc)\n\nmc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',)\ns  = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc)\n\nexp12 = df['Close'].ewm(span=12, adjust=False).mean()\nexp26 = df['Close'].ewm(span=26, adjust=False).mean()\n\nmacd = exp12 - exp26\n\nsignal    = macd.ewm(span=9, adjust=False).mean()\nhistogram = macd - signal\n\nfig = plt.figure(figsize=(20,20))\n\nax1 = fig.add_axes([0.05,0.4,0.94,0.5])\nax2 = fig.add_axes([0.05,0.015,0.94,0.2])\nax3 = fig.add_axes([0.05,0.2,0.94,0.2])\n\nstrDate = [str(e).split(' ')[0] for e in df['Close'].index]\nplt.bar(strDate, histogram, color = '#7f7f7f')\nplt.plot(strDate, macd, color = 'b')\nplt.plot(strDate, signal, color = 'r')\n\nmav = (3,6,9)\nmpf.plot(df,\n         type='candle',\n         style=s,\n         volume=ax2,\n         mav=mav,\n         panel_ratios=(4,1),\n         xrotation=0,\n         ax = ax1,\n         update_width_config = dict(candle_width = 0.95),\n         scale_width_adjustment = dict(lines=2))\nax1.legend(['mav '+str(mav[0]),'mav '+str(mav[1]),'mav '+str(mav[2])],\n           loc='best', \n           bbox_to_anchor=(0.2, 1.1),\n           fontsize = 20,\n           frameon = True,\n           edgecolor = 'w',\n           facecolor = 'w')\nax3.legend(['macd','signal'],\n           loc='best', \n           bbox_to_anchor=(0.2, 1.1),\n           fontsize = 20,\n           frameon = True,\n           edgecolor = 'w',\n           facecolor = 'w')\nax1.set_title(\n    label = 'MACD\\n\\nStock Code:{}\\n'.format(stock_code),\n    fontdict={'fontsize':30,\n              'fontweight':'bold',\n              'color':'k'},\n    loc='center')\nax1.set_ylabel('Price',fontdict={'weight': 'bold', 'size': 20})\nax2.set_ylabel('Volume',fontdict={'weight': 'bold', 'size': 20})\nax1.yaxis.set_label_position(\"left\")\nax1.yaxis.tick_left()\nyticks = np.arange(min(df['Volume']), max(df['Volume']), round( (max(df['Volume']) - min(df['Volume']))/5 ))\nax2.set_yticks(yticks)\nax1.set_xticks([])\nax3.set_xticks([])\nax1.set(frame_on=False)\nax2.set(frame_on=False)\nax3.set(frame_on=False)\nplt.savefig('test_3.png', dpi=300)\n```\n\n<img src=\"https://i.imgur.com/JS50WZs.png\" width = \"100%\"/>"},{"excerpt":"mpl_finance [舊版] SQL連線 個股月成交資訊 mpl_finance 基本設定 完整程式碼","fields":{"slug":"/TWSE-5/"},"frontmatter":{"date":"November 29, 2020","title":"📈 TWSE-5-mpl_finance K線圖","tags":["TWSE"]},"rawMarkdownBody":"\n# mpl_finance [舊版]\n\n## SQL連線\n### 個股月成交資訊\n```python\nimport MySQLdb\n\nuser = 'root'\npw = \"YourPassworrd\"\n\nconn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8')\ncursor=conn.cursor() \ncursor.execute('USE STOCK')\n```\n## mpl_finance\n```python\nimport matplotlib.pyplot as plt\nimport mpl_finance as mpf\n%matplotlib inline\n```\n## 基本設定\n```python\np = [int(e) for e in input(\"請輸入起始日期和結束日期\").split(\" \")] # 以空格隔開\n\nperiod = \"`Date` BETWEEN '{}/{}/{} 00:00:00' AND '{}/{}/{} 23:59:59'\".format(p[0],p[1],p[2],p[3],p[4],p[5])\n\ndef sql_execute(column_name):\n   SQL = \"SELECT {} FROM `twse` WHERE `Stock Code` = {} AND {} ORDER BY `Date`\"\n   cursor.execute(SQL.format(column_name, 1234, period))\n   result = cursor.fetchall()\n   return result\n\ndef get_data(column_name):\n   sql_data = [e[0] for e in sql_execute(column_name)]\n   return sql_data\n```\n## 完整程式碼\n```python\nimport MySQLdb\nimport matplotlib.pyplot as plt\nimport mpl_finance as mpf\n%matplotlib inline\n\nuser = 'root'\npw = \"YourPassworrd\"\n\nconn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8')\ncursor=conn.cursor() \ncursor.execute('USE STOCK')\n\np = [int(e) for e in input(\"請輸入起始日期和結束日期\").split(\" \")]\nperiod = \"`Date` BETWEEN '{}/{}/{} 00:00:00' AND '{}/{}/{} 23:59:59'\".format(p[0],p[1],p[2],p[3],p[4],p[5])\n\ndef get_data(column_name):\n   sql_data = [e[0] for e in sql_execute(column_name)]\n   return sql_data\n\ndef sql_execute(column_name):\n   SQL = \"SELECT {} FROM `twse` WHERE `Stock Code` = {} AND {} ORDER BY `Date`\"\n   cursor.execute(SQL.format(column_name, 1234, period))\n   result = cursor.fetchall()\n   return result\n\nop = get_data('`Opening Price`')\ncp = get_data('`Closing Price`')\nh = get_data('`Highest Price`')\nl = get_data('`Lowest Price`')\nD = [e[0] for e in sql_execute('`Date`')]\n\nfig = plt.figure(figsize=(20, 8))\n\nax = fig.add_subplot(1, 1, 1)\nax.set_xticks(range(0, len(D), int(round(len(D)/7,0))))\nax.set_xticklabels(D[::int(round(len(D)/7,0))])\nmpf.candlestick2_ochl(ax, op, cp, h,\nl, width=0.6, colorup='r', colordown='g', alpha=1); \n```\n<img src = \"https://i.imgur.com/pSXpsdo.png\" width = \"100%\"/>"},{"excerpt":"TWSE的資料存入MySQL SQL連線 1 基本設定 2 不使用中文 3 可使用中文 / charset='utf8' / create_engine pymysql sqlalchemy 個股月成交資訊/en/ 完整程式碼 每日收盤行情 完整程式碼 取出資料 個股月成交資訊 1 回傳全部 2 回傳一個值 3 回傳多個值 4 實際使用 5 result型態 tuple 6 取出特定時間內資料 …","fields":{"slug":"/TWSE-4/"},"frontmatter":{"date":"November 29, 2020","title":"📈 TWSE-4-資料存入MySQL及取出","tags":["TWSE"]},"rawMarkdownBody":"\n# TWSE的資料存入MySQL\n\n## SQL連線\n### 1 基本設定\n```python\nimport MySQLdb\n\nuser = 'root'\npw = \"YourPassworrd\"\n```\n### 2 不使用中文\n```python\nconn = MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw)\ncursor=conn.cursor() \n```\n### 3 可使用中文 / charset='utf8' /\n```python\nconn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8')\ncursor=conn.cursor() \n```\n## create_engine\n### pymysql sqlalchemy\n```\npip install pymysql sqlalchemy\n```\n```python\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"STOCK\")) \n```\n## 個股月成交資訊/en/\n### 完整程式碼\n```python\nimport urllib.request, json\nimport json\nimport time\nimport datetime\nimport pandas as pd\nfrom sqlalchemy import create_engine\nimport MySQLdb\n\nuser = 'root'\npw = \"YourPassworrd\"\n\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"STOCK\")) \n\nconn = MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw)\ncursor=conn.cursor()\n\ncreate_table = '''\n`Stock Code` varchar(20) NOT NULL,\n`Date` date NOT NULL,\n`Trade Volume` bigint(20) NOT NULL,\n`Trade Value` bigint(20) NOT NULL,\n`Opening Price` float NOT NULL,\n`Highest Price` float NOT NULL,\n`Lowest Price` float NOT NULL,\n`Closing Price` float NOT NULL,\n`Change` float NOT NULL,\n`Transaction` bigint(20) NOT NULL\n'''\n\ncursor.execute(\"CREATE DATABASE IF NOT EXISTS STOCK DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" )\ncursor.execute('USE STOCK')\ncursor.execute('''CREATE TABLE IF NOT EXISTS TWSE ({})'''.format(create_table))\ncursor.execute('ALTER TABLE TWSE RENAME TO TWSE_tempt')\nconn.commit()\n\ndata ={}\ndate_now = datetime.datetime.now()\nstock_list = [2330,1234]\nm = int(input(\"請輸入欲抓取月份數\"))-1\n\nfor j in range(0,len(stock_list)):\n   for i in range (m,-1,-1):\n       date = date_now - i*datetime.timedelta(days = 30.4375)\n       url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn&date={}&stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j])\n       with urllib.request.urlopen(url) as jsonfile:\n               data = json.loads(jsonfile.read().decode())\n               df = pd.DataFrame(data['data'][0:len(data['data'])])\n               df.columns = data['fields']\n               df[\"Stock Code\"] = stock_list[j]\n               df = df.set_index('Stock Code')\n               df = df.applymap(lambda x: str(x.replace(',','')))\n               df.to_sql('TWSE_tempt', con = engine, if_exists = 'append', index=True)\n               time.sleep(10)\n               print(\"[Stock Code: #{}][{}]    loading......\".format(str(stock_list[j]),data['title'].split(\" \")[0]))            \n\ncursor.execute('CREATE TABLE TWSE ({})'.format(create_table))\ncursor.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY `Stock Code`, `Date` HAVING count(*)>0''')\ncursor.execute('DROP TABLE TWSE_tempt')\nconn.commit()\nconn.close()\nprint(\"All done ! ! !\") \n```\n## 每日收盤行情\n### 完整程式碼\n```python\nimport urllib.request, json\nimport json\nimport time\nimport datetime\nimport pandas as pd\nfrom sqlalchemy import create_engine\nimport MySQLdb\n\nuser = 'root'\npw = \"YourPassworrd\"\n\nconn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8')\ncursor=conn.cursor() \n\ncursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" )\nengine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\"))\n\ncreate_table = '''\n`證券代號` varchar(20) NOT NULL,\n`證券名稱` varchar(20) NOT NULL,\n`成交股數` bigint(20),\n`成交筆數` bigint(20),\n`成交金額` float,\n`開盤價` float NOT NULL,\n`最高價` float NOT NULL,\n`最低價` float NOT NULL,\n`收盤價` float NOT NULL,\n`漲跌價差` float,\n`最後揭示買價` float,\n`最後揭示買量` float,\n`最後揭示賣價` float,\n`最後揭示賣量` bigint(20),\n`本益比` float,\n`日期` date NOT NULL\n'''\n\ncursor.execute('USE TWSE')\ncursor.execute('''CREATE TABLE IF NOT EXISTS `每日收盤行情` ({})'''.format(create_table))\ncursor.execute('ALTER TABLE `每日收盤行情` RENAME TO `每日收盤行情_tempt`')\n\ndate = datetime.datetime.now()\nn = int(input('抓取n日資料'))\n\nfor i in range(n):\n   url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn&date={}&type=ALL\".format(str(date).split(' ')[0].replace('-',''))\n   with urllib.request.urlopen(url) as jsonfile:\n       data = json.loads(jsonfile.read().decode())\n       if data['stat'] ==\"OK\":\n           df = pd.DataFrame(data['data9'][0:len(data['data9'])])\n           df.columns = data['fields9']\n           df = df.drop(columns = '漲跌(+/-)')\n           df = df.set_index('證券代號')\n           df = df.applymap(lambda x: str(x.replace(',','')))\n           df[\"日期\"] = str(date).split(' ')[0].replace('-','/')\n           df.to_sql('每日收盤行情_tempt', con = engine, if_exists = 'append', index=True)\n           print(url)\n           time.sleep(4)\n       else:\n           print(data['stat'])\n       date = date - datetime.timedelta(days = 1)\ncursor.execute('CREATE TABLE `每日收盤行情` ({})'.format(create_table))\ncursor.execute('''INSERT INTO `每日收盤行情` SELECT* FROM `每日收盤行情_tempt` GROUP BY `證券代號`, `日期` HAVING count(*)>0''')\ncursor.execute('DROP TABLE `每日收盤行情_tempt`')\nconn.commit()\nconn.close()\nprint(\"All done ! ! !\") \n```\n## 取出資料\n### 個股月成交資訊\n#### 1 回傳全部\n```python\ncursor.fetchall()\n```\n#### 2 回傳一個值\n```python\ncursor.fetchone()\n```\n#### 3 回傳多個值\n```python\ncursor.fetchmany()\n```\n\n#### 4 實際使用\n```python\ncursor.execute(\"SELECT `Opening Price` FROM `twse` where `Stock Code` = 2330\")\nresult = cursor.fetchall()\nprint(result)\n```\n#### 5 result型態\n```python\nprint(type(result))\n```\n##### tuple\n```python\nprint(result[1][0])\n```\n#### 6 取出特定時間內資料\n> 回傳 **Opening Price** \n>\n> Date BETWEEN **2019/10/10 ~ 2020/1/10**\n```python\ncursor.execute(\"SELECT `Opening Price` FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/10/10 00:00:00' AND '2020/1/10 23:59:59'\")\nresult = cursor.fetchall()\nprint(result) \n```\n<img src = \"https://i.imgur.com/yFeVTEB.jpg\" width = \"100%\"/>"},{"excerpt":"TWSE的資料存入SQLite 個股月成交資訊 1 SQLite連線 2 建立Table 3 刪除Table # 完整程式碼 資料庫資料重複問題解決 1 選出沒有重複的資料 2 TWSE_tempt當作緩存 將TWSE改成TWSE_tempt當作緩存 ，再新增一個TWSE # 完整程式碼","fields":{"slug":"/TWSE-3/"},"frontmatter":{"date":"November 28, 2020","title":"📈 TWSE-3-TWSE的資料存入SQLite","tags":["TWSE"]},"rawMarkdownBody":"\n\n# TWSE的資料存入SQLite\n\n## 個股月成交資訊\n### 1 SQLite連線\n```python\nimport sqlite3\n\nconn = sqlite3.connect('Python_Stock_TWSE.db')\nc = conn.cursor() \n```\n### 2 建立Table\n```python\nc.execute('CREATE TABLE IF NOT EXISTS TWSE2330_tempt (股票代碼, 日期, 成交股數, 成交金額, 開盤價, 最高價, 最低價, 收盤價, 漲跌價差, 成交筆數)')\n```\n### 3 刪除Table\n```python\nc.execute('DROP TABLE TWSE2330_tempt')\n```\n### # 完整程式碼\n```python\nimport pandas as pd\nimport urllib.request, json\nimport datetime\nimport time\nimport sqlite3\n\nconn = sqlite3.connect('Python_Stock_TWSE.db')\nc = conn.cursor()\n\nc.execute('CREATE TABLE IF NOT EXISTS TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)')\nconn.commit()\n\ndate_now = datetime.datetime.now()\nstock_list = [2330,1234]\nm = int(input(\"請輸入欲抓取月份數\"))-1\n\n\nfor j in range(0,len(stock_list)):\n   for i in range (m,-1,-1):\n       date = date_now - i*datetime.timedelta(days = 30.4375)\n       url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn&date={}&stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j])\n       with urllib.request.urlopen(url) as jsonfile:\n               data = json.loads(jsonfile.read().decode())\n               df = pd.DataFrame(data['data'][0:len(data['data'])])\n               df.columns = data['fields']\n               df[\"股票代碼\"] = stock_list[j]\n               df = df.set_index('股票代碼')\n               df.to_sql('TWSE', conn, if_exists='append', index = True)\n               conn.commit()\n               print(\"[#{}] {} is loading...\".format(stock_list[j], data['date']))\n               time.sleep(5)\nconn.close()\nprint(\"Done\") \n```\n<img src = \"https://i.imgur.com/IxMi5Nj.jpg\" width = \"100%\" />\n\n## 資料庫資料重複問題解決\n### 1 選出沒有重複的資料\n```sql\nSELECT*\nFROM TWSE\nGROUP BY 股票代碼, 日期\nHAVING count(*)>0 \n```\n<img src = \"https://i.imgur.com/yu9YdMQ.jpg\" width = \"100%\" />\n\n### 2 TWSE_tempt當作緩存\n> 將TWSE改成TWSE_tempt當作緩存 ，再新增一個TWSE\n```sql\nINSERT INTO TWSE\nSELECT*\nFROM TWSE_tempt\nGROUP BY 股票代碼, 日期\nHAVING count(*)>0 \n```\n```python\nc.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY 股票代碼, 日期 HAVING count(*)>0''') \n```\n### # 完整程式碼\n```python\nimport pandas as pd\nimport urllib.request, json\nimport datetime\nimport time\nimport sqlite3\n\nconn = sqlite3.connect('Python_Stock_TWSE.db')\nc = conn.cursor()\n\nc.execute('CREATE TABLE IF NOT EXISTS TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)')\nc.execute('ALTER TABLE TWSE RENAME TO TWSE_tempt')\nconn.commit()\n\ndate_now = datetime.datetime.now()\nstock_list = [2330,1234]\nm = int(input(\"請輸入欲抓取月份數\"))-1\n\n\nfor j in range(0,len(stock_list)):\n   for i in range (m,-1,-1):\n       date = date_now - i*datetime.timedelta(days = 30.4375)\n       url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn&date={}&stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j])\n       with urllib.request.urlopen(url) as jsonfile:\n               data = json.loads(jsonfile.read().decode())\n               df = pd.DataFrame(data['data'][0:len(data['data'])])\n               df.columns = data['fields']\n               df[\"股票代碼\"] = stock_list[j]\n               df = df.set_index('股票代碼')\n               df.to_sql('TWSE_tempt', conn, if_exists='append', index = True)\n               print(\"[{}] Month: {} is loading......\".format(str(stock_list[j]),str(date).split('-')[1]))\n               time.sleep(5)\n\nc.execute('CREATE TABLE TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)')\nc.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY 股票代碼, 日期 HAVING count(*)>0''')\nc.execute('DROP TABLE TWSE_tempt')\nprint(\"Done\")\nconn.commit()\nconn.close() \n```"},{"excerpt":"DataFrame存入CSV檔 個股月成交資訊 1 相對路徑 2 絕對路徑 3 取得路徑 4 df.to_csv 使用 1 以\"/\"隔開 2 將檔案重複寫入 3 替換空值 4 小數4位 5 不保留列名header 6 不保留引索值index # 完整程式碼 抓取多筆資料 個股月成交資訊 每日收盤行情","fields":{"slug":"/TWSE-2/"},"frontmatter":{"date":"November 28, 2020","title":"📈 TWSE-2-將DataFrame存入CSV檔 & 抓取多筆資料","tags":["TWSE"]},"rawMarkdownBody":"\n# DataFrame存入CSV檔\n\n##  個股月成交資訊\n### 1 相對路徑\n```python\ndf.to_csv('檔案名稱.csv')\n```\n### 2 絕對路徑\n```python\ndf.to_csv (r'路徑\\檔案名稱.csv') \n```\n### 3 取得路徑\n```python\nimport os\n\nos.getcwd()\n```\n### 4 df.to_csv 使用\n#### 1 以\"/\"隔開\n```python\ndf.to_csv ('檔案名稱.csv', sep='/')\n```\n#### 2 將檔案重複寫入\n\n```python\ndf.to_csv ('檔案名稱.csv', mode = 'a')\n```\n\n#### 3 替換空值\n```python\ndf.to_csv ('檔案名稱.csv', na_rep='NA')\n```\n\n#### 4 小數4位\n```python\ndf.to_csv ('檔案名稱.csv', float_format='%.4f')\n```\n\n#### 5 不保留列名header\n```python\ndf.to_csv ('檔案名稱.csv', header=0)\n```\n\n#### 6 不保留引索值index\n```python\ndf.to_csv ('檔案名稱.csv', index=0) \n```\n#### # 完整程式碼\n```python\n\nimport pandas as pd\nimport urllib.request, json\nimport time\n\nstock_list = [1101,1234,2330,2337]\ndate = 20200813\n\nfor j in range(0,len(stock_list)):\n   url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn&date={}&stockNo={}\".format(date,stock_list[j])\n   with urllib.request.urlopen(url) as jsonfile:\n       data = json.loads(jsonfile.read().decode())\n       stock_data.append(data)\n       df = pd.DataFrame(data['data'][0:len(data['data'])])\n       df.columns = data['fields']\n       df[\"Stock Code\"] = stock_list[j]\n       df = df.set_index('Stock Code')\n       df = df.applymap(lambda x: str(x.replace(',','')))\n       print(\"[#{}] {} is loading...\".format(stock_list[j], data['date']))\n       df.to_csv (r'C:\\Users\\User\\Downloads\\Python\\Python_Stock_TWSE_type = 2330.csv', mode='a', header=0)\n       time.sleep(5) \n```\n---\n## 抓取多筆資料\n### 個股月成交資訊\n```python\nimport urllib.request, json\nimport datetime\nimport pandas as pd\n\ndate_now = datetime.datetime.now()\nstock_list = [2330,1234]\nm = int(input(\"請輸入欲抓取月份數\"))-1\n\n\nfor j in range(0,len(stock_list)):\n   for i in range (m,-1,-1):\n       date = date_now - i*datetime.timedelta(days = 30.4375)\n       url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn&date={}&stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j])\n       with urllib.request.urlopen(url) as jsonfile:\n               data = json.loads(jsonfile.read().decode())\n               df = pd.DataFrame(data['data'][0:len(data['data'])])\n               df.columns = data['fields']\n               df[\"股票代碼\"] = stock_list[j]\n               df = df.set_index('股票代碼')\n               print(df)\n```\n### 每日收盤行情\n```python\nimport urllib.request, json\nimport datetime\nimport time\nimport pandas as pd\n\ndate = datetime.datetime.now()\nn = int(input('抓取n日資料'))\n\nfor i in range(n):\n   url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn&date={}&type=ALL\".format(str(date).split(' ')[0].replace('-',''))\n   with urllib.request.urlopen(url) as jsonfile:\n       data = json.loads(jsonfile.read().decode())\n       if data['stat'] ==\"OK\":\n           df = pd.DataFrame(data['data9'][0:len(data['data9'])])\n           df.columns = data['fields9']\n           print(url)\n           time.sleep(4)\n       else:\n           print(data['stat'])\n       date = date - datetime.timedelta(days = 1) \n```"},{"excerpt":"TWSE股票資料 1 個股月成交資訊 個股月成交資訊以台積電2330為例 點選 列印/HTML 更改 html 為 jsn 更改 20200813為 20200713，即可找到7月資料 更改 stockNo=2330 為 stockNo=1234，即可找到黑松交易資 https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn&dat…","fields":{"slug":"/TWSE-1/"},"frontmatter":{"date":"November 27, 2020","title":"📈 TWSE-1-json檔解析","tags":["TWSE"]},"rawMarkdownBody":"\n## TWSE股票資料\n\n### 1 個股月成交資訊\n1. [個股月成交資訊](https://www.twse.com.tw/zh/page/trading/exchange/STOCK_DAY.html)以台積電2330為例\n2. 點選 [列印/HTML](https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=html&date=20200813&stockNo=2330)\n3. 更改 **html** 為 **jsn**\n\n4. 更改 [**20200813**](https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn&date=20200813&stockNo=2330)為 [**20200713**](https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn&date=20200713&stockNo=2330)，即可找到7月資料\n5. 更改 **stockNo=2330** 為 **stockNo=1234**，即可找到黑松交易資\n    > https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn&date=20200713&stockNo=2330\n    \n    > https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn&date=20200713&stockNo=1234\n\n6. 在**exchangeReport**前加上 **/en/** 轉換成英文版\n\t> https://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn&date=20200713&stockNo=1234\n\t\n\t```python\n\tstock_list = [1234, 2330]\n\tdate = 20200813\n\tfor j in range(0,len(stock_list)):\n\t   url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn&date={}&stockNo={}\".format(date,stock_list[j])\n\t   print(url) \n\t```\n\n---\n\n### 2 每日收盤行情\n1. [每日收盤行情-全部](https://www.twse.com.tw/zh/page/trading/exchange/MI_INDEX.html)\n2. 點選 列印/HTML\n3. 更改 **html** 為 **jsn**\n4. 更改 [**20200827**](https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn&date=20200728&type=ALL) 為 [**20200828**](https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn&date=20200828&type=ALL)，即可找到8月28日資料\n5. 在**exchangeReport**前加上 **/en/** 轉換成英文版\n\t\n\t> https://www.twse.com.tw/en/exchangeReport/MI_INDEX?response=jsn&date=20200828&type=ALL\n\n---\n\n##  解析Json檔\n### 1 個股月成交資訊/en/\n#### 1 解析\n```python\nimport urllib.request, json \n\nstock_list = [2330]\ndate = 20200813\n\nfor j in range(0,len(stock_list)):\n   url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn&date={}&stockNo={}\".format(date,stock_list[j])\n\n   with urllib.request.urlopen(url) as jsonfile:\n\n       data = json.loads(jsonfile.read().decode())\n       print(data) \n```\n#### 2 [Json Editor](https://jsonformatter.org/json-editor)\n![Json Editor](https://i.imgur.com/1ohrpxY.jpg)\n\n```python\nfor i in range(0, len(data['data'])):\n   print(data['data'][i]) \n```\n\n```python\nprint(data['fields'])\nprint(data['date'])\nprint(data['title']) \n```\n\n#### 3 以DataFrame呈現資料\n\n```python\nimport pandas as pd\n\n# DataFrame呈現\ndf = pd.DataFrame(data['data'][0:len(data['data'])]) \n \n# 設定欄位\ndf.columns = data['fields']\n \n# 增加Stock Code至df\ndf[\"Stock Code\"] = stock_list[j]\n \n# 將Stock Code 設為 index\ndf = df.set_index('Stock Code')\n \n# 將逗號拿掉\ndf = df.applymap(lambda x: str(x.replace(',','')))\n```\n\n##### # 完整程式碼\n```python\nimport pandas as pd\nimport urllib.request, json\n\nstock_list = [2330]\ndate = 20200813\nfor j in range(0,len(stock_list)):\n   url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn&date={}&stockNo={}\".format(date,stock_list[j])\n   with urllib.request.urlopen(url) as jsonfile:\n       data = json.loads(jsonfile.read().decode())\n       df = pd.DataFrame(data['data'][0:len(data['data'])])\n       df.columns = data['fields']\n       df[\"Stock Code\"] = stock_list[j]\n       df = df.set_index('Stock Code')\n       df = df.applymap(lambda x: str(x.replace(',','')))\ndf \n```\n\n---\n\n### 2 每日收盤行情\n####  解析Json檔\n##### 1 解析\n```python\nimport urllib.request, json\nimport datetime\n\ndate = datetime.datetime.now()\nurl = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn&date={}&type=ALL\".format(str(date).split(' ')[0].replace('-',''))\nwith urllib.request.urlopen(url) as jsonfile:\n    data = json.loads(jsonfile.read().decode())\nprint(data)\n```\n\n```python\nprint(data['fields9'])\nprint(data['data9']) \n```\n##### 2 以DataFrame呈現\n```python\nimport pandas as pd\n\ndf = pd.DataFrame(data['data9'][0:len(data['data9'])])\ndf.columns = data['fields9'] \n```\n##### 3 將漲跌(+/-)刪除\n```python\ndf = df.drop(columns = '漲跌(+/-)')\n```\n##### 4 將證券代號設為index \n```python\ndf = df.set_index('證券代號')\n```\n##### 5 將逗號拿掉\n```python\ndf = df.applymap(lambda x: str(x.replace(',','')))\n```\n##### 6 加入日期\n```python\ndf[\"日期\"] = str(date).split(' ')[0].replace('-','/') \n```\n##### # 完整程式碼 \n```python\nimport urllib.request, json\nimport pandas as pd\nimport datetime\n\ndate = datetime.datetime.now()\nurl = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn&date={}&type=ALL\".format(str(date).split(' ')[0].replace('-',''))\nwith urllib.request.urlopen(url) as jsonfile:\n    data = json.loads(jsonfile.read().decode())\n    df = pd.DataFrame(data['data9'][0:len(data['data9'])])\n    df.columns = data['fields9']\n    df = df.drop(columns = '漲跌(+/-)')\n    df = df.set_index('證券代號')\n    df = df.applymap(lambda x: str(x.replace(',','')))\n    df[\"日期\"] = str(date).split(' ')[0].replace('-','/')\ndf\n```"}]}},"pageContext":{}},
    "staticQueryHashes": []}