[{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com Interactive Candlestick Charts ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:0:0","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Plotly pip install plotly ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:1:0","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:0","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"SQL連線 user = 'root' pw = \"YourPassworrd\" db = \"STOCK\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db)) df = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 \", engine, coerce_float=True, parse_dates=True) df = df.drop(columns = ['Stock Code','Change','Transaction','Trade Value']) df = df.rename(columns = {'Opening Price': 'Open','Highest Price':'High','Closing Price':'Close', 'Lowest Price':'Low','Closing Price':'Close','Trade Volume':'Volume'}) ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:1","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig1 Basic fig = go.Figure(data=[go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'])]) fig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\1.html\") fig.show() fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:2","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig2 xaxis_rangeslider_visible=False fig = go.Figure(data=[go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'])]) fig.update_layout(xaxis_rangeslider_visible=False) fig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\2.html\") fig.show() fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:3","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig3 Color \u0026 Title fig = go.Figure(data=[go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], increasing_line_color= '#5ac390', decreasing_line_color= '#fd6a6c')]) fig.update_layout( title='TWSE Stock Code:2330', yaxis_title='Price', xaxis_rangeslider_visible=False) fig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\3.html\") #### fig.show() ####　fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:4","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"每日收盤行情 import plotly.graph_objects as go import pandas as pd ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:0","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"SQL連線 import sqlalchemy from sqlalchemy import create_engine user = 'root' pw = \"YourPassworrd\" db = \"TWSE\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db)) df = pd.read_sql(\"SELECT * FROM `每日收盤行情` WHERE `證券代號` = 2330\", engine, coerce_float=True, parse_dates=True) ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:1","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"rename col /可做可不做/ df = df.rename(columns = {'開盤價': 'Open','最高價':'High','收盤價':'Close','最低價':'Low','日期':'Date','成交股數':'Volume'}) ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:2","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig4 subplots from plotly.subplots import make_subplots fig = make_subplots(rows=2, cols=1) fig.add_trace(go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], increasing_line_color= '#3D9970', decreasing_line_color= '#FF4136', increasing_fillcolor='#3D9970', decreasing_fillcolor='#FF4136')) fig.add_trace(go.Bar(y=df['Volume'],x = df['Date'],marker = dict(color=df['color'])), row=2, col=1) fig.update_layout( paper_bgcolor='#EEEEEE', plot_bgcolor='#EEEEEE', title='TWSE\u003cbr\u003eStock Code:2330', yaxis_title='Price', xaxis_rangeslider_visible=False) fig.show() fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:3","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig5 Change subplot sizes trace1 = go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], increasing_line_color= '#3D9970', decreasing_line_color= '#FF4136', increasing_fillcolor='#3D9970', decreasing_fillcolor='#FF4136') trace2 = go.Bar(y=df['Volume'],x = df['Date'],marker = dict(color=df['color']),yaxis='y2') data = [trace1, trace2] layout = go.Layout(yaxis2=dict(domain=[0, 0.3]), yaxis=dict(domain=[0.35,1]), xaxis_rangeslider_visible=False, title='\u003cb\u003eTWSE\u003c/b\u003e\u003cbr\u003eStock Code:2330', title_x = 0.5, title_font_size = 20, paper_bgcolor='#EEEEEE', plot_bgcolor='#EEEEEE', showlegend = False, hovermode = 'x unified', hoverlabel_bgcolor = 'rgba(255,255,255,0.9)', hoverlabel_namelength = 0) fig = go.Figure(data=data, layout=layout) #### fig.show() fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:4","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com MySQL to Dataframe ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:0:0","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"SQL連線 user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" ) engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\")) df = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/11/10 00:00:00' AND '2020/1/10 23:59:59'\", engine, coerce_float=True, parse_dates=True) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:1:0","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"讀取資料庫Table至Dataframe import pandas as pd df = pd.read_sql('SELECT* FROM `twse`', engine, index_col= 'Stock Code', coerce_float=True, parse_dates='Date') df ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:0","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"1 取出指定col值 print(df.['Opening Price']) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:1","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"2 取出指定index值 print(df.loc['2330']) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:2","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"3 取出指定index and col值 print(df.loc['2330']['Opening Price']) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:3","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"4 取出多個col值 df[['Opening Price', 'Closing Price']] ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:4","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"5 欄位名稱 df.columns ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:5","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"6 資料 df.values ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:6","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"7 欄位Type df.dtypes ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:7","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"8 index值 df.index ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:8","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"9 重新命名 df.rename(columns={'Opening Price': 'Open'}) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:9","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"# 實作 讀取指定index值至Dataframe df = pd.read_sql('SELECT* FROM `twse`, engine, index_col= 'Stock Code', coerce_float=True, parse_dates='Date') ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:10","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"mplfinance [新版] pip install mplfinance import mplfinance as mpf ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:3:0","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"每日收盤行情 SQL連線 user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" ) engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\")) df = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/11/10 00:00:00' AND '2020/1/10 23:59:59'\", engine, coerce_float=True, parse_dates=True) 重新調整Dataframe 1 刪掉多餘的Col df = df.drop(columns = ['Stock Code','Change','Transaction','Trade Value']) 2 重新命名Col df = df.rename(columns = {'Opening Price': 'Open','Highest Price':'High','Closing Price':'Close', 'Lowest Price':'Low','Closing Price':'Close','Trade Volume':'Volume'}) 3 df[‘Date’]型態改變 df['Date'] = pd.to_datetime(df['Date']) 4 重新排序 neworder = ['Open','High','Low','Close','Volume'] df = df.reindex(columns=neworder) Candlestick chart 基本 mpf.plot(df,type='candle') 美化 mc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',) s = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc) fig = mpf.figure(style=s,figsize=(20,20)) ax1 = fig.add_axes([0,0.3,1,0.4]) ax2 = fig.add_axes([0,0.1,1,0.2]) mav=(3,6,9) mpf.plot(df, type='candle', style=s, volume=ax2, mav=(3,6,9), panel_ratios=(4,1), xrotation=0, ax = ax1, update_width_config = dict(candle_width = 0.95), scale_width_adjustment = dict(lines=2)) ax1.legend(['mav '+str(mav[0]),'mav '+str(mav[1]),'mav '+str(mav[2])], loc='best', bbox_to_anchor=(0.2, 1.1), fontsize = 20, frameon = True, edgecolor = 'w', facecolor = 'w' ) ax1.set_title( label = '\\nTWSE\\n\\nStock Code:2330\\n', fontdict={'fontsize':30, 'fontweight':'bold', 'color':'k'}, loc='center' ) ax1.set_ylabel('Price',fontdict={'weight': 'bold', 'size': 20}) ax2.set_ylabel('Volume',fontdict={'weight': 'bold', 'size': 20}) ax1.yaxis.set_label_position(\"left\") ax1.yaxis.tick_left() yticks = np.arange(min(df['Volume']), max(df['Volume']), round( (max(df['Volume']) - min(df['Volume']))/5 )) ax2.set_yticks(yticks) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:3:1","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com mpl_finance [舊版] ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:0:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"SQL連線 ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:1:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 import MySQLdb user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute('USE STOCK') ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:1:1","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"mpl_finance import matplotlib.pyplot as plt import mpl_finance as mpf %matplotlib inline ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:2:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"基本設定 p = [int(e) for e in input(\"請輸入起始日期和結束日期\").split(\" \")] # 以空格隔開 period = \"`Date` BETWEEN '{}/{}/{} 00:00:00' AND '{}/{}/{} 23:59:59'\".format(p[0],p[1],p[2],p[3],p[4],p[5]) def sql_execute(column_name): SQL = \"SELECT {} FROM `twse` WHERE `Stock Code` = {} AND {} ORDER BY `Date`\" cursor.execute(SQL.format(column_name, 1234, period)) result = cursor.fetchall() return result def get_data(column_name): sql_data = [e[0] for e in sql_execute(column_name)] return sql_data ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:3:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"完整程式碼 import MySQLdb import matplotlib.pyplot as plt import mpl_finance as mpf %matplotlib inline user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute('USE STOCK') p = [int(e) for e in input(\"請輸入起始日期和結束日期\").split(\" \")] period = \"`Date` BETWEEN '{}/{}/{} 00:00:00' AND '{}/{}/{} 23:59:59'\".format(p[0],p[1],p[2],p[3],p[4],p[5]) def get_data(column_name): sql_data = [e[0] for e in sql_execute(column_name)] return sql_data def sql_execute(column_name): SQL = \"SELECT {} FROM `twse` WHERE `Stock Code` = {} AND {} ORDER BY `Date`\" cursor.execute(SQL.format(column_name, 1234, period)) result = cursor.fetchall() return result op = get_data('`Opening Price`') cp = get_data('`Closing Price`') h = get_data('`Highest Price`') l = get_data('`Lowest Price`') D = [e[0] for e in sql_execute('`Date`')] fig = plt.figure(figsize=(20, 8)) ax = fig.add_subplot(1, 1, 1) ax.set_xticks(range(0, len(D), int(round(len(D)/7,0)))) ax.set_xticklabels(D[::int(round(len(D)/7,0))]) mpf.candlestick2_ochl(ax, op, cp, h, l, width=0.6, colorup='r', colordown='g', alpha=1); Icons made by Freepik from www.flaticon.com","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:4:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com TWSE的資料存入MySQL ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:0:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"SQL連線 ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:1:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"1 基本設定 import MySQLdb user = 'root' pw = \"YourPassworrd\" ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:1:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"2 不使用中文 conn = MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw) cursor=conn.cursor() ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:1:2","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"3 可使用中文 / charset=‘utf8’ / conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:1:3","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"create_engine ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:2:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"pymysql sqlalchemy pip install pymysql sqlalchemy from sqlalchemy import create_engine engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"STOCK\")) ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:2:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊/en/ ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:3:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"完整程式碼 import urllib.request, json import json import time import datetime import pandas as pd from sqlalchemy import create_engine import MySQLdb user = 'root' pw = \"YourPassworrd\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"STOCK\")) conn = MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw) cursor=conn.cursor() create_table = ''' `Stock Code` varchar(20) NOT NULL, `Date` date NOT NULL, `Trade Volume` bigint(20) NOT NULL, `Trade Value` bigint(20) NOT NULL, `Opening Price` float NOT NULL, `Highest Price` float NOT NULL, `Lowest Price` float NOT NULL, `Closing Price` float NOT NULL, `Change` float NOT NULL, `Transaction` bigint(20) NOT NULL ''' cursor.execute(\"CREATE DATABASE IF NOT EXISTS STOCK DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" ) cursor.execute('USE STOCK') cursor.execute('''CREATE TABLE IF NOT EXISTS TWSE ({})'''.format(create_table)) cursor.execute('ALTER TABLE TWSE RENAME TO TWSE_tempt') conn.commit() data ={} date_now = datetime.datetime.now() stock_list = [2330,1234] m = int(input(\"請輸入欲抓取月份數\"))-1 for j in range(0,len(stock_list)): for i in range (m,-1,-1): date = date_now - i*datetime.timedelta(days = 30.4375) url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"Stock Code\"] = stock_list[j] df = df.set_index('Stock Code') df = df.applymap(lambda x: str(x.replace(',',''))) df.to_sql('TWSE_tempt', con = engine, if_exists = 'append', index=True) time.sleep(10) print(\"[Stock Code: #{}][{}] loading......\".format(str(stock_list[j]),data['title'].split(\" \")[0])) cursor.execute('CREATE TABLE TWSE ({})'.format(create_table)) cursor.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY `Stock Code`, `Date` HAVING count(*)\u003e0''') cursor.execute('DROP TABLE TWSE_tempt') conn.commit() conn.close() print(\"All done ! ! !\") ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:3:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"每日收盤行情 ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:4:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"完整程式碼 import urllib.request, json import json import time import datetime import pandas as pd from sqlalchemy import create_engine import MySQLdb user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" ) engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\")) create_table = ''' `證券代號` varchar(20) NOT NULL, `證券名稱` varchar(20) NOT NULL, `成交股數` bigint(20), `成交筆數` bigint(20), `成交金額` float, `開盤價` float NOT NULL, `最高價` float NOT NULL, `最低價` float NOT NULL, `收盤價` float NOT NULL, `漲跌價差` float, `最後揭示買價` float, `最後揭示買量` float, `最後揭示賣價` float, `最後揭示賣量` bigint(20), `本益比` float, `日期` date NOT NULL ''' cursor.execute('USE TWSE') cursor.execute('''CREATE TABLE IF NOT EXISTS `每日收盤行情` ({})'''.format(create_table)) cursor.execute('ALTER TABLE `每日收盤行情` RENAME TO `每日收盤行情_tempt`') date = datetime.datetime.now() n = int(input('抓取n日資料')) for i in range(n): url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn\u0026date={}\u0026type=ALL\".format(str(date).split(' ')[0].replace('-','')) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) if data['stat'] ==\"OK\": df = pd.DataFrame(data['data9'][0:len(data['data9'])]) df.columns = data['fields9'] df = df.drop(columns = '漲跌(+/-)') df = df.set_index('證券代號') df = df.applymap(lambda x: str(x.replace(',',''))) df[\"日期\"] = str(date).split(' ')[0].replace('-','/') df.to_sql('每日收盤行情_tempt', con = engine, if_exists = 'append', index=True) print(url) time.sleep(4) else: print(data['stat']) date = date - datetime.timedelta(days = 1) cursor.execute('CREATE TABLE `每日收盤行情` ({})'.format(create_table)) cursor.execute('''INSERT INTO `每日收盤行情` SELECT* FROM `每日收盤行情_tempt` GROUP BY `證券代號`, `日期` HAVING count(*)\u003e0''') cursor.execute('DROP TABLE `每日收盤行情_tempt`') conn.commit() conn.close() print(\"All done ! ! !\") ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:4:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"取出資料 ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:5:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 1 回傳全部 cursor.fetchall() 2 回傳一個值 cursor.fetchone() 3 回傳多個值 cursor.fetchmany() 4 實際使用 cursor.execute(\"SELECT `Opening Price` FROM `twse` where `Stock Code` = 2330\") result = cursor.fetchall() print(result) 5 result型態 print(type(result)) tuple print(result[1][0]) 6 取出特定時間內資料 回傳 Opening Price Date BETWEEN 2019/10/10 ~ 2020/1/10 cursor.execute(\"SELECT `Opening Price` FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/10/10 00:00:00' AND '2020/1/10 23:59:59'\") result = cursor.fetchall() print(result) ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:5:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com TWSE的資料存入SQLite ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:0:0","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:0","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"1 SQLite連線 import sqlite3 conn = sqlite3.connect('Python_Stock_TWSE.db') c = conn.cursor() ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:1","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"2 建立Table c.execute('CREATE TABLE IF NOT EXISTS TWSE2330_tempt (股票代碼, 日期, 成交股數, 成交金額, 開盤價, 最高價, 最低價, 收盤價, 漲跌價差, 成交筆數)') ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:2","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"3 刪除Table c.execute('DROP TABLE TWSE2330_tempt') ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:3","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"# 完整程式碼 import pandas as pd import urllib.request, json import datetime import time import sqlite3 conn = sqlite3.connect('Python_Stock_TWSE.db') c = conn.cursor() c.execute('CREATE TABLE IF NOT EXISTS TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)') conn.commit() date_now = datetime.datetime.now() stock_list = [2330,1234] m = int(input(\"請輸入欲抓取月份數\"))-1 for j in range(0,len(stock_list)): for i in range (m,-1,-1): date = date_now - i*datetime.timedelta(days = 30.4375) url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"股票代碼\"] = stock_list[j] df = df.set_index('股票代碼') df.to_sql('TWSE', conn, if_exists='append', index = True) conn.commit() print(\"[#{}] {} is loading...\".format(stock_list[j], data['date'])) time.sleep(5) conn.close() print(\"Done\") ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:4","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"資料庫資料重複問題解決 ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:2:0","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"1 選出沒有重複的資料 SELECT* FROM TWSE GROUP BY 股票代碼, 日期 HAVING count(*)\u003e0 ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:2:1","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"2 TWSE_tempt當作緩存 將TWSE改成TWSE_tempt當作緩存 ，再新增一個TWSE INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY 股票代碼, 日期 HAVING count(*)\u003e0 c.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY 股票代碼, 日期 HAVING count(*)\u003e0''') ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:2:2","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"# 完整程式碼 import pandas as pd import urllib.request, json import datetime import time import sqlite3 conn = sqlite3.connect('Python_Stock_TWSE.db') c = conn.cursor() c.execute('CREATE TABLE IF NOT EXISTS TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)') c.execute('ALTER TABLE TWSE RENAME TO TWSE_tempt') conn.commit() date_now = datetime.datetime.now() stock_list = [2330,1234] m = int(input(\"請輸入欲抓取月份數\"))-1 for j in range(0,len(stock_list)): for i in range (m,-1,-1): date = date_now - i*datetime.timedelta(days = 30.4375) url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"股票代碼\"] = stock_list[j] df = df.set_index('股票代碼') df.to_sql('TWSE_tempt', conn, if_exists='append', index = True) print(\"[{}] Month: {} is loading......\".format(str(stock_list[j]),str(date).split('-')[1])) time.sleep(5) c.execute('CREATE TABLE TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)') c.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY 股票代碼, 日期 HAVING count(*)\u003e0''') c.execute('DROP TABLE TWSE_tempt') print(\"Done\") conn.commit() conn.close() ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:2:3","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com DataFrame存入CSV檔 ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:0:0","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:0","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"1 相對路徑 df.to_csv('檔案名稱.csv') ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:1","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"2 絕對路徑 df.to_csv (r'路徑\\檔案名稱.csv') ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:2","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"3 取得路徑 import os os.getcwd() ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:3","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"4 df.to_csv 使用 1 以\"/“隔開 df.to_csv ('檔案名稱.csv', sep='/') 2 將檔案重複寫入 df.to_csv ('檔案名稱.csv', mode = 'a') 3 替換空值 df.to_csv ('檔案名稱.csv', na_rep='NA') 4 小數4位 df.to_csv ('檔案名稱.csv', float_format='%.4f') 5 不保留列名header df.to_csv ('檔案名稱.csv', header=0) 6 不保留引索值index df.to_csv ('檔案名稱.csv', index=0) # 完整程式碼 import pandas as pd import urllib.request, json import time stock_list = [1101,1234,2330,2337] date = 20200813 for j in range(0,len(stock_list)): url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(date,stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) stock_data.append(data) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"Stock Code\"] = stock_list[j] df = df.set_index('Stock Code') df = df.applymap(lambda x: str(x.replace(',',''))) print(\"[#{}] {} is loading...\".format(stock_list[j], data['date'])) df.to_csv (r'C:\\Users\\User\\Downloads\\Python\\Python_Stock_TWSE_type = 2330.csv', mode='a', header=0) time.sleep(5) ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:4","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"抓取多筆資料 ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:2:0","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 import urllib.request, json import datetime import pandas as pd date_now = datetime.datetime.now() stock_list = [2330,1234] m = int(input(\"請輸入欲抓取月份數\"))-1 for j in range(0,len(stock_list)): for i in range (m,-1,-1): date = date_now - i*datetime.timedelta(days = 30.4375) url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"股票代碼\"] = stock_list[j] df = df.set_index('股票代碼') print(df) ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:2:1","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"每日收盤行情 import urllib.request, json import datetime import time import pandas as pd date = datetime.datetime.now() n = int(input('抓取n日資料')) for i in range(n): url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn\u0026date={}\u0026type=ALL\".format(str(date).split(' ')[0].replace('-','')) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) if data['stat'] ==\"OK\": df = pd.DataFrame(data['data9'][0:len(data['data9'])]) df.columns = data['fields9'] print(url) time.sleep(4) else: print(data['stat']) date = date - datetime.timedelta(days = 1) ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:2:2","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:0:0","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"TWSE股票資料 ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:1:0","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"1 個股月成交資訊 個股月成交資訊以台積電2330為例 點選 列印/HTML 更改 html 為 jsn 更改 20200813為 20200713，即可找到7月資料 更改 stockNo=2330 為 stockNo=1234，即可找到黑松交易資 https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date=20200713\u0026stockNo=2330 https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date=20200713\u0026stockNo=1234 在exchangeReport前加上 /en/ 轉換成英文版 https://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date=20200713\u0026stockNo=1234 stock_list = [1234, 2330] date = 20200813 for j in range(0,len(stock_list)): url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(date,stock_list[j]) print(url) `` ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:1:1","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"2 每日收盤行情 每日收盤行情-全部 點選 列印/HTML 更改 html 為 jsn 更改 20200827 為 20200828，即可找到8月28日資料 在exchangeReport前加上 /en/ 轉換成英文版 https://www.twse.com.tw/en/exchangeReport/MI_INDEX?response=jsn\u0026date=20200828\u0026type=ALL ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:1:2","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"解析Json檔 ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:2:0","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"1 個股月成交資訊/en/ 1 解析 import urllib.request, json stock_list = [2330] date = 20200813 for j in range(0,len(stock_list)): url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(date,stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) print(data) 2 Json Editor for i in range(0, len(data['data'])): print(data['data'][i]) print(data['fields']) print(data['date']) print(data['title']) 3 以DataFrame呈現資料 1 DataFrame呈現 import pandas as pd df = pd.DataFrame(data['data'][0:len(data['data'])]) 2 設定欄位 df.columns = data['fields'] 3 增加Stock Code至df df[\"Stock Code\"] = stock_list[j] 4 將Stock Code 設為 index df = df.set_index('Stock Code') 5 將逗號拿掉 df = df.applymap(lambda x: str(x.replace(',',''))) # 完整程式碼 import pandas as pd import urllib.request, json stock_list = [2330] date = 20200813 for j in range(0,len(stock_list)): url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(date,stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"Stock Code\"] = stock_list[j] df = df.set_index('Stock Code') df = df.applymap(lambda x: str(x.replace(',',''))) df ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:2:1","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"2 每日收盤行情 解析Json檔 1 解析 import urllib.request, json import datetime date = datetime.datetime.now() url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn\u0026date={}\u0026type=ALL\".format(str(date).split(' ')[0].replace('-','')) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) print(data) print(data['fields9']) print(data['data9']) 2 以DataFrame呈現 import pandas as pd df = pd.DataFrame(data['data9'][0:len(data['data9'])]) df.columns = data['fields9'] 3 將漲跌(+/-)刪除 df = df.drop(columns = '漲跌(+/-)') 4 將證券代號設為index df = df.set_index('證券代號') 5 將逗號拿掉 df = df.applymap(lambda x: str(x.replace(',',''))) 6 加入日期 df[\"日期\"] = str(date).split(' ')[0].replace('-','/') # 完整程式碼 import urllib.request, json import pandas as pd import datetime date = datetime.datetime.now() url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn\u0026date={}\u0026type=ALL\".format(str(date).split(' ')[0].replace('-','')) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data9'][0:len(data['data9'])]) df.columns = data['fields9'] df = df.drop(columns = '漲跌(+/-)') df = df.set_index('證券代號') df = df.applymap(lambda x: str(x.replace(',',''))) df[\"日期\"] = str(date).split(' ')[0].replace('-','/') df ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:2:2","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"}]