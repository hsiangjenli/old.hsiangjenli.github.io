[{"categories":["Python","Kaggle"],"content":"Freepik from www.flaticon.com Synthetic Financial Datasets For Fraud Detection ","date":"2021-07-19","objectID":"/kaggle2/:0:0","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"pd.read_csv import pandas as pd df = pd.read_csv('Data/PS_20174392719_1491204439457_log.csv') df = df.rename(columns={'oldbalanceOrg':'oldBalanceOrig', 'newbalanceOrig':'newBalanceOrig', 'oldbalanceDest':'oldBalanceDest', 'newbalanceDest':'newBalanceDest'}) ","date":"2021-07-19","objectID":"/kaggle2/:1:0","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"觀察資料 step時間 type交易類型 amount金額 nameOrig帳戶擁有者 oldBalanceOrig舊餘額 newBalanceOrig新餘額 nameDest/目標帳戶 oldBalanceDest目標帳戶舊餘額 newBalanceDest目標帳戶新餘額 isFraud是否為詐騙 isFlaggedFraud是否被標記為詐騙 1 PAYMENT 9839.64 C1231006815 170136 160296 M1979787155 0 0 0 0 1 PAYMENT 1864.28 C1666544295 21249 19384.7 M2044282225 0 0 0 0 1 TRANSFER 181 C1305486145 181 0 C553264065 0 0 1 0 1 CASH_OUT 181 C840083671 181 0 C38997010 21182 0 1 0 1 PAYMENT 11668.1 C2048537720 41554 29885.9 M1230701703 0 0 0 0 ","date":"2021-07-19","objectID":"/kaggle2/:2:0","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"檢查資料是否有缺失值 import matplotlib.pyplot as plt import seaborn as sns plt.rcParams.update({'font.size': 12}) fig = plt.subplots(figsize=(20,5)) ax = sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='Reds') plt.savefig(\"Image/Chapter_2_缺失值.png\",bbox_inches='tight') ","date":"2021-07-19","objectID":"/kaggle2/:2:1","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"交易的類型 df.type.drop_duplicates().values ","date":"2021-07-19","objectID":"/kaggle2/:2:2","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"詐騙分布在哪些交易 df_GroupByType = df.groupby(['isFraud','type']).size().unstack() plt.figure(figsize=(20, 5)) ax = sns.heatmap(df_GroupByType,cmap = 'Reds', annot=True,fmt=',') plt.savefig(\"Image/Chapter_2_詐騙的種類.png\",bbox_inches='tight') fraud_types = df.loc[df.isFraud == 1].type.drop_duplicates().values ","date":"2021-07-19","objectID":"/kaggle2/:2:3","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"計算詐騙金額的平均數 for fraud_type in fraud_types: amount_median = df.loc[(df.isFraud == 1) \u0026 (df.type == fraud_type)].amount.median() describe = df.loc[(df.isFraud == 1) \u0026 (df.type == fraud_type)][['amount', 'oldBalanceOrig','newBalanceOrig','oldBalanceDest','newBalanceDest']].describe() print(describe) print(f'TYPE: {fraud_type}, AMOUNT MEDIAN: {amount_median}') TRANSFER amount oldBalanceOrig newBalanceOrig oldBalanceDest newBalanceDest count 4097 4097 4097 4097 4097 mean 1.48089e+06 1.84637e+06 385605 1073.38 3981.41 std 2.41489e+06 4.40416e+06 2.76984e+06 39961 79207.7 min 63.8 0 0 0 0 25% 128418 127564 0 0 0 50% 445706 444899 0 0 0 75% 1.53499e+06 1.53499e+06 0 0 0 max 1e+07 5.9585e+07 4.9585e+07 2.12234e+06 3.21768e+06 CASH_OUT amount oldBalanceOrig newBalanceOrig oldBalanceDest newBalanceDest count 4116 4116 4116 4116 4116 mean 1.4551e+06 1.45387e+06 72.5869 1.08492e+06 2.54954e+06 std 2.39384e+06 2.39451e+06 4656.89 4.65048e+06 5.22029e+06 min 0 0 0 0 0 25% 125464 123231 0 0 356281 50% 435517 433678 0 144970 1.05083e+06 75% 1.50076e+06 1.50076e+06 0 794711 3.0138e+06 max 1e+07 1e+07 298768 2.36231e+08 2.36726e+08 ","date":"2021-07-19","objectID":"/kaggle2/:2:4","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"將未發生詐騙的交易行為去除 df = df[(df.type == 'TRANSFER') | (df.type == 'CASH_OUT')] ","date":"2021-07-19","objectID":"/kaggle2/:2:5","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"簡易預測模型（行為假設） ","date":"2021-07-19","objectID":"/kaggle2/:3:0","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"type = ‘TRANSFER’ \u0026 amount \u003e 200000 假設交易為轉帳，且交易金額大於200000會是詐騙 df['Fraud_Heuristic'] = np.where(((df['type'] == 'TRANSFER') \u0026 (df['amount'] \u003e 200000)),1,0) 檢測準確度 F1 Score 預測陰性 neg_pred 預測陽性 pos_pred 實際陰性 neg_true 真陰性 TN 假陽性 FP 實際陽性 pos_true 假陰性 FN 真陽性 TP F1 Score 使用原因\r\r F1 Score 為調和平均數的一種 當資料分布差異很大的時候（偏斜分布 skewed distribution） ex: 發生詐騙的數量一定比實際發生的交易還要少非常多（1 : 9999）。如果這時候我們的模型完全沒有預測出詐騙，直接輸出所有的交易都是真實的。該模型的準確率仍有99.99%的準確率 ","date":"2021-07-19","objectID":"/kaggle2/:3:1","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"$$F_{1} = 2\\times \\frac{precision\\times recall}{precision + recall}$$ ","date":"2021-07-19","objectID":"/kaggle2/:3:2","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"$$= \\frac{2}{recall^{-1}+precision^{-1}}$$ $$Precision$$ $$recall$$ $$\\frac{TP}{TP+\\color{red}FP}$$ $$\\frac{TP}{TP+\\color{red}FN}$$ 所有預測陽性正確的比例 所有陽性正確的比例 預測準確度 到底預測出多少 $$\\frac{預測陽性}{所有\\color{red}預測陽性} = \\frac{TP}{pos\\_pred}$$ $$\\frac{預測陽性}{所有\\color{red}實際陽性} = \\frac{TP}{pos\\_true}$$ \r\r 方法一 def precision_recall(y_true, y_pred): tp = np.count_nonzero(np.where((y_true == 1)\u0026(y_pred == 1))) pos_pred = np.count_nonzero(np.where(y_pred == 1)) pos_true = np.count_nonzero(np.where(y_true == 1)) precision = tp/pos_pred recall = tp/pos_true return precision, recall def f1_Score(precision, recall): return 2/(precision**(-1)+recall**(-1)) precision, recall = precision_recall(y_pred=df['Fraud_Heuristic'],y_true=df['isFraud']) f1_Score(precision, recall) 方法二 from sklearn.metrics import f1_score f1_score(y_pred=df['Fraud_Heuristic'],y_true=df['isFraud']) 混淆矩陣 from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_pred=df['Fraud_Heuristic'],y_true=df['isFraud']) def plot_confusion_matrix(cm,target_names,plot_name,title='Confusion matrix'): plt.figure(figsize=(8, 6)) ax = sns.heatmap(cm,cmap = 'Reds',square = True, annot=True,fmt=',') plt.title(title) tick_marks = [0.45,1.4] plt.xticks(tick_marks, target_names) plt.yticks(tick_marks, target_names, rotation=0) accuracy = np.trace(cm) / float(np.sum(cm)) misclass = 1 - accuracy plt.ylabel('True label') plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass)) plt.savefig(f'Image/Chapter_2_{plot_name}.png',bbox_inches='tight') import seaborn as sns import matplotlib.pyplot as plt plot_confusion_matrix(cm,['Genuine','Fraud'],title='Confusion matrix',plot_name='confusion_matrix') ","date":"2021-07-19","objectID":"/kaggle2/:3:3","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"不同交易時間（時） df['hour'] = df['step'] % 24 frauds = [] genuine = [] for i in range(24): f = len(df[(df['hour'] == i) \u0026 (df['isFraud'] == 1)]) g = len(df[(df['hour'] == i) \u0026 (df['isFraud'] == 0)]) frauds.append(f) genuine.append(g) import pandas as pd df_GenuineAndFrauds = pd.DataFrame([genuine,frauds],index = ['genuine','frauds']) 熱圖 plt.figure(figsize=(25, 4)) sns.heatmap(df_GenuineAndFrauds,cmap = 'Reds', annot=True,fmt=',') plt.title('Heat map') plt.savefig(f'Image/Chapter_2_不同時間下各群組熱圖.png',bbox_inches='tight') 不同交易時間（日） df['day'] = df['step']%(24*7) w_frauds = [] w_genuine = [] for i in range(7): f = len(df[(df['day'] == i) \u0026 (df['isFraud'] == 1)]) g = len(df[(df['day'] == i) \u0026 (df['isFraud'] == 0)]) w_frauds.append(f) w_genuine.append(g) import pandas as pd df_w_GenuineAndFrauds = pd.DataFrame([w_genuine,w_frauds],index = ['genuine','frauds']) plt.figure(figsize=(25, 4)) sns.heatmap(df_w_GenuineAndFrauds,cmap = 'Reds', annot=True,fmt=',') plt.title('Heat map') plt.savefig(f'Image/Chapter_2_不同日下各群組熱圖.png',bbox_inches='tight') 線圖 def plot_hours(data, plot_name): fig, ax = plt.subplots(figsize=(10,6)) for i,d in enumerate(data): locals()['ax_'+str(i)] = ax.plot(d[0],label = d[1]) ax.legend(loc='best') plt.xticks(np.arange(len(data[0][0]))) fig.savefig(f'Image/Chapter_2_{plot_name}.png',bbox_inches='tight') plot_hours(data = [[genuine/np.average(genuine), 'Genuine'], [frauds/np.average(frauds),'Fraud'], [np.ones((24), dtype=int),'Average']], plot_name = '不同時間在該群組跟平均值的比較（時）') plot_hours(data = [[w_genuine/np.average(w_genuine), 'w_Genuine'], [w_frauds/np.average(w_frauds),'w_Fraud'], [np.ones((7), dtype=int),'Average']], plot_name = '不同時間在該群組跟平均值的比較（日）') ","date":"2021-07-19","objectID":"/kaggle2/:3:4","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"先轉帳，之後把錢領出來 for fraud_type in fraud_types: locals()['df_Fraud_'+fraud_type] = df[(df.isFraud == 1) \u0026 (df.type == fraud_type)] df_Fraud_TRANSFER.nameDest.isin(df_Fraud_CASH_OUT.nameOrig).any() \u003e\u003e False 資料顯示實際上並沒有發生這件事。 ","date":"2021-07-19","objectID":"/kaggle2/:3:5","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"目標帳戶餘額為零 目標帳戶餘額為零為詐騙的比例 len(df_Odd[(df_Odd.isFraud == 1)]) / len(df_Odd) 目標帳戶舊餘額小於交易金額的比例 len(df_Odd[(df_Odd.oldBalanceOrig \u003c= df_Odd.amount)]) / len(df_Odd) ","date":"2021-07-19","objectID":"/kaggle2/:3:6","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"資料型態 資料型態\r\r Numerical Data 數值，可計算。 Nominal Data 無法排序的離散資料。 e.g. 衣服、褲子、帽子。 Oridinal Data 可以排序的離散資料（彼此之間存在關聯）。 e.g. 衣服的尺寸（S, M, L, XL）。S小於M，M小於L。推論出S小於L。 \r\r df['type'] = 'D_' + df['type'].astype(str) dummies = pd.get_dummies(df['type']) df = pd.concat([df,dummies],axis=1) del df['type'] df = df.drop(['nameOrig','nameDest','Fraud_Heuristic'], axis= 1) df['isNight'] = np.where((2 \u003c= df['hour']) \u0026 (df['hour'] \u003c= 6), 1,0) df = df.drop(['step','hour','day'],axis=1) df_y = df['isFraud'] df_x = df.drop('isFraud', axis=1) y = df_y.values X = df_x.values ","date":"2021-07-19","objectID":"/kaggle2/:4:0","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"測試集 from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42) ","date":"2021-07-19","objectID":"/kaggle2/:4:1","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"驗證集 X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42) ","date":"2021-07-19","objectID":"/kaggle2/:4:2","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"決策樹 ","date":"2021-07-19","objectID":"/kaggle2/:5:0","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"基本 from sklearn import tree dtree = tree.DecisionTreeClassifier() dtree = dtree.fit(X_train, y_train) from IPython.display import Image import pydotplus dot_data = tree.export_graphviz(dtree, max_depth = 3, impurity = True, feature_names = list(df.drop(['isFraud'], axis=1)), class_names = [str(c) for c in dtree.classes_], rounded = True, filled= True ) graph = pydotplus.graph_from_dot_data(dot_data) graph.write_png('Image/Chapter_2_DecisionTreeClassifier.png') Image(graph.create_png()) ","date":"2021-07-19","objectID":"/kaggle2/:5:1","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"隨機森林 from sklearn.ensemble import RandomForestClassifier rf = RandomForestClassifier(n_estimators=10,n_jobs=-1) rf.fit(X_train,y_train) for i in range(0,10): dot_data = tree.export_graphviz(rf.estimators_[i], max_depth = 3, impurity = True, feature_names = list(df.drop(['isFraud'], axis=1)), class_names = [str(c) for c in dtree.classes_], rounded = True, filled= True ) graph = pydotplus.graph_from_dot_data(dot_data) graph.write_png(f'Image/Chapter_2_RandomForestClassifier{i}.png') Image(graph.create_png()) fig = plt.subplots(figsize=(20,20)) for i in range(0,10): plt.subplot(5,2, i+1) plt.axis('off') plt.imshow(plt.imread(f'Image/Chapter_2_RandomForestClassifier{i}.png')) plt.savefig(f'Image/Chapter_2_RandomForestClassifier_all.png',bbox_inches='tight') y_pred = rf.predict(X_test) f1_score(y_pred=y_pred,y_true=y_test) \u003e\u003e 0.8759736369083284 cm = confusion_matrix(y_pred=y_pred,y_true=y_test) plot_confusion_matrix(cm,['Genuine','Fraud'],plot_name = 'confusion_matrix_4' ) ","date":"2021-07-19","objectID":"/kaggle2/:5:2","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"Keras ","date":"2021-07-19","objectID":"/kaggle2/:6:0","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":"合成樣本（SMOTE, Synthetic Minority Oversampling Technique） 過取樣（oversample） 資料太少的情況下會使用 from imblearn.over_sampling import SMOTE, RandomOverSampler sm = SMOTE(random_state=42) X_train_res, y_train_res = sm.fit_resample(X_train, y_train) ","date":"2021-07-19","objectID":"/kaggle2/:6:1","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python","Kaggle"],"content":" from tensorflow.python.keras.models import Sequential from tensorflow.python.keras.layers import Dense, Activation #引入層數及激勵函數 from tensorflow.python.keras.api.keras.optimizers import SGD model = Sequential() model.add(Dense(1, input_dim=9)) model.add(Activation('sigmoid'))#設定激活層 model.summary() Model: \"sequential\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= dense (Dense) (None, 1) 10 _________________________________________________________________ activation (Activation) (None, 1) 0 ================================================================= Total params: 10 Trainable params: 10 Non-trainable params: 0 _________________________________________________________________ model.fit(X_train_res,y_train_res, epochs=5, batch_size=256, validation_data=(X_val,y_val)) Epoch 1/5 13013/13013 [==============================] - 57s 4ms/step - loss: 841305.5625 - acc: 0.9000 - val_loss: 30228978.0000 - val_acc: 0.1794 Epoch 2/5 13013/13013 [==============================] - 55s 4ms/step - loss: 753065.6250 - acc: 0.9075 - val_loss: 1453621.0000 - val_acc: 0.7090 Epoch 3/5 13013/13013 [==============================] - 57s 4ms/step - loss: 758336.6250 - acc: 0.9067 - val_loss: 106646.0781 - val_acc: 0.9481 Epoch 4/5 13013/13013 [==============================] - 66s 5ms/step - loss: 742057.2500 - acc: 0.9073 - val_loss: 144490.3438 - val_acc: 0.9301 Epoch 5/5 13013/13013 [==============================] - 61s 5ms/step - loss: 764006.3750 - acc: 0.9066 - val_loss: 4663113.0000 - val_acc: 0.5685 y_pred = model.predict(X_test) y_pred[y_pred \u003e 0.5] = 1 y_pred[y_pred \u003c 0.5] = 0 f1_score(y_pred=y_pred, y_true=y_test) \u003e\u003e\u003e 0.013664241476760267 cm = confusion_matrix(y_pred=y_pred,y_true=y_test) plot_confusion_matrix(cm,['Genuine','Fraud'],title='Confusion matrix',plot_name='confusion_matrix_2') model = Sequential() model.add(Dense(16,input_dim=9)) model.add(Activation('tanh')) model.add(Dense(1)) model.add(Activation('sigmoid')) model.compile(loss='binary_crossentropy', optimizer=SGD(learning_rate = 1e-5),metrics=['acc']) Model: \"sequential_2\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= dense_3 (Dense) (None, 16) 160 _________________________________________________________________ activation_3 (Activation) (None, 16) 0 _________________________________________________________________ dense_4 (Dense) (None, 1) 17 _________________________________________________________________ activation_4 (Activation) (None, 1) 0 ================================================================= Total params: 177 Trainable params: 177 Non-trainable params: 0 model.fit(X_train_res, y_train_res, epochs=5, batch_size=256, validation_data=(X_val, y_val)) Epoch 1/5 13013/13013 [==============================] - 60s 5ms/step - loss: 0.7174 - acc: 0.4597 - val_loss: 0.7900 - val_acc: 0.0144 Epoch 2/5 13013/13013 [==============================] - 68s 5ms/step - loss: 0.6137 - acc: 0.7121 - val_loss: 0.6612 - val_acc: 0.7113 Epoch 3/5 13013/13013 [==============================] - 75s 6ms/step - loss: 0.5555 - acc: 0.7691 - val_loss: 0.5789 - val_acc: 0.8170 Epoch 4/5 13013/13013 [==============================] - 70s 5ms/step - loss: 0.5206 - acc: 0.7781 - val_loss: 0.5426 - val_acc: 0.7938 Epoch 5/5 13013/13013 [==============================] - 74s 6ms/step - loss: 0.4951 - acc: 0.8065 - val_loss: 0.5009 - val_acc: 0.9115 y_pred = model.predict(X_test) y_pred[y_pred \u003e 0.5] = 1 y_pred[y_pred \u003c 0.5] = 0 f1_score(y_pred=y_pred, y_true=y_test) cm = confusion_matrix(y_pred=y_pred,y_true=y_test) plot_confusion_matrix(cm,['Genuine','Fraud'],title='Confusion matrix',plot_name='confusion_matrix_3') ","date":"2021-07-19","objectID":"/kaggle2/:6:2","tags":["Python"],"title":"Kaggle [1] Synthetic Financial Datasets For Fraud Detection ","uri":"/kaggle2/"},{"categories":["Python"],"content":"surang from www.flaticon.com 安裝Tensorflow（MX150） ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:0:0","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"CUDA cuda_11.4.0_471.11_win10\r\r \r\r ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:1:0","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"測試是否安裝成功 nvcc -V ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:1:1","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"cuDNN ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:2:0","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"NVIDA CUDNN DOCUMENTATION cudnn-11.3-windows-x64-v8.2.1.32\r\r \r\r ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:2:1","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"安裝 tensorflow-gpu ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:3:0","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"建立虛擬環境 conda create --name tfvenv python=3.7 ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:3:1","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"啟動虛擬環境 activate tfvenv ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:3:2","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"安裝 conda install tensorflow-gpu=2.0 ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:3:3","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"測試是否安裝成功 python from tensorflow.python.client import device_lib print(device_lib.list_local_devices()) ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:3:4","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"jupyter lab 虛擬環境捷徑 ","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:4:0","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"開啟 Anaconda Navigator 選擇tfvenv \u0026 安裝jupyter lab jupyter notebook 捷徑 修改target 更改 target\r\r C:\\Anaconda3\\python.exe C:\\Anaconda3\\cwp.py C:\\Anaconda3\\envs\\tfvenv C:\\Anaconda3\\envs\\tfvenv\\python.exe C:\\Anaconda3\\envs\\tfvenv\\Scripts\\ jupyter-notebook-script.py \"%USERPROFILE%/\" C:\\Anaconda3\\python.exe C:\\Anaconda3\\cwp.py C:\\Anaconda3\\envs\\tfvenv C:\\Anaconda3\\envs\\tfvenv\\python.exe C:\\Anaconda3\\envs\\tfvenv\\Scripts\\ jupyter-lab-script.py \"d:/jupyterlab\" 注意\r\r藍色的部分為jupyter lab開啟的資料夾路徑\r\r \r\r 參考資料\r\r在Nvidia MX150的Win10安裝CUDA Toolkit, cuDNN, Python(anaconda), and Tensorflow 手把手教學快速建置開發AI的環境(WIN10、Anaconda(Python, Tensorflow, CUDA, cuDNN)、Pycharm Win10 安裝 CUDA、cuDNN 教學 \r\r","date":"2021-07-11","objectID":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/:4:1","tags":["Python","Jupyter lab","Tensorflow","Anaconda"],"title":"Python [2] 安裝tensorflow-gpu","uri":"/python-2-%E5%AE%89%E8%A3%9Dtensorflow-gpu/"},{"categories":["Python"],"content":"Freepik from www.flaticon.com ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:0:0","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Installation of geopandas ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:1:0","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Unofficial Windows Binaries for Python Extension Packages 下載5個whl檔\r\r GDAL pyproj Fiona Shapely geopandas 注意\r\r 依照Python版本下載相對應版本 按照上面的順序，依次執行下令程式碼(Anaconda Prompt ) pip install GDAL-3.2.3-cp37-cp37m-win32.whl pip install pyproj-3.0.1-cp37-cp37m-win32.whl pip install Fiona-1.8.19-cp37-cp37m-win32.whl pip install Shapely-1.7.1-cp37-cp37m-win32.whl pip install geopandas-0.9.0-py3-none-any.whl \r\r \r\r ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:1:1","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"縣市界線資料 ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:2:0","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"下載SHP ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:2:1","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"解壓縮5個檔案 #縣市界線資料---------------------------------------------------------------------------------------------- import geopandas as gpd C_shp = gpd.read_file(r'COUNTY_MOI_1090820.shp') C_shp.set_index('COUNTYNAME', inplace = True) ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:2:2","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"鄉鎮界線資料 ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:3:0","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"下載SHP ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:3:1","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"解壓縮檔案 Danger\r\r ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:3:2","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"缺少CPG檔會造成亂碼 ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:4:0","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"5個檔案檔名都要一樣 \r\r #鄉鎮界線資料---------------------------------------------------------------------------------------------- import geopandas as gpd t_shp = gpd.read_file(r'TOWN_MOI_1100415.shp') t_shp.set_index('TOWNNAME', inplace = True) ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:5:0","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Basic ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:6:0","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Figure #縣市界線資料---------------------------------------------------------------------------------------------- import geopandas as gpd C_shp = gpd.read_file(r'COUNTY_MOI_1090820.shp') C_shp.set_index('COUNTYNAME', inplace = True) #畫圖---------------------------------------------------------------------------------------------------- import matplotlib.pyplot as plt C_shp.plot(figsize=(20,20),cmap = 'Wistia') plt.tight_layout() plt.savefig('Taiwan_County.png') 其他顏色\r\rcmap\r\r ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:6:1","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Covid-19 Heatmap ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:7:0","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Covid-19 Taiwan Open Data def get_covid19_data(): import urllib.request, json import pandas as pd import datetime url = 'https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json' with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data) df['確定病例數'] = df['確定病例數'].apply(lambda x:int(x)) df['個案研判日'] = [datetime.datetime.strptime(d, \"%Y%m%d\") for d in df['個案研判日']] return df Covid-19 Taiwan Open Data\r\r地區年齡性別統計表-嚴重特殊傳染性肺炎-依個案研判日統計\r\r ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:7:1","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Figure 1 完整程式碼 #Covid-19 Data------------------------------------------------------------------------------------------- def get_covid19_data(): import urllib.request, json import pandas as pd import datetime url = 'https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json' with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data) df['確定病例數'] = df['確定病例數'].apply(lambda x:int(x)) df['個案研判日'] = [datetime.datetime.strptime(d, \"%Y%m%d\") for d in df['個案研判日']] return df #畫圖\u0026裁切------------------------------------------------------------------------------------------------ def plot(data, plot_type, column, cmap, file_name): h = 100 w = 100 if plot_type == 'normal': data.plot(figsize=(w,h),cmap = cmap ) elif plot_type == 'heatmap': data.plot(figsize=(w,h),column = column, cmap = cmap) plt.savefig(f\"Plot_{file_name}.png\", bbox_inches='tight') return f\"Plot_{file_name}.png\" def crop(file_name): import cv2 image = cv2.imread(file_name) #裁切範圍 crop_image = image[300:1700, 1300:2500, :] cv2.imshow(\"Cropped\", crop_image) cv2.imwrite(file_name,crop_image) cv2.destroyAllWindows() from IPython.display import display, Image display(Image(filename=file_name)) #縣市界線資料---------------------------------------------------------------------------------------------- import geopandas as gpd C_shp = gpd.read_file(r'COUNTY_MOI_1090820.shp') C_shp.set_index('COUNTYNAME', inplace = True) import matplotlib.pyplot as plt plt.ioff() #地區年齡性別統計表-嚴重特殊傳染性肺炎-依個案研判日統計---------------------------------------------------------- df_GroupByCounty = get_covid19_data().groupby('縣市').sum() df_GroupByCounty.drop('空值',inplace = True) df_GroupByCounty.rename(index={'台中市': '臺中市', '台北市': '臺北市', '台南市': '臺南市'}, inplace=True) ##Merge資料表--------------------------------------------------------------------------------------------- C_shp['CName'] = C_shp.index df_GroupByCounty['cname'] = df_GroupByCounty.index import numpy as np C_result = C_shp.merge(df_GroupByCounty, left_on=('CName'), right_on=('cname'), how='left') C_result['color'] = np.log(C_result['確定病例數']) C_result['確定病例數'] = C_result['確定病例數'].fillna(0) C_result['color'] = C_result['color'].fillna(0) #畫圖---------------------------------------------------------------------------------------------------- p2 = plot(data=C_result, plot_type='heatmap', column='color', cmap='Reds', file_name='Heatmap_Taiwan_COUNTY') crop(p2) ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:7:2","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Figure 2 完整程式碼 #Covid-19 Data------------------------------------------------------------------------------------------- def get_covid19_data(): import urllib.request, json import pandas as pd import datetime url = 'https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json' with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data) df['確定病例數'] = df['確定病例數'].apply(lambda x:int(x)) df['個案研判日'] = [datetime.datetime.strptime(d, \"%Y%m%d\") for d in df['個案研判日']] return df #縣市界線資料---------------------------------------------------------------------------------------------- import geopandas as gpd C_shp = gpd.read_file(r'COUNTY_MOI_1090820.shp') C_shp.set_index('COUNTYNAME', inplace = True) import matplotlib.pyplot as plt plt.ioff() #地區年齡性別統計表-嚴重特殊傳染性肺炎-依個案研判日統計---------------------------------------------------------- df_GroupByCounty = get_covid19_data().groupby('縣市').sum() df_GroupByCounty.drop('空值',inplace = True) df_GroupByCounty.rename(index={'台中市': '臺中市', '台北市': '臺北市', '台南市': '臺南市'}, inplace=True) ##Merge資料表--------------------------------------------------------------------------------------------- C_shp['CName'] = C_shp.index df_GroupByCounty['cname'] = df_GroupByCounty.index import numpy as np C_result = C_shp.merge(df_GroupByCounty, left_on=('CName'), right_on=('cname'), how='left') C_result['color'] = np.log(C_result['確定病例數']) C_result['確定病例數'] = C_result['確定病例數'].fillna(0) C_result['color'] = C_result['color'].fillna(0) #畫圖---------------------------------------------------------------------------------------------------- import plotly.express as px import numpy as np C_result.index = C_result['CName'] fig = px.choropleth_mapbox(C_result, geojson=C_result['geometry'], locations=C_result.CName, color_continuous_scale=\"Reds\", color=C_result['color'], hover_name='CName', hover_data = {'color':False, 'CName':False, '確定病例數':True}, center={\"lat\": 23.5, \"lon\": 121}, mapbox_style=\"open-street-map\", zoom=5.5, title = 'Covid-19 Taiwan') fig.write_html(\"Python [1] Covid-19 + geopandas-2021-06-07-COUNTY.html\") fig.show() ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:7:3","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Figure 3 完整程式碼 #Covid-19 Data------------------------------------------------------------------------------------------- def get_covid19_data(): import urllib.request, json import pandas as pd import datetime url = 'https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json' with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data) df['確定病例數'] = df['確定病例數'].apply(lambda x:int(x)) df['個案研判日'] = [datetime.datetime.strptime(d, \"%Y%m%d\") for d in df['個案研判日']] return df #畫圖\u0026裁切------------------------------------------------------------------------------------------------ def plot(data, plot_type, column, cmap, file_name): h = 100 w = 100 if plot_type == 'normal': data.plot(figsize=(w,h),cmap = cmap ) elif plot_type == 'heatmap': data.plot(figsize=(w,h),column = column, cmap = cmap) plt.savefig(f\"Plot_{file_name}.png\", bbox_inches='tight') return f\"Plot_{file_name}.png\" def crop(file_name): import cv2 image = cv2.imread(file_name) #裁切範圍 crop_image = image[300:1700, 1300:2500, :] cv2.imshow(\"Cropped\", crop_image) cv2.imwrite(file_name,crop_image) cv2.destroyAllWindows() from IPython.display import display, Image display(Image(filename=file_name)) #鄉鎮界線資料---------------------------------------------------------------------------------------------- import geopandas as gpd t_shp = gpd.read_file(r'TOWN_MOI_1100415.shp') t_shp.set_index('TOWNNAME', inplace = True) import matplotlib.pyplot as plt plt.ioff() #地區年齡性別統計表-嚴重特殊傳染性肺炎-依個案研判日統計---------------------------------------------------------- df_GroupByTOWN = get_covid19_data().groupby('鄉鎮').sum() df_GroupByTOWN.drop('空值',inplace = True) ##Merge資料表--------------------------------------------------------------------------------------------- t_shp['TName'] = t_shp.index df_GroupByTOWN['tname'] = df_GroupByTOWN.index import numpy as np t_result = t_shp.merge(df_GroupByTOWN, left_on=('TName'), right_on=('tname'), how='left') t_result['color'] = np.log(t_result['確定病例數']) t_result['color'] = t_result['color'].fillna(0) t_result['確定病例數'] = t_result['確定病例數'].fillna(0) #畫圖---------------------------------------------------------------------------------------------------- p3 = plot(data=t_result, plot_type='heatmap', column='color', cmap='Reds', file_name='Heatmap_Taiwan_TOWN') crop(p3) ","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:7:4","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["Python"],"content":"Figure 4 完整程式碼 #Covid-19 Data------------------------------------------------------------------------------------------- def get_covid19_data(): import urllib.request, json import pandas as pd import datetime url = 'https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json' with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data) df['確定病例數'] = df['確定病例數'].apply(lambda x:int(x)) df['個案研判日'] = [datetime.datetime.strptime(d, \"%Y%m%d\") for d in df['個案研判日']] return df #鄉鎮界線資料---------------------------------------------------------------------------------------------- import geopandas as gpd t_shp = gpd.read_file(r'TOWN_MOI_1100415.shp') t_shp.set_index('TOWNNAME', inplace = True) import matplotlib.pyplot as plt plt.ioff() #地區年齡性別統計表-嚴重特殊傳染性肺炎-依個案研判日統計---------------------------------------------------------- df_GroupByTOWN = get_covid19_data().groupby('鄉鎮').sum() df_GroupByTOWN.drop('空值',inplace = True) ##Merge資料表--------------------------------------------------------------------------------------------- t_shp['TName'] = t_shp.index df_GroupByTOWN['tname'] = df_GroupByTOWN.index import numpy as np t_result = t_shp.merge(df_GroupByTOWN, left_on=('TName'), right_on=('tname'), how='left') t_result['color'] = np.log(t_result['確定病例數']) t_result['color'] = t_result['color'].fillna(0) t_result['確定病例數'] = t_result['確定病例數'].fillna(0) #畫圖---------------------------------------------------------------------------------------------------- import plotly.express as px import numpy as np t_result['Name'] = t_result['COUNTYNAME']+' '+t_result['TName'] t_result.index = t_result['Name'] fig = px.choropleth_mapbox(t_result, geojson=t_result['geometry'], locations=t_result.Name, color_continuous_scale=\"Reds\", color=t_result['color'], hover_name='Name', hover_data = {'color':False, 'Name':False, '確定病例數':True}, center={\"lat\": 23.5, \"lon\": 121}, mapbox_style=\"open-street-map\", zoom=5.5, title = 'Covid-19 Taiwan') fig.write_html(\"Python [1] Covid-19 + geopandas-2021-06-07-TOWN.html\") choropleth_mapbox\r\r plotly.express.choropleth_mapbox Built-in Continuous Color Scales in Python \r\r 參考資料\r\r直轄市、縣市界線(TWD97經緯度) 鄉鎮市區界線(TWD97經緯度) Three Ways to Plot Choropleth Map Using Python Download GADM data (version 3.6) Python 練習: 以地圖顯示癌症死因資料(II) Python 地圖視覺化 - 使用 Folium install geopandas Pandas Merging 101https://blog.csdn.net/Summer_Horse/article/details/113488809) \r\r","date":"2021-05-23","objectID":"/python-1-covid-19-geopandas/:7:5","tags":["geopandas"],"title":"Python [1]  Covid-19  + geopandas","uri":"/python-1-covid-19-geopandas/"},{"categories":["NOTE","Python"],"content":"Freepik from www.flaticon.com 報酬率 ","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:0:0","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["NOTE","Python"],"content":"算數平均報酬率 Arithmetic mean ","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:1:0","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["NOTE","Python"],"content":"幾何平均報酬率 Geometric mean 缺點\r\r數列中任何一個變數值不能為0，一個為0，則幾何平均數為0\r\r ","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:2:0","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["NOTE","Python"],"content":"對數報酬率 Logarithmic Rates of Return Understanding Log Return and Continuous Compounding\r\rLog Return is one of three methods for calculating return and it assumes returns are compounded continuously rather than across sub-periods.\r\r 優點\r\r簡化計算\r\r 對數報酬率 ","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:3:0","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["NOTE","Python"],"content":"Python 對數報酬率寫法 ","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:4:0","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["NOTE","Python"],"content":"方法一 np.exp(np.log(df['Adj Close']).diff(1))-1 ","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:4:1","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["NOTE","Python"],"content":"方法二 np.exp(np.log(df['Adj Close']/df['Adj Close'].shift(1)))-1 為什麼要用對數報酬率？\r\r對數報酬率有時間的累加性 簡化計算過程 \r\r ","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:4:2","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["NOTE","Python"],"content":"PART 1 解釋 /Daily/ PART 1\r\rSTEP 1 $\\frac{P_{t}-P_{t-1}}{P_{t-1}} = \\frac{P_{t}}{P_{t-1}} - 1 = r$ STEP 2 移向 $1+r = \\frac{P_{t}}{P_{t-1}}$ STEP 3 取對數 $ln(1+r) = ln(\\frac{P_{t}}{P_{t-1}}) = ln(P_{t}) - ln(P_{t-1})$ $Y=ln(1+r)$\r\r ","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:5:0","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["NOTE","Python"],"content":"PART 2 解釋 /Period/ PART 2\r\rSTEP 1 $r_{T} = \\frac{P_{T} - P_{0}}{P_{0}} = \\frac{P_{T}}{P_{0}} - 1$ STEP 2 移向 $1+r_{T} = \\frac{P_{T}}{P_{0}}$ STEP 3 取對數\u0026拆解 $ln(\\frac{P_T}{P_0})=ln(\\frac{P_T}{P_{T-1}})+ln(\\frac{P_{T-1}}{P_{T-2}})+…+ln(\\frac{P_1}{P_0})$ STEP 4 $e^{ln(\\frac{P_T}{P_0})} = \\frac{P_T}{P_0}$ $r_{T} = e^{ln(\\frac{P_T}{P_0})} -1 = \\frac{P_T}{P_0} -1$\r\r import numpy as np import pandas as pd import pandas_datareader.data as web df = web.DataReader('2330.tw', 'yahoo', '2020-05-01') different = pd.DataFrame() different['pct_cahnge()'] = df['Adj Close'].pct_change() different['np.log().diff(1)'] = np.exp(np.log(df['Adj Close']).diff(1))-1 different P_cumsum = pd.DataFrame() P_cumsum['pct_cahnge()'] = np.cumsum(df['Adj Close'].pct_change()) P_cumsum['np.log().diff(1)'] = np.exp(np.cumsum(np.log(df['Adj Close']).diff(1)))-1 P_cumsum tick_size = 20 legend_fontsize = 15 linewidth = 4 fig = plt.figure(figsize = (20,8)) ax = fig.add_subplot() ax1 = ax.plot(P_cumsum['pct_cahnge()'],linewidth=linewidth) ax2 = ax.plot(P_cumsum['np.log().diff(1)'],linewidth=linewidth) ax.tick_params(labelsize=tick_size) ax.legend(['pct_cahnge()','np.log().diff(1)'],loc='upper left',fontsize=legend_fontsize, frameon=False) 參考資料\r\r[量化投資基本功]為什麼對數收益率在量化投資這麼重要? log return 與累積報酬率 [Youtube]量化投資基本功—為什麼對數收益率在量化投資這麼重要? log return 與累積報酬率 關於幾何報酬率與算術報酬率的分享–TOM雜寫 [Day28]投資組合的風險評估 - 對數收益率 Re: [問題] 取log=成長率 [ROI] 討論報酬率的計算公式與報酬率理解觀念 Understanding Log Return and Continuous Compounding Python : easy way to do geometric mean in python? 統計：一個簡單的幾何平均數的運算範例 幾何平均數 \r\r","date":"2021-02-03","objectID":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/:6:0","tags":["Quantitative Investing ","對數報酬率","Log Return"],"title":"NOTE [1] 對數報酬率","uri":"/note-1-%E5%B0%8D%E6%95%B8%E5%A0%B1%E9%85%AC%E7%8E%87/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com Selenium + 鉅亨網 + MonogoDB 參考資料\r\r高级爬虫: 让 Selenium 控制你的浏览器帮你爬 在Windows上安裝Python \u0026 Selenium + 簡易教學 \r\r Selenium Record and Playback tool\r\rSelenium IDE Selenium Record and Playback tool for ease of getting acquainted with Selenium WebDriver.\r\r ","date":"2021-02-01","objectID":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/:0:0","tags":["Selenium","bs4","urllib","MongoDB"],"title":"TWSE [13] Selenium + 鉅亨網","uri":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"ChromeDriver - WebDriver for Chrome import selenium selenium.__version__ ","date":"2021-02-01","objectID":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/:1:0","tags":["Selenium","bs4","urllib","MongoDB"],"title":"TWSE [13] Selenium + 鉅亨網","uri":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"開啟Google首頁 from selenium import webdriver browser = webdriver.Chrome() browser.get('http://google.com/') ","date":"2021-02-01","objectID":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/:1:1","tags":["Selenium","bs4","urllib","MongoDB"],"title":"TWSE [13] Selenium + 鉅亨網","uri":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"開啟鉅亨網台股新聞 browser = webdriver.Chrome() driver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\") document.body.scrollHeight 參考資料\r\rHow can I scroll a web page using selenium webdriver in python? [爬蟲實戰] 如何透過Selenium 自動將頁面捲動至最下方抓取資料? 用python實現selenium 自動化測試 \r\r driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\") print(driver.execute_script(\"return document.body.scrollHeight\")) pause_time = 10 for i in range(10): driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\") time.sleep(pause_time) ChromeOptions() 參考資料\r\rPython selenium.webdriver.ChromeOptions() Examples Python selenium.webdriver 模块，ChromeOptions() 实例源码 Python webdriver.ChromeOptions方法代碼示例 \r\r start = time.time() driver = webdriver.Chrome() driver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\") for i in range(2): driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\") time.sleep(pause_time) driver.close() end = time.time() print(end - start) start = time.time() options = webdriver.ChromeOptions() options.add_experimental_option(\"prefs\", {'ignore_image': 2}) options.add_argument('--headless') options.add_argument('--disable-gpu') driver = webdriver.Chrome(chrome_options=options) driver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\") for i in range(2): driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\") time.sleep(pause_time) driver.close() end = time.time() print(end - start) 執行時間比較\r\r\r\r ","date":"2021-02-01","objectID":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/:1:2","tags":["Selenium","bs4","urllib","MongoDB"],"title":"TWSE [13] Selenium + 鉅亨網","uri":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"Bs4 options = webdriver.ChromeOptions() options.add_experimental_option(\"prefs\", {'ignore_image': 2}) options.add_argument('--headless') options.add_argument('--disable-gpu') driver = webdriver.Chrome(chrome_options=options) driver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\") for i in range(2): driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\") time.sleep(pause_time) soup = BeautifulSoup(driver.page_source, 'html.parser') driver.close() MongoDB 抓出已存檔的past_post_ids myclient = pymongo.MongoClient(\"mongodb://localhost:27017/\") mydb = myclient[\"article\"] mycol = mydb[\"2021_鉅亨網\"] past_post_ids = [] end = datetime.datetime.now() start = end - datetime.timedelta(days = 3) for x in mycol.find({'Date': {\"$gte\": start,\"$lte\": end}}): past_post_ids.append(x[\"post_id\"]) 從網站上抓下來的post_ids hrefs = soup.find_all('a') post_ids = [] import regex as re for href in hrefs: if re.match('/news/id/', str(href.get('href'))): post_id = str(href.get('href')).split('/')[-1].split('?')[0] post_ids.append(post_id) past_post_ids\u0026post_ids差集 A = ['A','B','C','D'] B = ['B','F'] C = [] for x in B: if x in A: None else: C.append(x) C new_post_ids = [] for _id in post_ids: if _id in past_post_ids: None else: new_post_ids.append(_id) print(len(past_post_ids)) print(len(post_ids)) print(len(new_post_ids)) 圖片解說\r\rSet (mathematics)\r\r 存成urls urls = ['https://news.cnyes.com/news/id/{}?exp=a'.format(e) for e in new_post_ids] def get_text(i): post_id = urls[i].split('/')[5].split('?')[0] data = urllib.request.urlopen(urls[i]) soup = BeautifulSoup(data, 'html.parser') P = soup.find_all('p') text = '' for i,p in zip(range(0,len(P)),P): if i \u003e=4: text = text + p.getText() i += 1 tags = soup.find_all('a') n_tags = [] for tag in tags: if re.match('/tag/', str(tag.get('href'))): n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))]) title = soup.find('h1').getText() T = soup.find('time') Date = datetime.datetime.strptime(T['datetime'], \"%Y-%m-%dT%H:%M:%S+08:00\") return(Date,post_id,title,n_tags,text) for i in range(0,len(urls)): print(get_text(i)) ","date":"2021-02-01","objectID":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/:1:3","tags":["Selenium","bs4","urllib","MongoDB"],"title":"TWSE [13] Selenium + 鉅亨網","uri":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"完整程式碼 import pymongo import urllib from bs4 import BeautifulSoup from selenium import webdriver from selenium.webdriver.chrome.options import Options import regex as re import datetime import time pause_time = 10 options = webdriver.ChromeOptions() options.add_experimental_option(\"prefs\", {'ignore_image': 2}) options.add_argument('--headless') options.add_argument('--disable-gpu') driver = webdriver.Chrome(chrome_options=options) driver.get(\"https://news.cnyes.com/news/cat/tw_stock_news?exp=a\") for i in range(2): driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\") time.sleep(pause_time) soup = BeautifulSoup(driver.page_source, 'html.parser') driver.close() hrefs = soup.find_all('a') post_ids = [] past_post_ids = [] new_post_ids = [] for href in hrefs: if re.match('/news/id/', str(href.get('href'))): post_id = str(href.get('href')).split('/')[-1].split('?')[0] post_ids.append(post_id) myclient = pymongo.MongoClient(\"mongodb://localhost:27017/\") mydb = myclient[\"article\"] mycol = mydb[\"2021_鉅亨網\"] end = datetime.datetime.now() start = end - datetime.timedelta(days = 3) for x in mycol.find({'Date': {\"$gte\": start,\"$lte\": end}}): past_post_ids.append(x[\"post_id\"]) new_post_ids = [] for _id in post_ids: if _id in past_post_ids: None else: new_post_ids.append(_id) urls = ['https://news.cnyes.com/news/id/{}?exp=a'.format(e) for e in new_post_ids] def get_text(i): post_id = urls[i].split('/')[5].split('?')[0] data = urllib.request.urlopen(urls[i]) soup = BeautifulSoup(data, 'html.parser') P = soup.find_all('p') text = '' for i,p in zip(range(0,len(P)),P): if i \u003e=4: text = text + p.getText() i += 1 tags = soup.find_all('a') n_tags = [] for tag in tags: if re.match('/tag/', str(tag.get('href'))): n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))]) title = soup.find('h1').getText() T = soup.find('time') Date = datetime.datetime.strptime(T['datetime'], \"%Y-%m-%dT%H:%M:%S+08:00\") return(Date,post_id,title,n_tags,text) for i in range(0,len(urls)): data = get_text(i) print(i, end = ' ') mydict = { \"Date\": data[0], \"post_id\":data[1],\"Title\": data[2], \"Tags\":data[3] , \"text\": data[4] } x = mycol.insert_one(mydict) cursor = mycol.aggregate( [{\"$group\": {\"_id\": \"$Title\", \"unique_ids\": {\"$addToSet\": \"$_id\"}, \"count\": {\"$sum\": 1}}}, {\"$match\": {\"count\": { \"$gte\": 2 }}}]) response = [] for doc in cursor: del doc[\"unique_ids\"][0] for id in doc[\"unique_ids\"]: response.append(id) mycol.remove({\"_id\": {\"$in\": response}}) ","date":"2021-02-01","objectID":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/:1:4","tags":["Selenium","bs4","urllib","MongoDB"],"title":"TWSE [13] Selenium + 鉅亨網","uri":"/twse-13-selenium-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com Python + 投資學/Efficient Frontier/ ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:0:0","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"SQL 連接/方法一/ from sqlalchemy import create_engine import pandas as pd import matplotlib import matplotlib.pyplot as plt %matplotlib inline import numpy as np from functools import reduce import scipy.optimize as solver user = 'root' pw = \"YourPassword\" db = \"TWSE\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db)) df_2330 = pd.read_sql(\"SELECT * FROM `每日收盤行情` WHERE `證券代號` = 2330 AND `日期` BETWEEN '2020/10/20 00:00:00' AND '2021/1/10 23:59:59' ORDER BY `日期`\", engine, coerce_float=True, parse_dates=True) df_tw = pd.read_sql(\"SELECT * FROM `發行量加權股價指數` WHERE `日期` BETWEEN '2020/10/20 00:00:00' AND '2021/1/10 23:59:59'\", engine, coerce_float=True, parse_dates=True) ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:1:0","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"報酬率 參考資料\r\rpandas.DataFrame.pct_change $$ Return = \\frac{D_{1} - D_{0}}{D_{0}} $$\r\r 基本 今日 \u0026 昨日 print('今日 昨日') for i,j in zip(df_2330['收盤價'],df_2330['收盤價'].shift(1)) : print(i, j) Return = pd.DataFrame((df_2330['收盤價'] - df_2330['收盤價'].shift(1))/df_2330['收盤價'].shift(1)) Return = Return.rename(columns = {'收盤價':'Return'}) Return pct_change() df_2330['收盤價'].pct_change() df_tw['收盤指數'].pct_change() df = pd.DataFrame(df_2330['收盤價'].pct_change()) df['TW'] = df_tw['收盤指數'].pct_change() df = df.rename(columns = {'收盤價':'2330'}) ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:1:1","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"變異數$σ^2$ var() df_tw['收盤指數'].pct_change().var() ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:1:2","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"標準差$σ$ std() df_tw['收盤指數'].pct_change().std() std = df_tw['收盤指數'].pct_change().var()**(1/2) ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:1:3","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"共變異數$σ_{a,b}$ cov() 參考公式\r\r$$cov_{x,y} = \\frac{\\sum{}^{} ({x_i} - \\overline{x})({y_i} - \\overline{y})}{N-1}$$\r\r 簡單實證 df_test = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)], columns=['dogs', 'cats']) df_test.cov() $$dog$$ $$dog_i - \\overline{dog} $$ $$cats$$ $$cat_i - \\overline{cat} $$ $${Dev_{dog}}\\times{Dev_{cat}}$$ 1 0 2 1 0 0 -1 3 1.5 -1.5 2 1 0 -1.5 -1.5 1 0 1 -1 0 $$\\overline{dog} = 1$$ $$\\overline{cat} = 1.5$$ $${\\frac{\\sum{}^{} ({Dev_{dog}}\\times{Dev_{cat}})}{4-1}} = -1$$ $ σ_{2330,TW} $ 補充資料\r\r$$ σ_{2330,TW} $$ Excel計算過程\r\r df.cov() \u003e\u003e\u003e 0.000097 ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:1:4","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"相關係數$ρ_{a,b}$ corr() df.corr() 2330 TW 2330 1.000000 0.895857 TW 0.895857 1.000000 ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:1:5","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"$\\beta$係數 參考公式\r\r$${\\beta} = \\frac{σ_{i,m}}{σ^2}$$ \r\r Beta = df.cov()['TW'][0]/df_tw['收盤指數'].pct_change().var() ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:1:6","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"SQL 連接/方法二/ from sqlalchemy import create_engine import pandas as pd import matplotlib import matplotlib.pyplot as plt %matplotlib inline import numpy as np from functools import reduce import scipy.optimize as solver user = 'root' pw = \"YourPassword\" db = \"TWSE\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db)) Start = '2020/10/20 00:00:00' End = '2021/1/10 23:59:59' SQL = ''' SELECT `收盤價` FROM `{}` WHERE `證券代號` = '{}' AND `日期` BETWEEN '{}' AND '{}' ORDER BY `日期` ''' stock_codes = ['2330','2317','1234'] def getSQL(stock_code): df = pd.read_sql(SQL.format('每日收盤行情',stock_code, Start, End), engine, coerce_float=True, parse_dates=True) return df def Tsql(stock_codes): for i in range(0,len(stock_codes)): globals()[i] = getSQL(stock_codes[i]) if i == 0: df = pd.DataFrame(globals()[i].pct_change()) df = df.rename(columns = {'收盤價':stock_codes[i]}) else: df['{}'.format(stock_codes[i])] = globals()[i].pct_change() df = df.replace([np.inf, -np.inf], 0) return df returns = Tsql(stock_codes) ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:2:0","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"預期報酬$E(r)$ Expected_R = returns.mean() * 252 ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:2:1","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"權重$W_{i}$ W = np.array([0.5,0.3,0.2]) ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:2:2","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"投資組合報酬率$R_{P}$ 參考公式\r\r$$R_{P} = \\sum{W_{i}\\times{R_{i}}}$$\r\r Portfolio_R = sum(W * Expected_R) ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:2:3","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"量化投資/Efficient Frontier/ ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:3:0","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"隨機權重$W_{i}$ W = np.random.rand(len(stock_codes)) W = W/sum(W) W ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:3:1","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"投資組合風險$σ_{P}^2$ 基本公式 參考公式\r\r$$σ_{P}^2 = \\sum{ {W_{i}^2} {σ_{i}^2}} + \\sum\\sum{ W_{i} W_{j} {σ_{i,j}} } $$ $$σ_{P}^2 = \\sum{ {W_{i}^2} {σ_{i}^2}} + \\sum\\sum{ W_{i} W_{j} {ρ_{i,j}} {σ_{i}} {σ_{j}} } $$\r\r 矩陣簡單計算 參考資料\r\r[work] 理解矩陣乘法 \\[ \\begin{bmatrix} 1\u00262\\\\3\u00264 \\end{bmatrix} \\times \\begin{bmatrix} 4\u0026-6\\\\ -2\u00263 \\end{bmatrix} = \\begin{bmatrix} A_1\u0026A_2\\\\B_1\u0026B_2 \\end{bmatrix} = \\begin{bmatrix} 0\u00260\\\\4\u0026 -6 \\end{bmatrix}\\]\r\r $A_{1} = 1\\times4 + 2\\times(-2) = 0$ $A_{2} = 1\\times(-6) + 2\\times(3) = 0$ $B_{1} = 3\\times4 + 4\\times(-2) = 4$ $B_{2} = 3\\times(-6) + 4\\times(3) = -6$ 使用矩陣簡化$σ_{P}^2$計算 參考資料\r\rVaR 風險值衡量(Value at Risk；VaR) 如何計算投資組合的風險和回報 $$σ_{P}^2 = \\begin{bmatrix}W_1\u0026W_2\u0026W_3\\end{bmatrix} \\times \\begin{bmatrix}σ_{1}^2\u0026σ_{2,1}\u0026σ_{3,1} \\\\\\ σ_{1,2}\u0026σ_{2}^2\u0026σ_{3,2} \\\\\\ σ_{1,3}\u0026σ_{2,3}\u0026σ_{3}^2\\end{bmatrix} \\times \\begin{bmatrix}W_1\\\\\\ W_2\\\\\\ W_3\\end{bmatrix}$$ \r\r .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-io4b{background-color:#efefef;border-color:inherit;color:#000000;font-weight:bold;text-align:center;vertical-align:top} .tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top} 步驟一 $$\\begin{bmatrix}W_1\u0026W_2\u0026W_3\\end{bmatrix} \\times \\begin{bmatrix}σ_{1}^2\u0026σ_{2,1}\u0026σ_{3,1} \\\\\\ σ_{1,2}\u0026σ_{2}^2\u0026σ_{3,2} \\\\\\ σ_{1,3}\u0026σ_{2,3}\u0026σ_{3}^2\\end{bmatrix}$$ $W_{1}σ_{1}^2 + W_{2}σ_{1,2}+ W_{3}σ_{1,3}$ $ W_{1}σ_{2,1}+ W_{2}σ_{2}^2+ W_{3}σ_{2,3}$ $ W_{1}σ_{3,1}+ W_{2}σ_{3,2}+ W_{3}σ_{3}^2$ 步驟二 $$\\begin{bmatrix} W_{1}σ_{1}^2 + W_{2}σ_{1,2}+ W_{3}σ_{1,3},\u0026 W_{1}σ_{2,1}+ W_{2}σ_{2}^2+ W_{3}σ_{2,3},\u0026 W_{1}σ_{3,1}+ W_{2}σ_{3,2}+ W_{3}σ_{3}^2\\end{bmatrix} \\times \\begin{bmatrix}W_1\\\\\\ W_2\\\\\\ W_3\\end{bmatrix}$$ $W_{1}^2σ_{1}^2$ $ W_{1}W_{2}σ_{2,1}$ $ W_{1}W_{2}σ_{3,1}$ $ W_{1} W_{2}σ_{1,2}$ $ W_{2}^2σ_{2}^2$ $ W_{2}W_{3}σ_{3,2}$ $ W_{1} W_{3}σ_{1,3}$ $ W_{2}W_{3}σ_{2,3}$ $ W_{3}^2σ_{3}^2$ 用Python表示 參考資料\r\rPython-繪製效率前緣(Efficient Frontier) Python金融大數據分析——第11章 統計學（2）投資組合優化 筆記\r\r 方法一 以下程式碼來源，參考自：\r\rPython-繪製效率前緣(Efficient Frontier) Portfolio_risk = np.sqrt(reduce(np.dot, [W, cov_matrix, W.T])) \r\r 方法二 參考資料\r\rPython Lambda Portfolio_risk = lambda a, b,c: np.sqrt(np.dot(np.dot(a,b),c)) Portfolio_risk(W, cov_matrix,W.T) \r\r ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:3:2","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"隨機生成10000筆權重 以下程式碼來源，參考自：\r\rPython-繪製效率前緣(Efficient Frontier) Expected_R = returns.mean() * 252 cov_matrix = returns.cov()*252 all_Portfolio_risk = [] all_return = [] Expected_R = returns.mean() * 252 stop = 0 while stop \u003c 10000: try: stop += 1 W = np.random.rand(len(stock_codes)) W = W/sum(W) all_return.append(sum(Expected_R * W)) all_Portfolio_risk.append(np.sqrt(reduce(np.dot, [W, cov_matrix, W.T]))) except: pass SR = np.array(all_return)/np.array(all_Portfolio_risk) \r\r 畫圖 Fig 1 fig = plt.figure(figsize = (20,10)) ax = fig.add_subplot() ax.plot(all_Portfolio_risk, all_return, 'o',alpha=1) fig.savefig('Efficient_Frontier_1.png',dpi=300, bbox_inches='tight') Fig 2 方法一 #基本設定 fig = plt.figure(figsize = (20,8)) risk_free = 0.01 SR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk) #字體大小設定 label_size = 27 tick_size = 15 Title_size = 40 #Title Title = 'Efficient Frontier' #格線 plt.grid(True) #散點圖 plt.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1) #X,Y軸標籤 plt.xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold') plt.ylabel('$E(R)$', fontsize=label_size, fontweight='bold') #X,Y軸字體設定 plt.xticks(fontsize=tick_size, fontweight='bold') plt.yticks(fontsize=tick_size, fontweight='bold') #color bar設定 cbar = plt.colorbar(label='$Sharpe$ $Ratio$') ax = cbar.ax ax.tick_params(labelsize=tick_size) cbar_Title = ax.yaxis.label font = matplotlib.font_manager.FontProperties(size=label_size) cbar_Title.set_font_properties(font) plt.title(Title, fontsize=Title_size,family = 'monospace',ha = 'center') #圖片儲存 plt.savefig('Efficient_Frontier_2.png',dpi=300, bbox_inches='tight') 方法二 fig = plt.figure(figsize = (20,8)) label_size = 27 tick_size = 15 Title_size = 40 Title = 'Efficient Frontier' risk_free = 0.01 SR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk) ax = fig.add_subplot() ax.grid(True) ax_main = ax.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1) ax.set_title(Title, fontsize=Title_size,family = 'monospace',ha = 'center') ax.set_xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold') ax.set_ylabel('$E(R)$', fontsize=label_size, fontweight='bold') ax.tick_params(labelsize=tick_size) cbar = fig.colorbar(ax_main, ax=ax, label = '$Sharpe$ $Ratio$') cbar = cbar.ax cbar.tick_params(labelsize=tick_size) cbar_Title = cbar.yaxis.label font = matplotlib.font_manager.FontProperties(size=label_size) cbar_Title.set_font_properties(font) fig.savefig('Efficient_Frontier_3.png',dpi=300, bbox_inches='tight') ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:3:3","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"scipy.optimize.minimize min($σ_{P}$) def standard_deviation(W): return Portfolio_risk(W, cov_matrix,W.T) 以下程式碼來源，參考自：\r\rPython-繪製效率前緣(Efficient Frontier) x0 = [1/len(stock_codes) for e in range(len(stock_codes))] bounds = tuple((0, 1) for x in range(len(stock_codes))) constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}] min_Portfolio_risk = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds) mvp_risk = min_Portfolio_risk.fun mvp_return = sum(min_Portfolio_risk.x * Expected_R) print('風險最小化投資組合預期報酬率為:' + str(round(mvp_return,2))) print('風險最小化投資組合風險為:' + str(round(mvp_risk,2))) \r\r 補充資料\r\rscipy.optimize.minimize \r\r 以下程式碼來源，參考自：\r\rPython-繪製效率前緣(Efficient Frontier) for i in range(0,len(stock_codes)): print(stock_codes[i]+' 佔投資組合權重 : ' + str(format(min_Portfolio_risk.x[i], '.4f'))) $$SR = \\frac{R_{P} - R_{f}}{σ_{P}}$$ risk_free = 0.01 SR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk) x0 = [1/len(stock_codes) for e in range(len(stock_codes))] bounds = tuple((0, 1) for x in range(len(stock_codes))) efficient_fronter_return_range = np.arange(min(all_return), max(all_return),(max(all_return) - min(all_return))/20) efficient_fronter_risk_list = [] for i in efficient_fronter_return_range: constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}, {'type': 'eq', 'fun': lambda x: sum(x * Expected_R) - i}] efficient_fronter = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds) efficient_fronter_risk_list.append(efficient_fronter.fun) \r\r label_size = 27 tick_size = 15 Title_size = 40 Title = 'Efficient Frontier' fig = plt.figure(figsize = (20,8)) ax = fig.add_subplot() ax.grid(True) ax_main = ax.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1) ax.set_title(Title, fontsize=Title_size,family = 'monospace',ha = 'center') ax.set_xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold') ax.set_ylabel('$E(R)$', fontsize=label_size, fontweight='bold') ax.tick_params(labelsize=tick_size) ax.plot(efficient_fronter_risk_list, efficient_fronter_return_range, linewidth=5, color='#251f6b') ax.plot(mvp_risk, mvp_return,'o',color='r', markerfacecolor='#ed1313', markersize=15) cbar = fig.colorbar(ax_main, ax=ax, label = '$Sharpe$ $Ratio$') cbar = cbar.ax cbar.tick_params(labelsize=tick_size) cbar_Title = cbar.yaxis.label font = matplotlib.font_manager.FontProperties(size=label_size) cbar_Title.set_font_properties(font) fig.savefig('Efficient_Frontier_4.png',dpi=300, bbox_inches='tight') ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:3:4","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"完整程式碼/SQL/ from sqlalchemy import create_engine import pandas as pd import matplotlib import matplotlib.pyplot as plt %matplotlib inline import numpy as np from functools import reduce import scipy.optimize as solver user = 'root' pw = \"YourPassword\" db = \"TWSE\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db)) Start = '2020/10/20 00:00:00' End = '2021/1/10 23:59:59' SQL = ''' SELECT `收盤價` FROM `{}` WHERE `證券代號` = '{}' AND `日期` BETWEEN '{}' AND '{}' ORDER BY `日期` ''' stock_codes = ['2330','2317','1234'] def getSQL(stock_code): df = pd.read_sql(SQL.format('每日收盤行情',stock_code, Start, End), engine, coerce_float=True, parse_dates=True) return df def Tsql(stock_codes): for i in range(0,len(stock_codes)): globals()[i] = getSQL(stock_codes[i]) if i == 0: df = pd.DataFrame(globals()[i].pct_change()) df = df.rename(columns = {'收盤價':stock_codes[i]}) else: df['{}'.format(stock_codes[i])] = globals()[i].pct_change() df = df.replace([np.inf, -np.inf,np.nan], 0) return df returns = Tsql(stock_codes) Expected_R = returns.mean() * 252 cov_matrix = returns.cov()*252 Portfolio_risk = lambda a, b,c: np.sqrt(np.dot(np.dot(a,b),c)) all_Portfolio_risk = [] all_return = [] stop = 0 while stop \u003c 10000: try: stop += 1 W = np.random.rand(len(stock_codes)) W = W/sum(W) all_return.append(sum(Expected_R * W)) all_Portfolio_risk.append(Portfolio_risk(W, cov_matrix,W.T)) except: pass def standard_deviation(W): return Portfolio_risk(W, cov_matrix,W.T) x0 = [1/len(stock_codes) for e in range(len(stock_codes))] bounds = tuple((0, 1) for x in range(len(stock_codes))) constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}] min_Portfolio_risk = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds) mvp_risk = min_Portfolio_risk.fun mvp_return = sum(min_Portfolio_risk.x * Expected_R) print('風險最小化投資組合預期報酬率為:' + str(round(mvp_return,2))) print('風險最小化投資組合風險為:' + str(round(mvp_risk,2))) for i in range(0,len(stock_codes)): print(stock_codes[i]+' 佔投資組合權重 : ' + str(format(min_Portfolio_risk.x[i], '.4f'))) risk_free = 0.01 SR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk) start = round(min(all_return),6) end = round(max(all_return),4) efficient_fronter_return_range = np.arange(start, end,(max(all_return) - min(all_return))/30) efficient_fronter_risk_list = [] for i in efficient_fronter_return_range: constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}, {'type': 'eq', 'fun': lambda x: sum(x * Expected_R) - i}] efficient_fronter = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds) efficient_fronter_risk_list.append(efficient_fronter.fun) label_size = 27 tick_size = 15 Title_size = 40 Title = 'Efficient Frontier' fig = plt.figure(figsize = (20,8)) ax = fig.add_subplot() ax.grid(True) ax_main = ax.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1) ax.set_title(Title, fontsize=Title_size,family = 'monospace',ha = 'center') ax.set_xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold') ax.set_ylabel('$E(R)$', fontsize=label_size, fontweight='bold') ax.tick_params(labelsize=tick_size) ax.plot(efficient_fronter_risk_list, efficient_fronter_return_range, linewidth=5, color='#251f6b') ax.plot(mvp_risk, mvp_return,'o',color='r', markerfacecolor='#ed1313', markersize=15) cbar = fig.colorbar(ax_main, ax=ax, label = '$Sharpe$ $Ratio$') cbar = cbar.ax cbar.tick_params(labelsize=tick_size) cbar_Title = cbar.yaxis.label font = matplotlib.font_manager.FontProperties(size=label_size) cbar_Title.set_font_properties(font) fig.savefig('Efficient_Frontier_4.png',dpi=300, bbox_inches='tight') ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:3:5","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"完整程式碼/免SQL/ import pandas_datareader.data as web import mplfinance as mpf import matplotlib import matplotlib.pyplot as plt %matplotlib inline import numpy as np import scipy.optimize as solver stock_code = ['2330','3008','6409','1234','2337','2412'] stock_codes = ['{}.tw'.format(e) for e in stock_code] df = web.DataReader(stock_codes, 'yahoo', '2020-05-01') returns = df['Close'].pct_change() Expected_R = returns.mean() * 252 cov_matrix = returns.cov()*252 Portfolio_risk = lambda a, b,c: np.sqrt(np.dot(np.dot(a,b),c)) all_Portfolio_risk = [] all_return = [] stop = 0 while stop \u003c 50000: try: stop += 1 W = np.random.rand(len(stock_codes)) W = W/sum(W) all_return.append(sum(Expected_R * W)) all_Portfolio_risk.append(Portfolio_risk(W, cov_matrix,W.T)) except: pass def standard_deviation(W): return Portfolio_risk(W, cov_matrix,W.T) x0 = [1/len(stock_codes) for e in range(len(stock_codes))] bounds = tuple((0, 1) for x in range(len(stock_codes))) constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}] min_Portfolio_risk = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds) mvp_risk = min_Portfolio_risk.fun mvp_return = sum(min_Portfolio_risk.x * Expected_R) print('風險最小化投資組合預期報酬率為:' + str(round(mvp_return,2))) print('風險最小化投資組合風險為:' + str(round(mvp_risk,2))) for i in range(0,len(stock_codes)): print(stock_codes[i]+' 佔投資組合權重 : ' + str(format(min_Portfolio_risk.x[i], '.4f'))) risk_free = 0.01 SR = (np.array(all_return)-risk_free)/np.array(all_Portfolio_risk) start = round(min(all_return),6) end = round(max(all_return),4) efficient_fronter_return_range = np.arange(start, end,(max(all_return) - min(all_return))/30) efficient_fronter_risk_list = [] for i in efficient_fronter_return_range: constraints = [{'type': 'eq', 'fun': lambda x: sum(x) - 1}, {'type': 'eq', 'fun': lambda x: sum(x * Expected_R) - i}] efficient_fronter = solver.minimize(standard_deviation, x0=x0, constraints=constraints, bounds=bounds) efficient_fronter_risk_list.append(efficient_fronter.fun) label_size = 27 tick_size = 15 Title_size = 40 Title = 'Efficient Frontier' fig = plt.figure(figsize = (20,8)) ax = fig.add_subplot() ax.grid(True) ax_main = ax.scatter(all_Portfolio_risk, all_return, c=SR,alpha=1) ax.set_title(Title, fontsize=Title_size,family = 'monospace',ha = 'center') ax.set_xlabel('$σ_{P}$', fontsize=label_size, fontweight='bold') ax.set_ylabel('$E(R)$', fontsize=label_size, fontweight='bold') ax.tick_params(labelsize=tick_size) ax.plot(efficient_fronter_risk_list, efficient_fronter_return_range, linewidth=5, color='#251f6b') ax.plot(mvp_risk, mvp_return,'o',color='r', markerfacecolor='#ed1313', markersize=15) cbar = fig.colorbar(ax_main, ax=ax, label = '$Sharpe$ $Ratio$') cbar = cbar.ax cbar.tick_params(labelsize=tick_size) cbar_Title = cbar.yaxis.label font = matplotlib.font_manager.FontProperties(size=label_size) cbar_Title.set_font_properties(font) fig.savefig('Efficient_Frontier_4.png',dpi=300, bbox_inches='tight') ","date":"2021-01-27","objectID":"/twse-12-efficient-frontier/:3:6","tags":["Python","TWSE","Pandas"],"title":"TWSE [12] Efficient Frontier","uri":"/twse-12-efficient-frontier/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com Wordcloud + MongoDB ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:0:0","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"img wordcloud.jpg ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:1:0","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"MongoDB連線 myclient = pymongo.MongoClient(\"mongodb://localhost:27017/\") mydb = myclient[\"article\"] mycol = mydb[\"2021_鉅亨網\"] ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:0","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"import %matplotlib inline import matplotlib.pyplot as plt from wordcloud import WordCloud from PIL import Image import numpy as np import jieba import nltk import pymongo ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:1","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"抓出文章內容 Text = \"\" for x in mycol.find({}): Text = Text + x[\"text\"] ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:2","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"Wordcloud圖 mask = np.array(Image.open('wordcloud.jpg')) wordcloud = WordCloud(background_color=\"white\", width=1000, height=860, margin=2, font_path=\"msjhbd.ttc\", mask=mask).generate(Text) plt.figure(figsize=(20,20)) plt.imshow(wordcloud) plt.axis(\"off\") plt.show() fig 1 fig 2 存到了一些無關緊要的資料 重複性高的開頭、形容詞 ex: 其中、今年、不過、另外...... ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:3","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"將符號移除 Text = Text.translate({ord(c):None for c in list(\"(),.“”（）「」，。、：；！|\\n/ 《》〔〕〈〉？\")}) ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:4","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"自建詞 userdict userdict.txt jieba.load_userdict(\"userdict.txt\") ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:5","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"中文斷詞 jieba terms = jieba.cut(Text) ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:6","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"停用詞 stopwords.txt stopwords.txt stopwords = list() with open(\"stopwords.txt\", \"r\", encoding = \"utf-8\") as fp: stopwords = [word.strip() for word in fp.readlines()] keyterms = [keyterm for keyterm in terms if keyterm not in stopwords] Text = \"/\".join(keyterms) ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:7","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"WordCloud圖 mask = np.array(Image.open('wordcloud.jpg')) wordcloud = WordCloud(background_color=\"white\", width=1000, height=860, margin=2, font_path=\"msjhbd.ttc\", mask=mask).generate(Text) plt.figure(figsize=(20,20)) plt.imshow(wordcloud) plt.axis(\"off\") plt.show() ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:2:8","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"讀取txt檔 ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:3:0","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"import %matplotlib inline import matplotlib.pyplot as plt from wordcloud import WordCloud from PIL import Image import numpy as np import jieba import nltk ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:3:1","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"Read .txt test_text.txt with open(\"test_text.txt\", \"r\", encoding = \"utf-8\") as fp: Text = fp.read() ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:3:2","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"畫圖 Text = Text.translate({ord(c):None for c in list(\"(),.“”（）「」，。、：；！|\\n/ 《》〔〕〈〉？\")}) jieba.load_userdict(\"userdict.txt\") terms = jieba.cut(Text) stopwords = list() with open(\"stopwords.txt\", \"r\", encoding = \"utf-8\") as fp: stopwords = [word.strip() for word in fp.readlines()] keyterms = [keyterm for keyterm in terms if keyterm not in stopwords] Text = \"/\".join(keyterms) mask = np.array(Image.open('wordcloud.jpg')) wordcloud = WordCloud(background_color=\"white\", width=1000, height=860, margin=2, font_path=\"msjhbd.ttc\", mask=mask).generate(Text) plt.figure(figsize=(20,20)) plt.imshow(wordcloud) plt.axis(\"off\") plt.show() ","date":"2021-01-26","objectID":"/twse-11-wordcloud-mongodb/:3:3","tags":["Python","TWSE","MongoDB","NoSQL","Word Cloud"],"title":"TWSE [11] Wordcloud + MongoDB","uri":"/twse-11-wordcloud-mongodb/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com NoSQL MonogoDB + Python ","date":"2021-01-19","objectID":"/twse-10-mongodb-python/:0:0","tags":["MongoDB","NoSQL","Python","NoSQL","TWSE"],"title":"TWSE [10] MongoDB+Python","uri":"/twse-10-mongodb-python/"},{"categories":["Python","TWSE"],"content":"MonogoDB Download 參考資料 Windows MongoDB 下載與安裝教學 關於 MongoDB 的 _id 欄位 MongoDB的_id和ObjectId怎麼理解？同樣是程式設計師，用心你就超前了 MongoDB Data Types ","date":"2021-01-19","objectID":"/twse-10-mongodb-python/:1:0","tags":["MongoDB","NoSQL","Python","NoSQL","TWSE"],"title":"TWSE [10] MongoDB+Python","uri":"/twse-10-mongodb-python/"},{"categories":["Python","TWSE"],"content":"MongoDB Version db.version() \u003e\u003e\u003e 4.4.2 ","date":"2021-01-19","objectID":"/twse-10-mongodb-python/:1:1","tags":["MongoDB","NoSQL","Python","NoSQL","TWSE"],"title":"TWSE [10] MongoDB+Python","uri":"/twse-10-mongodb-python/"},{"categories":["Python","TWSE"],"content":"MongoDB Data Types MongoDB Data Types Integer Arrays Timestamp Boolean Object Binary data Double Symbol Object ID Min/Max keys Null Regular expression String Date Code ","date":"2021-01-19","objectID":"/twse-10-mongodb-python/:1:2","tags":["MongoDB","NoSQL","Python","NoSQL","TWSE"],"title":"TWSE [10] MongoDB+Python","uri":"/twse-10-mongodb-python/"},{"categories":["Python","TWSE"],"content":"Robo 3T Download 參考資料 MongoDB 使用Robo 3T建立資料庫 ","date":"2021-01-19","objectID":"/twse-10-mongodb-python/:2:0","tags":["MongoDB","NoSQL","Python","NoSQL","TWSE"],"title":"TWSE [10] MongoDB+Python","uri":"/twse-10-mongodb-python/"},{"categories":["Python","TWSE"],"content":"Python ","date":"2021-01-19","objectID":"/twse-10-mongodb-python/:3:0","tags":["MongoDB","NoSQL","Python","NoSQL","TWSE"],"title":"TWSE [10] MongoDB+Python","uri":"/twse-10-mongodb-python/"},{"categories":["Python","TWSE"],"content":"w3schools 1 pip install pip install pymongo 2 import import pymongo myclient = pymongo.MongoClient(\"mongodb://localhost:27017/\") 3 測試用文章 #測試文章 title = '盤中零股交易台積電最受歡迎 成交金額逼近200億元' text = '''台股攻上波段新高，連帶掀起零股交易熱潮，根據證交所統計，盤中零股交易自去年 10 月 26 日實施以來，截至今年 1 月 15 日止，單日平均成交金額達 8.73 億元，加上盤後交易，單日平均金額超過 10 億元，其中權值股王台積電 (2330-TW) 累計成交值逼近 200 億元，是最熱門的交易標的。根據證交所統計，盤中零股交易前 10 大熱門標首推台積電，交易金額比重高達 34%，其次分別為：大立光 (3008-TW)(12%)、聯發科 (2454-TW)(5%)、國巨 (2327-TW)(3%)、元大台灣 50(2%)、鴻海 (2317-TW)(2%)；另外，聯電 (2303-TW)、台達電 (2308-TW)、玉晶光 (3406-TW)、同欣電 (6271-TW) 交易金額也有 1% 的比重。以成交股數來看，台積電以占整體交易比重 8% 居冠，其他依序分別為：聯電、鴻海、元大高股息、玉山金 (2884-TW)、元大台灣 50、長榮、元晶、敦泰與第一金。以台積電來說，假設投資人在 10 月 26 日當天高點 455 元買進台積電續抱至今，以今天收盤價 627 元計算，期間股價約上漲 37%，其他包括聯電、鴻海股價在期間攻上歷史高點，同樣讓零股投資人賺進一筆收益。''' 4 Create DB, Collection and Insert document mydb = myclient[\"article\"] mycol = mydb[\"test\"] mydict = { \"Title\": title, \"text\": text } x = mycol.insert_one(mydict) 5 印出所有DB print(myclient.list_database_names()) 6 印出所有collection print(mydb.list_collection_names()) ","date":"2021-01-19","objectID":"/twse-10-mongodb-python/:3:1","tags":["MongoDB","NoSQL","Python","NoSQL","TWSE"],"title":"TWSE [10] MongoDB+Python","uri":"/twse-10-mongodb-python/"},{"categories":["Python","TWSE"],"content":"Python + bs4 + 鉅亨網 1 def get_text(i): def get_text(i): post_id = urls[i].split('/')[5].split('?')[0] data = urllib.request.urlopen(urls[i]) soup = BeautifulSoup(data, 'html.parser') P = soup.find_all('p') text = '' for i,p in zip(range(0,len(P)),P): if i \u003e=4: text = text + p.getText() i += 1 tags = soup.find_all('a') n_tags = [] for tag in tags: if re.match('/tag/', str(tag.get('href'))): n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))]) title = soup.find('h1').getText() T = soup.find('time') Date = datetime.datetime.strptime(T['datetime'], \"%Y-%m-%dT%H:%M:%S+08:00\") return(Date,post_id,title,n_tags,text) 2 import套件 import pymongo import urllib from bs4 import BeautifulSoup import regex as re import datetime 3 Create DB, Collection myclient = pymongo.MongoClient(\"mongodb://localhost:27017/\") mydb = myclient[\"article\"] mycol = mydb[\"2021_鉅亨網\"] 4 Insert document url = 'https://news.cnyes.com/news/cat/tw_stock_news?exp=a' data = urllib.request.urlopen(url) soup = BeautifulSoup(data, 'html.parser') hrefs = soup.find_all('a') urls = ['https://news.cnyes.com'+ str(href.get('href')) for href in hrefs if re.match('/news/id/', str(href.get('href')))] for i in range(0,len(urls)): data = get_text(i) mydict = { \"Date\": data[0], \"post_id\":data[1],\"Title\": data[2], \"Tags\":data[3] , \"text\": data[4] } x = mycol.insert_one(mydict) 5 find 參考資料 Tutorial — PyMongo v2.0.1 documentation w3schools Collection Methods Finding duplicate keys with MongoDB’s aggregation framework find({}) 全部 for x in mycol.find({}): print(x) find({}).count() 計算全部數量 mycol.find({}).count() find({“X”:“XX”}) 特定資料 for x in mycol.find({\"Title\":\"宏泰人壽減資再增資 丟包袱223.9億元補虧損 2月底前現增19.5億元\"}): print(x) find({“X”: {\"$\u001elt\": X}}).sort(“XX”) 指定日期之前的所有資料.sort(“Date”) d = datetime.datetime(2021, 1, 21, 23) Year Month Day Hour 2021 1 21 23（整天） ★hour must be in 0~23 d = datetime.datetime(2021, 1, 21, 23) for x in mycol.find({\"Date\": {\"$lt\": d}}).sort(\"Date\"): print(x) print(mycol.find({\"Date\": {\"$lt\": d}}).sort(\"Date\").count()) find({‘Date’: {\"$\u001egte\": start,\"$\u001elte\": end}}) 找出一段時間的資料 start = datetime.datetime(2021, 1, 21, 0) end = datetime.datetime(2021, 1, 22, 20) for x in mycol.find({'Date': {\"$gte\": start,\"$lte\": end}}).sort(\"Date\"): print(x) 6 刪除重複資料 參考資料 mongo 删除重复数据 pymongo去除重复数据 pymongo: remove duplicates (map reduce?) MongoDB執行 準備重複資料 執行程式碼/SQL/ db.getCollection(\"test\").aggregate([ { $group:{_id:{Title:'$Title'},count:{$sum:1},dups:{$addToSet:'$_id'}} }, { $match:{count:{$gt:1}} } ]).forEach(function(it){ it.dups.shift(); db.getCollection(\"test\").remove({_id: {$in: it.dups}}); });db.getCollection(\"test\").aggregate([ { $group:{_id:{Title:'$Title'},count:{$sum:1},dups:{$addToSet:'$_id'}} }, { $match:{count:{$gt:1}} } ]).forEach(function(it){ it.dups.shift(); db.getCollection(\"test\").remove({_id: {$in: it.dups}}); }); Python執行 準備重複資料 for i in range(10): mydict = { \"Title\": title, \"text\": text } x = mycol.insert_one(mydict) 執行程式碼/Python/ cursor = mycol.aggregate( [ {\"$group\": {\"_id\": \"$Title\", \"unique_ids\": {\"$addToSet\": \"$_id\"}, \"count\": {\"$sum\": 1}}}, {\"$match\": {\"count\": { \"$gte\": 2 }}} ] ) response = [] for doc in cursor: del doc[\"unique_ids\"][0] for id in doc[\"unique_ids\"]: response.append(id) mycol.remove({\"_id\": {\"$in\": response}}) 7 $orderby 參考資料 $orderby cursor.sort() 先複製collection，避免出錯 不改變原始資料 執行程式碼/SQL/ db.getCollection('2021_鉅亨網_copy').find().sort( { Date: -1 } ) If MongoDB requires using more than 100 megabytes of system memory for the blocking sort operation, MongoDB returns an error unless the query specifies cursor.allowDiskUse() (New in MongoDB 4.4). allowDiskUse() allows MongoDB to use temporary files on disk to store data exceeding the 100 megabyte system memory limit while processing a blocking sort operation. 原文參考自： $orderby 執行程式碼/Python/ for x in mycol.find({}).sort(\"Date\"): print(x) ","date":"2021-01-19","objectID":"/twse-10-mongodb-python/:3:2","tags":["MongoDB","NoSQL","Python","NoSQL","TWSE"],"title":"TWSE [10] MongoDB+Python","uri":"/twse-10-mongodb-python/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com BeautifulSoup + 鉅亨網 import urllib from bs4 import BeautifulSoup url = 'https://news.cnyes.com/news/cat/tw_stock_news?exp=a' data = urllib.request.urlopen(url) soup = BeautifulSoup(data, 'html.parser') ","date":"2021-01-19","objectID":"/twse-9-bs4-%E9%89%85%E4%BA%A8%E7%B6%B2/:0:0","tags":["bs4","BeautifulSoup","urllib","html.parser"],"title":"TWSE [9] Bs4 + 鉅亨網","uri":"/twse-9-bs4-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"原始碼 print(soup) ","date":"2021-01-19","objectID":"/twse-9-bs4-%E9%89%85%E4%BA%A8%E7%B6%B2/:1:0","tags":["bs4","BeautifulSoup","urllib","html.parser"],"title":"TWSE [9] Bs4 + 鉅亨網","uri":"/twse-9-bs4-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"文章網址 找到 \u003ca\u003e...\u003c/a\u003e hrefs = soup.find_all('a') regex import regex as re for href in hrefs: if re.match('/news/id/', str(href.get('href'))): print('https://news.cnyes.com'+ str(href.get('href'))) 多個URL存成List urls = ['https://news.cnyes.com'+ str(href.get('href')) for href in hrefs if re.match('/news/id/', str(href.get('href')))] ","date":"2021-01-19","objectID":"/twse-9-bs4-%E9%89%85%E4%BA%A8%E7%B6%B2/:1:1","tags":["bs4","BeautifulSoup","urllib","html.parser"],"title":"TWSE [9] Bs4 + 鉅亨網","uri":"/twse-9-bs4-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["Python","TWSE"],"content":"多個URL的文章解析 data = urllib.request.urlopen(urls[0]) soup = BeautifulSoup(data, 'html.parser') 找出文章的標題 找到\u003ch1\u003e...\u003c/h1\u003e title = soup.find('h1').getText() 找出文章的tags 找到 \u003ca\u003e...\u003c/a\u003e tags = soup.find_all('a') for tag in tags: print(tag) tags = soup.find_all('a') for tag in tags: print(tag.get('href')) for tag in tags: if re.match('/tag/', str(tag.get('href'))): print(str(tag.get('href'))[5:len(str(tag.get('href')))]) tags存成list n_tags = [] for tag in tags: if re.match('/tag/', str(tag.get('href'))): n_tags = n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))]) 文章內文 找到 \u003cp\u003e...\u003c/p\u003e P = soup.find_all('p') print(P) 取\u003cp\u003e...\u003c/p\u003e的內文 for p in P: print(p.getText()) for i,p in zip(range(0,len(P)),P): if i \u003e=4: print(p.getText()) i += 1 包裝成def def get_text(i): data = urllib.request.urlopen(urls[i]) soup = BeautifulSoup(data, 'html.parser') P = soup.find_all('p') text = '' for i,p in zip(range(0,len(P)),P): if i \u003e=4: text = text + p.getText() i += 1 tags = soup.find_all('a') n_tags = [] for tag in tags: if re.match('/tag/', str(tag.get('href'))): n_tags.append(str(tag.get('href'))[5:len(str(tag.get('href')))]) title = soup.find('h1').getText() return(title,n_tags,text) ","date":"2021-01-19","objectID":"/twse-9-bs4-%E9%89%85%E4%BA%A8%E7%B6%B2/:1:2","tags":["bs4","BeautifulSoup","urllib","html.parser"],"title":"TWSE [9] Bs4 + 鉅亨網","uri":"/twse-9-bs4-%E9%89%85%E4%BA%A8%E7%B6%B2/"},{"categories":["TWSE"],"content":"Freepik from www.flaticon.com plotly | Chart Studio ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:0:0","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"每日收盤行情 ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:0","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"1 註冊帳號 ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:1","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"2 點選SQL Query ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:2","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"3 下載Falcon SQL Client ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:3","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"4 登入SQL 輸入MySQL的帳號, 密碼 ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:4","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"5 點選QUERY 確認有確實讀到資料庫 ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:5","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"6 點選SCHEDULE 1 點選 Connect to / Chart Studio Enterprise / 2 Your Chart Studio Enterprise Domain / https://api.plot.ly / ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:6","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"7 Authorize ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:7","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"8 點選QUERY SELECT `日期`,`成交股數`,`開盤價`,`最高價`,`最低價`,`收盤價`,`color` FROM `每日收盤行情` WHERE `證券代號` = 2330 ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:8","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"9 選擇要多久跑一次 ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:9","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["TWSE"],"content":"10 點選Live DataSet ","date":"2021-01-16","objectID":"/twse-8-chartstudio-1/:1:10","tags":["TWSE","Plotly","Chart Studio"],"title":"TWSE [8] plotly | Chart Studio | 1","uri":"/twse-8-chartstudio-1/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com Interactive Candlestick Charts ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:0:0","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Plotly pip install plotly ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:1:0","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:0","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"SQL連線 user = 'root' pw = \"YourPassworrd\" db = \"STOCK\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db)) df = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 \", engine, coerce_float=True, parse_dates=True) df = df.drop(columns = ['Stock Code','Change','Transaction','Trade Value']) df = df.rename(columns = {'Opening Price': 'Open','Highest Price':'High','Closing Price':'Close', 'Lowest Price':'Low','Closing Price':'Close','Trade Volume':'Volume'}) ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:1","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig1 Basic fig = go.Figure(data=[go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'])]) fig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\1.html\") fig.show() fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:2","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig2 xaxis_rangeslider_visible=False fig = go.Figure(data=[go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'])]) fig.update_layout(xaxis_rangeslider_visible=False) fig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\2.html\") fig.show() fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:3","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig3 Color \u0026 Title fig = go.Figure(data=[go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], increasing_line_color= '#5ac390', decreasing_line_color= '#fd6a6c')]) fig.update_layout( title='TWSE Stock Code:2330', yaxis_title='Price', xaxis_rangeslider_visible=False) fig.write_html(r\"C:\\Users\\User\\Downloads\\Python\\3.html\") fig.show() ####　fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:2:4","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"每日收盤行情 import plotly.graph_objects as go import pandas as pd ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:0","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"SQL連線 import sqlalchemy from sqlalchemy import create_engine user = 'root' pw = \"YourPassworrd\" db = \"TWSE\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=db)) df = pd.read_sql(\"SELECT * FROM `每日收盤行情` WHERE `證券代號` = 2330\", engine, coerce_float=True, parse_dates=True) ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:1","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"rename col /可做可不做/ df = df.rename(columns = {'開盤價': 'Open','最高價':'High','收盤價':'Close','最低價':'Low','日期':'Date','成交股數':'Volume'}) ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:2","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig4 subplots from plotly.subplots import make_subplots fig = make_subplots(rows=2, cols=1) fig.add_trace(go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], increasing_line_color= '#3D9970', decreasing_line_color= '#FF4136', increasing_fillcolor='#3D9970', decreasing_fillcolor='#FF4136')) fig.add_trace(go.Bar(y=df['Volume'],x = df['Date'],marker = dict(color=df['color'])), row=2, col=1) fig.update_layout( paper_bgcolor='#EEEEEE', plot_bgcolor='#EEEEEE', title='TWSE\u003cbr\u003eStock Code:2330', yaxis_title='Price', xaxis_rangeslider_visible=False) fig.show() fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:3","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Fig5 Change subplot sizes trace1 = go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], increasing_line_color= '#3D9970', decreasing_line_color= '#FF4136', increasing_fillcolor='#3D9970', decreasing_fillcolor='#FF4136') trace2 = go.Bar(y=df['Volume'],x = df['Date'],marker = dict(color=df['color']),yaxis='y2') data = [trace1, trace2] layout = go.Layout(yaxis2=dict(domain=[0, 0.3]), yaxis=dict(domain=[0.35,1]), xaxis_rangeslider_visible=False, title='\u003cb\u003eTWSE\u003c/b\u003e\u003cbr\u003eStock Code:2330', title_x = 0.5, title_font_size = 20, paper_bgcolor='#EEEEEE', plot_bgcolor='#EEEEEE', showlegend = False, hovermode = 'x unified', hoverlabel_bgcolor = 'rgba(255,255,255,0.9)', hoverlabel_namelength = 0) fig = go.Figure(data=data, layout=layout) fig.show() fig.show() ","date":"2020-12-05","objectID":"/twse-7-interactive-candlestick-charts/:3:4","tags":["Python","TWSE","Plotly"],"title":"TWSE [7] Interactive Candlestick Charts","uri":"/twse-7-interactive-candlestick-charts/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com MySQL to Dataframe ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:0:0","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"SQL連線 user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" ) engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\")) df = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/11/10 00:00:00' AND '2020/1/10 23:59:59'\", engine, coerce_float=True, parse_dates=True) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:1:0","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"讀取資料庫Table至Dataframe import pandas as pd df = pd.read_sql('SELECT* FROM `twse`', engine, index_col= 'Stock Code', coerce_float=True, parse_dates='Date') df ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:0","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"1 取出指定col值 print(df.['Opening Price']) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:1","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"2 取出指定index值 print(df.loc['2330']) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:2","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"3 取出指定index and col值 print(df.loc['2330']['Opening Price']) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:3","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"4 取出多個col值 df[['Opening Price', 'Closing Price']] ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:4","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"5 欄位名稱 df.columns ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:5","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"6 資料 df.values ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:6","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"7 欄位Type df.dtypes ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:7","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"8 index值 df.index ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:8","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"9 重新命名 df.rename(columns={'Opening Price': 'Open'}) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:9","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"# 實作 讀取指定index值至Dataframe df = pd.read_sql('SELECT* FROM `twse`, engine, index_col= 'Stock Code', coerce_float=True, parse_dates='Date') ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:2:10","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"mplfinance [新版] pip install mplfinance import mplfinance as mpf ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:3:0","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"每日收盤行情 SQL連線 user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" ) engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\")) df = pd.read_sql(\"SELECT* FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/11/10 00:00:00' AND '2020/1/10 23:59:59'\", engine, coerce_float=True, parse_dates=True) 重新調整Dataframe 1 刪掉多餘的Col df = df.drop(columns = ['Stock Code','Change','Transaction','Trade Value']) 2 重新命名Col df = df.rename(columns = {'Opening Price': 'Open','Highest Price':'High','Closing Price':'Close', 'Lowest Price':'Low','Closing Price':'Close','Trade Volume':'Volume'}) 3 df[‘Date’]型態改變 df['Date'] = pd.to_datetime(df['Date']) 4 重新排序 neworder = ['Open','High','Low','Close','Volume'] df = df.reindex(columns=neworder) Candlestick chart 基本 mpf.plot(df,type='candle') 美化 mc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',) s = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc) fig = mpf.figure(style=s,figsize=(20,20)) ax1 = fig.add_axes([0,0.3,1,0.4]) ax2 = fig.add_axes([0,0.1,1,0.2]) mav=(3,6,9) mpf.plot(df, type='candle', style=s, volume=ax2, mav=(3,6,9), panel_ratios=(4,1), xrotation=0, ax = ax1, update_width_config = dict(candle_width = 0.95), scale_width_adjustment = dict(lines=2)) ax1.legend(['mav '+str(mav[0]),'mav '+str(mav[1]),'mav '+str(mav[2])], loc='best', bbox_to_anchor=(0.2, 1.1), fontsize = 20, frameon = True, edgecolor = 'w', facecolor = 'w' ) ax1.set_title( label = '\\nTWSE\\n\\nStock Code:2330\\n', fontdict={'fontsize':30, 'fontweight':'bold', 'color':'k'}, loc='center' ) ax1.set_ylabel('Price',fontdict={'weight': 'bold', 'size': 20}) ax2.set_ylabel('Volume',fontdict={'weight': 'bold', 'size': 20}) ax1.yaxis.set_label_position(\"left\") ax1.yaxis.tick_left() yticks = np.arange(min(df['Volume']), max(df['Volume']), round( (max(df['Volume']) - min(df['Volume']))/5 )) ax2.set_yticks(yticks) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:3:1","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"免連SQL版 import pandas_datareader.data as web import mplfinance as mpf from IPython.display import Image stock_code = '0050.tw' df = web.DataReader(stock_code, 'yahoo', '2020-11-01') df = df[['Open', 'High', 'Low', 'Close', 'Volume']] 基本 mpf.plot(df, type='candle', mav=(5,20), volume=True, title='\\n{stock_code}'.format(stock_code=stock_code), savefig='test_1.png') Image('test_1.png') 美化 import matplotlib.pyplot as plt import numpy as np mc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',) s = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc) fig = mpf.figure(style=s,figsize=(20,15)) ax1 = fig.add_axes([0.05,0.3,0.95,0.5]) ax2 = fig.add_axes([0.05,0.1,0.95,0.2]) mav = (3,6,9) mpf.plot(df, type='candle', style=s, volume=ax2, mav=mav, panel_ratios=(4,1), xrotation=0, ax = ax1, update_width_config = dict(candle_width = 0.95), scale_width_adjustment = dict(lines=2)) ax1.legend(['mav '+str(mav[0]),'mav '+str(mav[1]),'mav '+str(mav[2])], loc='best', bbox_to_anchor=(0.2, 1.1), fontsize = 20, frameon = True, edgecolor = 'w', facecolor = 'w') ax1.set_title( label = '\\n\\nStock Code:{}\\n'.format(stock_code), fontdict={'fontsize':30, 'fontweight':'bold', 'color':'k'}, loc='center') ax1.set_xticks([]) ax1.set_ylabel('Price',fontdict={'weight': 'bold', 'size': 20}) ax2.set_ylabel('Volume',fontdict={'weight': 'bold', 'size': 20}) ax1.yaxis.set_label_position(\"left\") ax1.yaxis.tick_left() yticks = np.arange(min(df['Volume']), max(df['Volume']), round( (max(df['Volume']) - min(df['Volume']))/5 )) ax2.set_yticks(yticks) plt.savefig('test_2.png', dpi=300) MACD import matplotlib.pyplot as plt import numpy as np mc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',) s = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc) mc = mpf.make_marketcolors(up='#5ac390',down='#fd6a6c',volume='in',edge='None',) s = mpf.make_mpf_style(base_mpl_style='fivethirtyeight',gridstyle='None',marketcolors=mc) exp12 = df['Close'].ewm(span=12, adjust=False).mean() exp26 = df['Close'].ewm(span=26, adjust=False).mean() macd = exp12 - exp26 signal = macd.ewm(span=9, adjust=False).mean() histogram = macd - signal fig = plt.figure(figsize=(20,20)) ax1 = fig.add_axes([0.05,0.4,0.94,0.5]) ax2 = fig.add_axes([0.05,0.015,0.94,0.2]) ax3 = fig.add_axes([0.05,0.2,0.94,0.2]) strDate = [str(e).split(' ')[0] for e in df['Close'].index] plt.bar(strDate, histogram, color = '#7f7f7f') plt.plot(strDate, macd, color = 'b') plt.plot(strDate, signal, color = 'r') mav = (3,6,9) mpf.plot(df, type='candle', style=s, volume=ax2, mav=mav, panel_ratios=(4,1), xrotation=0, ax = ax1, update_width_config = dict(candle_width = 0.95), scale_width_adjustment = dict(lines=2)) ax1.legend(['mav '+str(mav[0]),'mav '+str(mav[1]),'mav '+str(mav[2])], loc='best', bbox_to_anchor=(0.2, 1.1), fontsize = 20, frameon = True, edgecolor = 'w', facecolor = 'w') ax3.legend(['macd','signal'], loc='best', bbox_to_anchor=(0.2, 1.1), fontsize = 20, frameon = True, edgecolor = 'w', facecolor = 'w') ax1.set_title( label = 'MACD\\n\\nStock Code:{}\\n'.format(stock_code), fontdict={'fontsize':30, 'fontweight':'bold', 'color':'k'}, loc='center') ax1.set_ylabel('Price',fontdict={'weight': 'bold', 'size': 20}) ax2.set_ylabel('Volume',fontdict={'weight': 'bold', 'size': 20}) ax1.yaxis.set_label_position(\"left\") ax1.yaxis.tick_left() yticks = np.arange(min(df['Volume']), max(df['Volume']), round( (max(df['Volume']) - min(df['Volume']))/5 )) ax2.set_yticks(yticks) ax1.set_xticks([]) ax3.set_xticks([]) ax1.set(frame_on=False) ax2.set(frame_on=False) ax3.set(frame_on=False) plt.savefig('test_3.png', dpi=300) ","date":"2020-11-29","objectID":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/:3:2","tags":["Python","TWSE","MySQL","mplfinance","dataframe","pd.read_sql"],"title":"TWSE [6] MySQL to Dataframe \u0026 mplfinance K線圖","uri":"/twse-6-mysql-to-dataframe-mplfinance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com mpl_finance [舊版] ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:0:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"SQL連線 ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:1:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 import MySQLdb user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute('USE STOCK') ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:1:1","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"mpl_finance import matplotlib.pyplot as plt import mpl_finance as mpf %matplotlib inline ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:2:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"基本設定 p = [int(e) for e in input(\"請輸入起始日期和結束日期\").split(\" \")] # 以空格隔開 period = \"`Date` BETWEEN '{}/{}/{} 00:00:00' AND '{}/{}/{} 23:59:59'\".format(p[0],p[1],p[2],p[3],p[4],p[5]) def sql_execute(column_name): SQL = \"SELECT {} FROM `twse` WHERE `Stock Code` = {} AND {} ORDER BY `Date`\" cursor.execute(SQL.format(column_name, 1234, period)) result = cursor.fetchall() return result def get_data(column_name): sql_data = [e[0] for e in sql_execute(column_name)] return sql_data ","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:3:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"完整程式碼 import MySQLdb import matplotlib.pyplot as plt import mpl_finance as mpf %matplotlib inline user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute('USE STOCK') p = [int(e) for e in input(\"請輸入起始日期和結束日期\").split(\" \")] period = \"`Date` BETWEEN '{}/{}/{} 00:00:00' AND '{}/{}/{} 23:59:59'\".format(p[0],p[1],p[2],p[3],p[4],p[5]) def get_data(column_name): sql_data = [e[0] for e in sql_execute(column_name)] return sql_data def sql_execute(column_name): SQL = \"SELECT {} FROM `twse` WHERE `Stock Code` = {} AND {} ORDER BY `Date`\" cursor.execute(SQL.format(column_name, 1234, period)) result = cursor.fetchall() return result op = get_data('`Opening Price`') cp = get_data('`Closing Price`') h = get_data('`Highest Price`') l = get_data('`Lowest Price`') D = [e[0] for e in sql_execute('`Date`')] fig = plt.figure(figsize=(20, 8)) ax = fig.add_subplot(1, 1, 1) ax.set_xticks(range(0, len(D), int(round(len(D)/7,0)))) ax.set_xticklabels(D[::int(round(len(D)/7,0))]) mpf.candlestick2_ochl(ax, op, cp, h, l, width=0.6, colorup='r', colordown='g', alpha=1); Icons made by Freepik from www.flaticon.com","date":"2020-11-29","objectID":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/:4:0","tags":["Python","TWSE","MySQL","mpl_finance"],"title":"TWSE [5] mpl_finance K線圖","uri":"/twse-5-mpl_finance-k%E7%B7%9A%E5%9C%96/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com TWSE的資料存入MySQL ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:0:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"SQL連線 ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:1:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"1 基本設定 import MySQLdb user = 'root' pw = \"YourPassworrd\" ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:1:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"2 不使用中文 conn = MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw) cursor=conn.cursor() ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:1:2","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"3 可使用中文 / charset=‘utf8’ / conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:1:3","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"create_engine ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:2:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"pymysql sqlalchemy pip install pymysql sqlalchemy from sqlalchemy import create_engine engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"STOCK\")) ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:2:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊/en/ ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:3:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"完整程式碼 import urllib.request, json import json import time import datetime import pandas as pd from sqlalchemy import create_engine import MySQLdb user = 'root' pw = \"YourPassworrd\" engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"STOCK\")) conn = MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw) cursor=conn.cursor() create_table = ''' `Stock Code` varchar(20) NOT NULL, `Date` date NOT NULL, `Trade Volume` bigint(20) NOT NULL, `Trade Value` bigint(20) NOT NULL, `Opening Price` float NOT NULL, `Highest Price` float NOT NULL, `Lowest Price` float NOT NULL, `Closing Price` float NOT NULL, `Change` float NOT NULL, `Transaction` bigint(20) NOT NULL ''' cursor.execute(\"CREATE DATABASE IF NOT EXISTS STOCK DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" ) cursor.execute('USE STOCK') cursor.execute('''CREATE TABLE IF NOT EXISTS TWSE ({})'''.format(create_table)) cursor.execute('ALTER TABLE TWSE RENAME TO TWSE_tempt') conn.commit() data ={} date_now = datetime.datetime.now() stock_list = [2330,1234] m = int(input(\"請輸入欲抓取月份數\"))-1 for j in range(0,len(stock_list)): for i in range (m,-1,-1): date = date_now - i*datetime.timedelta(days = 30.4375) url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"Stock Code\"] = stock_list[j] df = df.set_index('Stock Code') df = df.applymap(lambda x: str(x.replace(',',''))) df.to_sql('TWSE_tempt', con = engine, if_exists = 'append', index=True) time.sleep(10) print(\"[Stock Code: #{}][{}] loading......\".format(str(stock_list[j]),data['title'].split(\" \")[0])) cursor.execute('CREATE TABLE TWSE ({})'.format(create_table)) cursor.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY `Stock Code`, `Date` HAVING count(*)\u003e0''') cursor.execute('DROP TABLE TWSE_tempt') conn.commit() conn.close() print(\"All done ! ! !\") ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:3:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"每日收盤行情 ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:4:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"完整程式碼 import urllib.request, json import json import time import datetime import pandas as pd from sqlalchemy import create_engine import MySQLdb user = 'root' pw = \"YourPassworrd\" conn=MySQLdb.connect(host=\"127.0.0.1\",user=user, passwd=pw,charset='utf8') cursor=conn.cursor() cursor.execute(\"CREATE DATABASE IF NOT EXISTS TWSE DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_unicode_ci\" ) engine = create_engine(\"mysql+pymysql://{}:{}@localhost/{db}\".format(user,pw,db=\"TWSE\")) create_table = ''' `證券代號` varchar(20) NOT NULL, `證券名稱` varchar(20) NOT NULL, `成交股數` bigint(20), `成交筆數` bigint(20), `成交金額` float, `開盤價` float NOT NULL, `最高價` float NOT NULL, `最低價` float NOT NULL, `收盤價` float NOT NULL, `漲跌價差` float, `最後揭示買價` float, `最後揭示買量` float, `最後揭示賣價` float, `最後揭示賣量` bigint(20), `本益比` float, `日期` date NOT NULL ''' cursor.execute('USE TWSE') cursor.execute('''CREATE TABLE IF NOT EXISTS `每日收盤行情` ({})'''.format(create_table)) cursor.execute('ALTER TABLE `每日收盤行情` RENAME TO `每日收盤行情_tempt`') date = datetime.datetime.now() n = int(input('抓取n日資料')) for i in range(n): url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn\u0026date={}\u0026type=ALL\".format(str(date).split(' ')[0].replace('-','')) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) if data['stat'] ==\"OK\": df = pd.DataFrame(data['data9'][0:len(data['data9'])]) df.columns = data['fields9'] df = df.drop(columns = '漲跌(+/-)') df = df.set_index('證券代號') df = df.applymap(lambda x: str(x.replace(',',''))) df[\"日期\"] = str(date).split(' ')[0].replace('-','/') df.to_sql('每日收盤行情_tempt', con = engine, if_exists = 'append', index=True) print(url) time.sleep(4) else: print(data['stat']) date = date - datetime.timedelta(days = 1) cursor.execute('CREATE TABLE `每日收盤行情` ({})'.format(create_table)) cursor.execute('''INSERT INTO `每日收盤行情` SELECT* FROM `每日收盤行情_tempt` GROUP BY `證券代號`, `日期` HAVING count(*)\u003e0''') cursor.execute('DROP TABLE `每日收盤行情_tempt`') conn.commit() conn.close() print(\"All done ! ! !\") ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:4:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"取出資料 ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:5:0","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 1 回傳全部 cursor.fetchall() 2 回傳一個值 cursor.fetchone() 3 回傳多個值 cursor.fetchmany() 4 實際使用 cursor.execute(\"SELECT `Opening Price` FROM `twse` where `Stock Code` = 2330\") result = cursor.fetchall() print(result) 5 result型態 print(type(result)) tuple print(result[1][0]) 6 取出特定時間內資料 回傳 Opening Price Date BETWEEN 2019/10/10 ~ 2020/1/10 cursor.execute(\"SELECT `Opening Price` FROM `twse` WHERE `Stock Code` = 2330 AND `Date` BETWEEN '2019/10/10 00:00:00' AND '2020/1/10 23:59:59'\") result = cursor.fetchall() print(result) ","date":"2020-11-29","objectID":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/:5:1","tags":["Python","TWSE","dataframe","df.to_sql","MySQL"],"title":"TWSE [4] 資料存入MySQL及取出","uri":"/twse-4-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5mysql/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com TWSE的資料存入SQLite ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:0:0","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:0","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"1 SQLite連線 import sqlite3 conn = sqlite3.connect('Python_Stock_TWSE.db') c = conn.cursor() ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:1","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"2 建立Table c.execute('CREATE TABLE IF NOT EXISTS TWSE2330_tempt (股票代碼, 日期, 成交股數, 成交金額, 開盤價, 最高價, 最低價, 收盤價, 漲跌價差, 成交筆數)') ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:2","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"3 刪除Table c.execute('DROP TABLE TWSE2330_tempt') ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:3","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"# 完整程式碼 import pandas as pd import urllib.request, json import datetime import time import sqlite3 conn = sqlite3.connect('Python_Stock_TWSE.db') c = conn.cursor() c.execute('CREATE TABLE IF NOT EXISTS TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)') conn.commit() date_now = datetime.datetime.now() stock_list = [2330,1234] m = int(input(\"請輸入欲抓取月份數\"))-1 for j in range(0,len(stock_list)): for i in range (m,-1,-1): date = date_now - i*datetime.timedelta(days = 30.4375) url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"股票代碼\"] = stock_list[j] df = df.set_index('股票代碼') df.to_sql('TWSE', conn, if_exists='append', index = True) conn.commit() print(\"[#{}] {} is loading...\".format(stock_list[j], data['date'])) time.sleep(5) conn.close() print(\"Done\") ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:1:4","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"資料庫資料重複問題解決 ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:2:0","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"1 選出沒有重複的資料 SELECT* FROM TWSE GROUP BY 股票代碼, 日期 HAVING count(*)\u003e0 ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:2:1","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"2 TWSE_tempt當作緩存 將TWSE改成TWSE_tempt當作緩存 ，再新增一個TWSE INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY 股票代碼, 日期 HAVING count(*)\u003e0 c.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY 股票代碼, 日期 HAVING count(*)\u003e0''') ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:2:2","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"# 完整程式碼 import pandas as pd import urllib.request, json import datetime import time import sqlite3 conn = sqlite3.connect('Python_Stock_TWSE.db') c = conn.cursor() c.execute('CREATE TABLE IF NOT EXISTS TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)') c.execute('ALTER TABLE TWSE RENAME TO TWSE_tempt') conn.commit() date_now = datetime.datetime.now() stock_list = [2330,1234] m = int(input(\"請輸入欲抓取月份數\"))-1 for j in range(0,len(stock_list)): for i in range (m,-1,-1): date = date_now - i*datetime.timedelta(days = 30.4375) url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"股票代碼\"] = stock_list[j] df = df.set_index('股票代碼') df.to_sql('TWSE_tempt', conn, if_exists='append', index = True) print(\"[{}] Month: {} is loading......\".format(str(stock_list[j]),str(date).split('-')[1])) time.sleep(5) c.execute('CREATE TABLE TWSE (股票代碼 int, 日期 date, 成交股數 float, 成交金額 float, 開盤價 float, 最高價 float, 最低價 float, 收盤價 float, 漲跌價差 float, 成交筆數 float)') c.execute('''INSERT INTO TWSE SELECT* FROM TWSE_tempt GROUP BY 股票代碼, 日期 HAVING count(*)\u003e0''') c.execute('DROP TABLE TWSE_tempt') print(\"Done\") conn.commit() conn.close() ","date":"2020-11-28","objectID":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/:2:3","tags":["Python","TWSE","dataframe","df.to_sql","SQLite"],"title":"TWSE [3] 資料存入SQLite","uri":"/twse-3-%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5sqlite/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com DataFrame存入CSV檔 ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:0:0","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:0","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"1 相對路徑 df.to_csv('檔案名稱.csv') ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:1","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"2 絕對路徑 df.to_csv (r'路徑\\檔案名稱.csv') ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:2","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"3 取得路徑 import os os.getcwd() ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:3","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"4 df.to_csv 使用 1 以\"/“隔開 df.to_csv ('檔案名稱.csv', sep='/') 2 將檔案重複寫入 df.to_csv ('檔案名稱.csv', mode = 'a') 3 替換空值 df.to_csv ('檔案名稱.csv', na_rep='NA') 4 小數4位 df.to_csv ('檔案名稱.csv', float_format='%.4f') 5 不保留列名header df.to_csv ('檔案名稱.csv', header=0) 6 不保留引索值index df.to_csv ('檔案名稱.csv', index=0) # 完整程式碼 import pandas as pd import urllib.request, json import time stock_list = [1101,1234,2330,2337] date = 20200813 for j in range(0,len(stock_list)): url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(date,stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) stock_data.append(data) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"Stock Code\"] = stock_list[j] df = df.set_index('Stock Code') df = df.applymap(lambda x: str(x.replace(',',''))) print(\"[#{}] {} is loading...\".format(stock_list[j], data['date'])) df.to_csv (r'C:\\Users\\User\\Downloads\\Python\\Python_Stock_TWSE_type = 2330.csv', mode='a', header=0) time.sleep(5) ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:1:4","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"抓取多筆資料 ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:2:0","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"個股月成交資訊 import urllib.request, json import datetime import pandas as pd date_now = datetime.datetime.now() stock_list = [2330,1234] m = int(input(\"請輸入欲抓取月份數\"))-1 for j in range(0,len(stock_list)): for i in range (m,-1,-1): date = date_now - i*datetime.timedelta(days = 30.4375) url = \"http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(str(date).split(' ')[0].replace('-',''),stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"股票代碼\"] = stock_list[j] df = df.set_index('股票代碼') print(df) ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:2:1","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"每日收盤行情 import urllib.request, json import datetime import time import pandas as pd date = datetime.datetime.now() n = int(input('抓取n日資料')) for i in range(n): url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn\u0026date={}\u0026type=ALL\".format(str(date).split(' ')[0].replace('-','')) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) if data['stat'] ==\"OK\": df = pd.DataFrame(data['data9'][0:len(data['data9'])]) df.columns = data['fields9'] print(url) time.sleep(4) else: print(data['stat']) date = date - datetime.timedelta(days = 1) ","date":"2020-11-28","objectID":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/:2:2","tags":["Python","TWSE","dataframe","df.to_csv"],"title":"TWSE [2] 將DataFrame存入CSV檔 \u0026 抓取多筆資料","uri":"/twse-2-%E5%B0%87dataframe%E5%AD%98%E5%85%A5csv%E6%AA%94/"},{"categories":["Python","TWSE"],"content":"               ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"Freepik from www.flaticon.com ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:0:0","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"TWSE股票資料 ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:1:0","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"1 個股月成交資訊 個股月成交資訊以台積電2330為例 點選 列印/HTML 更改 html 為 jsn 更改 20200813為 20200713，即可找到7月資料 更改 stockNo=2330 為 stockNo=1234，即可找到黑松交易資 https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date=20200713\u0026stockNo=2330 https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=jsn\u0026date=20200713\u0026stockNo=1234 在exchangeReport前加上 /en/ 轉換成英文版 https://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date=20200713\u0026stockNo=1234 stock_list = [1234, 2330] date = 20200813 for j in range(0,len(stock_list)): url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(date,stock_list[j]) print(url) `` ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:1:1","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"2 每日收盤行情 每日收盤行情-全部 點選 列印/HTML 更改 html 為 jsn 更改 20200827 為 20200828，即可找到8月28日資料 在exchangeReport前加上 /en/ 轉換成英文版 https://www.twse.com.tw/en/exchangeReport/MI_INDEX?response=jsn\u0026date=20200828\u0026type=ALL ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:1:2","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"解析Json檔 ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:2:0","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"1 個股月成交資訊/en/ 1 解析 import urllib.request, json stock_list = [2330] date = 20200813 for j in range(0,len(stock_list)): url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(date,stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) print(data) 2 Json Editor for i in range(0, len(data['data'])): print(data['data'][i]) print(data['fields']) print(data['date']) print(data['title']) 3 以DataFrame呈現資料 1 DataFrame呈現 import pandas as pd df = pd.DataFrame(data['data'][0:len(data['data'])]) 2 設定欄位 df.columns = data['fields'] 3 增加Stock Code至df df[\"Stock Code\"] = stock_list[j] 4 將Stock Code 設為 index df = df.set_index('Stock Code') 5 將逗號拿掉 df = df.applymap(lambda x: str(x.replace(',',''))) # 完整程式碼 import pandas as pd import urllib.request, json stock_list = [2330] date = 20200813 for j in range(0,len(stock_list)): url = \"http://www.twse.com.tw/en/exchangeReport/STOCK_DAY?response=jsn\u0026date={}\u0026stockNo={}\".format(date,stock_list[j]) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data'][0:len(data['data'])]) df.columns = data['fields'] df[\"Stock Code\"] = stock_list[j] df = df.set_index('Stock Code') df = df.applymap(lambda x: str(x.replace(',',''))) df ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:2:1","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"},{"categories":["Python","TWSE"],"content":"2 每日收盤行情 解析Json檔 1 解析 import urllib.request, json import datetime date = datetime.datetime.now() url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn\u0026date={}\u0026type=ALL\".format(str(date).split(' ')[0].replace('-','')) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) print(data) print(data['fields9']) print(data['data9']) 2 以DataFrame呈現 import pandas as pd df = pd.DataFrame(data['data9'][0:len(data['data9'])]) df.columns = data['fields9'] 3 將漲跌(+/-)刪除 df = df.drop(columns = '漲跌(+/-)') 4 將證券代號設為index df = df.set_index('證券代號') 5 將逗號拿掉 df = df.applymap(lambda x: str(x.replace(',',''))) 6 加入日期 df[\"日期\"] = str(date).split(' ')[0].replace('-','/') # 完整程式碼 import urllib.request, json import pandas as pd import datetime date = datetime.datetime.now() url = \"https://www.twse.com.tw/exchangeReport/MI_INDEX?response=jsn\u0026date={}\u0026type=ALL\".format(str(date).split(' ')[0].replace('-','')) with urllib.request.urlopen(url) as jsonfile: data = json.loads(jsonfile.read().decode()) df = pd.DataFrame(data['data9'][0:len(data['data9'])]) df.columns = data['fields9'] df = df.drop(columns = '漲跌(+/-)') df = df.set_index('證券代號') df = df.applymap(lambda x: str(x.replace(',',''))) df[\"日期\"] = str(date).split(' ')[0].replace('-','/') df ","date":"2020-11-27","objectID":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/:2:2","tags":["Python","TWSE","jsn","dataframe"],"title":"TWSE [1] jsn檔解析","uri":"/twse-1-jsn%E6%AA%94%E8%A7%A3%E6%9E%90/"}]